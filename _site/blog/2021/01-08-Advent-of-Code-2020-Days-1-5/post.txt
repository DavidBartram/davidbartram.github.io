<!DOCTYPE html>
<html lang="en"><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Advent Of Code 2020 Days 1-5 | Dave Bartram Blog</title>
<meta name="generator" content="Jekyll v3.9.0" />
<meta property="og:title" content="Advent Of Code 2020 Days 1-5" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science" />
<meta property="og:description" content="Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science" />
<link rel="canonical" href="http://localhost:4000/blog/2021/01-08-Advent-of-Code-2020-Days-1-5/post.txt" />
<meta property="og:url" content="http://localhost:4000/blog/2021/01-08-Advent-of-Code-2020-Days-1-5/post.txt" />
<meta property="og:site_name" content="Dave Bartram Blog" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2021-01-08T13:45:39+00:00" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Advent Of Code 2020 Days 1-5" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2021-01-08T13:45:39+00:00","datePublished":"2021-01-08T13:45:39+00:00","description":"Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science","headline":"Advent Of Code 2020 Days 1-5","mainEntityOfPage":{"@type":"WebPage","@id":"http://localhost:4000/blog/2021/01-08-Advent-of-Code-2020-Days-1-5/post.txt"},"url":"http://localhost:4000/blog/2021/01-08-Advent-of-Code-2020-Days-1-5/post.txt"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/main.css"><link type="application/atom+xml" rel="alternate" href="http://localhost:4000/feed.xml" title="Dave Bartram Blog" /></head>
<body><header class="site-header" role="banner">

  <div class="wrapper"><a class="site-title" rel="author" href="/">Dave Bartram Blog</a><nav class="site-nav">
        <input type="checkbox" id="nav-trigger" class="nav-trigger" />
        <label for="nav-trigger">
          <span class="menu-icon">
            <svg viewBox="0 0 18 15" width="18px" height="15px">
              <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z"/>
            </svg>
          </span>
        </label>

        <div class="trigger"><a class="page-link" href="/about/">About</a><a class="page-link" href="/blog/2021/08-20-Vancian-Spellcasting-in-Tabletop-RPGs/post.txt">Vancian Spellcasting In Tabletop Rpgs</a><a class="page-link" href="/blog/2021/01-04-ReInvent-2020-1--AWS-Systems-Manager/post.txt">Reinvent 2020 Part 1 Aws Systems Manager</a><a class="page-link" href="/blog/2021/06-03-Reflections-on-the-AWS-Solutions-Architect-Associate-certification-(2021)/post.txt">Reflections On The Aws Solutions Architect Associate Certification 2021</a><a class="page-link" href="/blog/2021/03-22-RPG-Review-Worlds-Without-Number/post.txt">Rpg Review Worlds Without Number</a><a class="page-link" href="/blog/2021/08-12-AWS-Cloudformation-Example-Part-2--Deploy-and-Test-a-REST-API-+-Lambda-Function/post.txt">Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function</a><a class="page-link" href="/blog/2021/01-08-Advent-of-Code-2020-Days-1-5/post.txt">Advent Of Code 2020 Days 1-5</a><a class="page-link" href="/blog/2021/07-08-Doubting-Tau--a-question-of-%CF%80/post.txt">Doubting Tau A Question Of %Cf%80</a><a class="page-link" href="/blog/2021/04-29-Configuring-the-nginx-proxy-in-an-Elastic-Beanstalk-Linux-environment/post.txt">Configuring The Nginx Proxy In An Elastic Beanstalk Linux Environment</a><a class="page-link" href="/blog/2021/01-12-ReInvent-2020-2-%E2%80%93-Amazon-CodeGuru/post.txt">Reinvent 2020 2 Amazon Codeguru</a><a class="page-link" href="/blog/2021/08-02-AWS-Cloudformation-Example-Part-1--SAM-Template-for-REST-API-+-Lambda-Function/post.txt">Aws Cloudformation Example Part 1 Sam Template For Rest Api Lambda Function</a><a class="page-link" href="/blog/2021/01-22-ReInvent-2020-3-%E2%80%93-Container-Insights/post.txt">Reinvent 2020 3 Container Insights</a><a class="page-link" href="/blog/2021/09-02-Understanding-a-Python-38-Quine/post.txt">Understanding A Python 3 8 Quine</a><a class="page-link" href="/blog/2021/02-02-Advent-of-Code-2020-Days-11-15/post.txt">Advent Of Code 2020 Days 11-15</a><a class="page-link" href="/blog/2021/10-05-SQL-Server-Queries--Task-Duration-and-Inserting-Defaults/post.txt">Sql Server Queries Task Duration Inserting Defaults</a><a class="page-link" href="/blog/2021/10-26-RPG-Review-Stars-Without-Number-Revised-Edition/post.txt">Rpg Review Stars Without Number Revised Edition</a><a class="page-link" href="/blog/2021/02-22-Adding-Date-Related-Features-to-a-Pandas-Dataframe/post.txt">Adding Date Related Features To A Pandas Dataframe</a><a class="page-link" href="/blog/2021/03-08-Advent-of-Code-2020-Days-16-20/post.txt">Advent Of Code 2020 Days 16-20</a><a class="page-link" href="/blog/2021/12-17-Advent-of-Code-2021-Days-1-5/post.txt">Advent Of Code 2021 Days 1-5</a><a class="page-link" href="/blog/2021/07-15-Python-API-Request-with-Error-Handling-England-and-Wales-Bank-Holidays/post.txt">Python Api Request With Error Handling England Wales Bank Holidays</a><a class="page-link" href="/blog/2021/04-13-How-to-solve-SSL-Error-unable-to-get-local-issuer-certificate-for-Python-on-Windows/post.txt">How To Solve Ssl Error Unable To Get Local Issuer Certificate For Python On Windows</a><a class="page-link" href="/blog/2021/04-06-Advent-of-Code-2020-Days-21-25/post.txt">Advent Of Code 2020 Days 21-25</a><a class="page-link" href="/blog/2021/01-14-Advent-of-Code-2020-Days-6-10/post.txt">Advent Of Code 2020 Days 6-10</a><a class="page-link" href="/blog/2022/01-05-Advent-of-Code-2021-Days-6-10/post.txt">Advent Of Code 2021 Days 6-10</a><a class="page-link" href="/blog/2022/03-01-Advent-of-Code-2021-Days-11-15/post.txt">Advent Of Code 2021 Days 11-15</a><a class="page-link" href="/blog/2022/03-21-Advent-of-Code-2021-Days-16-20/post.txt">Advent Of Code 2021 Days 16-20</a><a class="page-link" href="/blog/2022/04-17-Advent-of-Code-2021--Days-21-25/post.txt">Advent Of Code 2021 Days 21-25</a><a class="page-link" href="/blog/2020/12-23-Bash-Scripting-2--Command-Substitution/post.txt">Bash Scripting 2 Command Substitution</a><a class="page-link" href="/blog/2020/12-18-The-Wizard-is-on-Mute-Roleplaying-During-the-Pandemic/post.txt">Roleplaying During The Pandemic</a><a class="page-link" href="/blog/2020/11-13-Bash-Scripting-1--the-whole-shebang/post.txt">Bash Scripting 1 The Whole Shebang</a><a class="page-link" href="/blog/2020/11-17-Great-content-from-Stand-up-Maths-Benfords-Law-Dodgy-Scatter-Graphs-and-the-2020-US-Election/post.txt">Great Content From Stand Up Maths Benfords Law Dodgy Scatter Graphs And The 2020 Us Election</a></div>
      </nav></div>
</header>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">Advent Of Code 2020 Days 1-5</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="2021-01-08T13:45:39+00:00" itemprop="datePublished">Jan 8, 2021
      </time></p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    # Advent of Code 2020 Days 1-5

![advent architecture blur business](/images/pexels-photo-195030.jpeg)

Advent is long over, but I'm working through [Advent of Code 2020](http://adventofcode.com/2020/) at my own pace. Here are some of my thoughts and solutions.

These posts will be quite brief, just a few thoughts on each puzzle and the Python 3 code I used to solve it. All code on Github [here](https://git.io/JmAvJ). The code below is for Part 2 of each day, which often incorporates Part 1 in some way.

Day 1 - [Report Repair](https://adventofcode.com/2020/day/1)
------------------------------------------------------------

### Thoughts

With the simple goal of finding the product of the three numbers in a list that add up to 2020. My first solution was horribly over-engineered. The solution below is a bit neater, but I still set a few unnecessary personal goals:

*   The puzzle input I got from AoC had only one trio with a sum of 2020, and thus only one answer for the product. I wanted to check I could deal with a list of numbers where multiple trios added to 2020. So I used my own input for the below.
*   Given that I would find multiple trios, I had to decide how to display the output. I decided to build a dictionary where the key is the trio, and the value is the product of the trio's three elements.
    *   The advantage of a dictionary, I thought, is that it won't accept multiple values for the same key.
    *   If I store the key as a `set` of 3 integers, I thought, then when the code inevitably finds a duplicate set (compare `{2001,18,1}` and `{1,2001,18}`) , it will just harmlessly overwrite the product associated with that set with an equal value.
    *   Actually....Python sets are **mutable**, so they aren't hashable, so they can't be used as dictionary keys. That's why you'll see `frozenset` below, which is an **immutable** Python data type which otherwise behaves like a `set`.

### Python Code

```python
import sys

sum_ = 2020

with open(sys.argv[1]) as f:
    lines = [int(l.rstrip('\n')) for l in f]
    trios = {}

    for line in lines:

        for line2 in lines:
            x = sum_ - line - line2

            if x in lines and len({x, line, line2}) == 3:
                trios[frozenset({x, line, line2})] = x*line*line2

    for key, val in trios.items():
        print(key, ":", val)
```

### Example Output
```
frozenset({1856, 150, 14}) : 3897600
frozenset({1312, 694, 14}) : 12747392
frozenset({1674, 196, 150}) : 49215600
```

Day 2 - [Password Philosophy](https://adventofcode.com/2020/day/2)
------------------------------------------------------------------

### Thoughts

Not much excitement here, just counting up the number of valid passwords in a list, based on some rather eccentric password policies.

### Python Code
```python
import sys

with open(sys.argv[1]) as file:
    lines = list()
    for line in file:
        line = line.replace(":", "")
        line = line.replace("-", " ")
        lines = lines + [line.strip().split()]

validcount = 0
for line in lines:
    pos1 = int(line[0]) - 1
    pos2 = int(line[1]) - 1
    char = line[2]
    password = line[3]

    if password[pos1] == char:

        if password[pos2] != char:
            validcount += 1

    elif password[pos2] == char:
        validcount += 1

print(validcount)
```

Day 3 - [Toboggan Trajectory](https://adventofcode.com/2020/day/3)
------------------------------------------------------------------

### Thoughts

A puzzle about heading down a slope in a toboggan that can apparently survive colliding with a tree. Some posters on the [subreddit](https://www.reddit.com/r/adventofcode/) decided to go the extra mile with graphics, even 3D representations in Unity! My solution is rather less ambitious.

[Indexing from zero](https://en.wikipedia.org/wiki/Zero-based_numbering) (e.g. `list[0]` is the first item in `list`) is handy when doing [modular arithmetic](https://en.wikipedia.org/wiki/Modular_arithmetic).

e.g. in Python `x % len(list)` will convert any integer `x` into an index that's within the bounds of `list`.

Hypothetically, if `list[1]` were the first item in `list`, you'd get an off-by-one error. For example, in a list with 30 items, `30 % len(list)` is 0 and list[0] doesn't exist! You'd need `(x % len(list))+1` and nobody wants to deal with that.

### Python Code
```python
import sys

with open(sys.argv[1]) as file:
    map_ = file.read().splitlines()

def  trees(dx, dy):
    x = 0
    y = 0
    xmax = len(map_[0])
    ymax = len(map_)
    count = 0

    if map_[x][y] == "#":
        count = 1

    while y < ymax:
        x = (x+dx)%(xmax)
        y = (y+dy)

        if y  >= ymax:
            break
        
        if map_[y][x] != "." and map_[y][x] !="#":
            print("error at x=",x, "y=",y)
            break

        elif map_[y][x] == "#":
            count += 1

    return count


print("product", trees(1,1)*trees(3,1)*trees(5,1)*trees(7,1)*trees(1,2) )
```

Day 4 - [Passport Processing](https://adventofcode.com/2020/day/4)
------------------------------------------------------------------

### Thoughts

Who doesn't love a bit of Regex matching? Thank goodness for [https://regex101.com/](https://regex101.com/).

There was a salutary lesson here - while working on Part 2, I forgot to keep enforcing the requirements from Part 1 which were still relevant. Spent a fair while looking for a coding error which was actually an error understanding the requirements.

### Python Code
```python
import sys
import re

with open(sys.argv[1]) as file:
    ports = file.read().split('\n\n')

ports = [re.findall(r'\S*:\S*', port) for port in ports]

countvalid = 0

req = {'ecl', 'pid', 'eyr', 'hcl', 'byr', 'iyr', 'hgt'}

for port in ports:

    portvalid = True
    present = set()

    for field in port:
        valid = True
        present.add(field[:3])
        x = field.partition(':')[2]

        if field.startswith('byr'):
            valid = 1920 <= int(x) <= 2002

        elif field.startswith('iyr'):
            x = int(x)

            valid = 2010 <= int(x) <= 2020

        elif field.startswith('eyr'):
            valid = 2020 <= int(x) <= 2030

        elif field.startswith('hgt'):
            
            if field.endswith('cm'):
                x = x.replace('cm', '')
                valid = 150 <= int(x) <= 193
            
            elif field.endswith('in'):
                x = x.replace('in', '')
                valid = 59 <= int(x) <= 76
            
            else:
                valid = False

        elif field.startswith('hcl'):
            valid = bool(re.fullmatch(r'#[0-9a-f]{6}', x))

        elif field.startswith('ecl'):
            valid = bool(re.fullmatch(r'amb|blu|brn|gry|grn|hzl|oth', x))

        elif field.startswith('pid'):
            valid = bool(re.fullmatch(r'[0-9]{9}', x))

        portvalid = portvalid and valid
        #print(field, valid)

    present.discard('cid')
    if present != req:
        portvalid = False

    if portvalid:
        countvalid += 1

print(countvalid)
```

Day 5 - [Binary Boarding](https://adventofcode.com/2020/day/4)
--------------------------------------------------------------

### Thoughts

Nice quick one involving a very convenient plane with 128 rows and 8 columns of seats!

### Python Code
```python
import sys


with open(sys.argv[1]) as file:
    lines = [line.rstrip('\n') for line in file]

rows = []
cols = []
IDs = []

for line in lines:
    rows.append(line[:7])
    cols.append(line[-3:])

rows = [row.replace("F","0").replace("B","1") for row in rows]
rows = [int(row,2) for row in rows] #convert from binary to decimal

cols = [col.replace("L","0").replace("R","1") for col in cols]
cols = [int(col,2) for col in cols] #convert from binary to decimal


for i in range(len(rows)):
    IDs.append(rows[i]*8 + cols[i])

print(max(IDs))


IDs.sort()

for i in range(len(rows)):
    if IDs[i] + 1 != IDs[i+1]:
        print(IDs[i] + 1)
        break
```
  </div><a class="u-url" href="/blog/2021/01-08-Advent-of-Code-2020-Days-1-5/post.txt" hidden></a>
</article>

      </div>
    </main><footer class="site-footer h-card">
  <data class="u-url" href="/"></data>

  <div class="wrapper">

    <h2 class="footer-heading">Dave Bartram Blog</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <li class="p-name">Dave Bartram Blog</li><li><a class="u-email" href="mailto:david.bartram@gmail.com">david.bartram@gmail.com</a></li></ul>
      </div>

      <div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/davidbartram"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">davidbartram</span></a></li></ul>
</div>

      <div class="footer-col footer-col-3">
        <p>Lessons I&#39;m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science</p>
      </div>
    </div>

  </div>

</footer>
</body>

</html>
