<!DOCTYPE html>
<html lang="en"><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function | Dave Bartram Blog</title>
<meta name="generator" content="Jekyll v3.9.0" />
<meta property="og:title" content="Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science" />
<meta property="og:description" content="Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science" />
<link rel="canonical" href="http://localhost:4000/blog/2021/08-12-AWS-Cloudformation-Example-Part-2--Deploy-and-Test-a-REST-API-+-Lambda-Function/post.txt" />
<meta property="og:url" content="http://localhost:4000/blog/2021/08-12-AWS-Cloudformation-Example-Part-2--Deploy-and-Test-a-REST-API-+-Lambda-Function/post.txt" />
<meta property="og:site_name" content="Dave Bartram Blog" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2021-08-12T14:45:39+01:00" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2021-08-12T14:45:39+01:00","datePublished":"2021-08-12T14:45:39+01:00","description":"Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science","headline":"Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function","mainEntityOfPage":{"@type":"WebPage","@id":"http://localhost:4000/blog/2021/08-12-AWS-Cloudformation-Example-Part-2--Deploy-and-Test-a-REST-API-+-Lambda-Function/post.txt"},"url":"http://localhost:4000/blog/2021/08-12-AWS-Cloudformation-Example-Part-2--Deploy-and-Test-a-REST-API-+-Lambda-Function/post.txt"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/main.css"><link type="application/atom+xml" rel="alternate" href="http://localhost:4000/feed.xml" title="Dave Bartram Blog" /></head>
<body><header class="site-header" role="banner">

  <div class="wrapper"><a class="site-title" rel="author" href="/">Dave Bartram Blog</a><nav class="site-nav">
        <input type="checkbox" id="nav-trigger" class="nav-trigger" />
        <label for="nav-trigger">
          <span class="menu-icon">
            <svg viewBox="0 0 18 15" width="18px" height="15px">
              <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z"/>
            </svg>
          </span>
        </label>

        <div class="trigger"><a class="page-link" href="/about/">About</a><a class="page-link" href="/blog/2021/08-20-Vancian-Spellcasting-in-Tabletop-RPGs/post.txt">Vancian Spellcasting In Tabletop Rpgs</a><a class="page-link" href="/blog/2021/01-04-ReInvent-2020-1--AWS-Systems-Manager/post.txt">Reinvent 2020 Part 1 Aws Systems Manager</a><a class="page-link" href="/blog/2021/06-03-Reflections-on-the-AWS-Solutions-Architect-Associate-certification-(2021)/post.txt">Reflections On The Aws Solutions Architect Associate Certification 2021</a><a class="page-link" href="/blog/2021/03-22-RPG-Review-Worlds-Without-Number/post.txt">Rpg Review Worlds Without Number</a><a class="page-link" href="/blog/2021/08-12-AWS-Cloudformation-Example-Part-2--Deploy-and-Test-a-REST-API-+-Lambda-Function/post.txt">Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function</a><a class="page-link" href="/blog/2021/01-08-Advent-of-Code-2020-Days-1-5/post.txt">Advent Of Code 2020 Days 1-5</a><a class="page-link" href="/blog/2021/07-08-Doubting-Tau--a-question-of-%CF%80/post.txt">Doubting Tau A Question Of %Cf%80</a><a class="page-link" href="/blog/2021/04-29-Configuring-the-nginx-proxy-in-an-Elastic-Beanstalk-Linux-environment/post.txt">Configuring The Nginx Proxy In An Elastic Beanstalk Linux Environment</a><a class="page-link" href="/blog/2021/01-12-ReInvent-2020-2-%E2%80%93-Amazon-CodeGuru/post.txt">Reinvent 2020 2 Amazon Codeguru</a><a class="page-link" href="/blog/2021/08-02-AWS-Cloudformation-Example-Part-1--SAM-Template-for-REST-API-+-Lambda-Function/post.txt">Aws Cloudformation Example Part 1 Sam Template For Rest Api Lambda Function</a><a class="page-link" href="/blog/2021/01-22-ReInvent-2020-3-%E2%80%93-Container-Insights/post.txt">Reinvent 2020 3 Container Insights</a><a class="page-link" href="/blog/2021/09-02-Understanding-a-Python-38-Quine/post.txt">Understanding A Python 3 8 Quine</a><a class="page-link" href="/blog/2021/02-02-Advent-of-Code-2020-Days-11-15/post.txt">Advent Of Code 2020 Days 11-15</a><a class="page-link" href="/blog/2021/10-05-SQL-Server-Queries--Task-Duration-and-Inserting-Defaults/post.txt">Sql Server Queries Task Duration Inserting Defaults</a><a class="page-link" href="/blog/2021/10-26-RPG-Review-Stars-Without-Number-Revised-Edition/post.txt">Rpg Review Stars Without Number Revised Edition</a><a class="page-link" href="/blog/2021/02-22-Adding-Date-Related-Features-to-a-Pandas-Dataframe/post.txt">Adding Date Related Features To A Pandas Dataframe</a><a class="page-link" href="/blog/2021/03-08-Advent-of-Code-2020-Days-16-20/post.txt">Advent Of Code 2020 Days 16-20</a><a class="page-link" href="/blog/2021/12-17-Advent-of-Code-2021-Days-1-5/post.txt">Advent Of Code 2021 Days 1-5</a><a class="page-link" href="/blog/2021/07-15-Python-API-Request-with-Error-Handling-England-and-Wales-Bank-Holidays/post.txt">Python Api Request With Error Handling England Wales Bank Holidays</a><a class="page-link" href="/blog/2021/04-13-How-to-solve-SSL-Error-unable-to-get-local-issuer-certificate-for-Python-on-Windows/post.txt">How To Solve Ssl Error Unable To Get Local Issuer Certificate For Python On Windows</a><a class="page-link" href="/blog/2021/04-06-Advent-of-Code-2020-Days-21-25/post.txt">Advent Of Code 2020 Days 21-25</a><a class="page-link" href="/blog/2021/01-14-Advent-of-Code-2020-Days-6-10/post.txt">Advent Of Code 2020 Days 6-10</a><a class="page-link" href="/blog/2022/01-05-Advent-of-Code-2021-Days-6-10/post.txt">Advent Of Code 2021 Days 6-10</a><a class="page-link" href="/blog/2022/03-01-Advent-of-Code-2021-Days-11-15/post.txt">Advent Of Code 2021 Days 11-15</a><a class="page-link" href="/blog/2022/03-21-Advent-of-Code-2021-Days-16-20/post.txt">Advent Of Code 2021 Days 16-20</a><a class="page-link" href="/blog/2022/04-17-Advent-of-Code-2021--Days-21-25/post.txt">Advent Of Code 2021 Days 21-25</a><a class="page-link" href="/blog/2020/12-23-Bash-Scripting-2--Command-Substitution/post.txt">Bash Scripting 2 Command Substitution</a><a class="page-link" href="/blog/2020/12-18-The-Wizard-is-on-Mute-Roleplaying-During-the-Pandemic/post.txt">Roleplaying During The Pandemic</a><a class="page-link" href="/blog/2020/11-13-Bash-Scripting-1--the-whole-shebang/post.txt">Bash Scripting 1 The Whole Shebang</a><a class="page-link" href="/blog/2020/11-17-Great-content-from-Stand-up-Maths-Benfords-Law-Dodgy-Scatter-Graphs-and-the-2020-US-Election/post.txt">Great Content From Stand Up Maths Benfords Law Dodgy Scatter Graphs And The 2020 Us Election</a></div>
      </nav></div>
</header>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="2021-08-12T14:45:39+01:00" itemprop="datePublished">Aug 12, 2021
      </time></p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    # AWS Cloudformation Example Part 2 - Deploy and Test a REST API + Lambda Function

![person in black long sleeve shirt holding white tissue paper](/images/pexels-photo-4175032.jpeg)

In [Part 1](https://david-bartram.com/2021/08/02/aws-cloudformation-example-part-1-sam-template-for-rest-api-lambda-function/) we put together a Cloudformation SAM template for a simple REST API backed by a lambda function. The resulting code is available in [this repo](https://github.com/DavidBartram/cloudformation-api-lambda).

In this post, we'll walk through how to deploy the template to AWS and test the API using Postman.

1. Install SAM CLI
------------------

To deploy SAM templates, you'll want to [install the SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html). Make sure that the IAM user whose access key and secret key you are using has the necessary permissions to deploy this. If you're doing this as a learning activity on a personal account, as I was, it's simplest to use the credentials of a user with Administrator access.

2**.** Clone repository
-----------------------

Now you'll need a SAM template to deploy, along with the code you want to use in the lambda function. The code we're using here can be found on [my GitHub](https://github.com/DavidBartram/cloudformation-api-lambda) and was explained in [Part 1](https://david-bartram.com/2021/08/02/aws-cloudformation-example-part-1-sam-template-for-rest-api-lambda-function/). Fork the repo and clone it down to your machine.

3. SAM build
------------

Using your command line of choice, change directory to the cloned repo. (My main laptop is Windows so it would be PowerShell for me - stop hissing in the background, you lot. I like bash as well.)

Enter the `sam build` command.

This will package the separate components in the folder (e.g. the SAM template and the lambda code in this example) together into a deployable artifact.

`sam build` is expecting a file call `template.yml` in the root of the directory, but of course it is easy to set the template name with the -t option if required. The options are documented [here](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-build.html).

You're hoping for a successful build, like the below:

![](/images/image.png)

4. SAM deploy
-------------

Well, who am I to argue with the suggestion that we use `sam deploy --guided` ?

The `--guided` option, as you'd expect, means that SAM will guide you through the process with prompts.

However we want to deploy IAM resources with custom names, which requires a capability called CAPABILITY_NAMED_IAM. So our full command will look like:

`sam deploy --guided --capabilities CAPABILITY_NAMED_IAM`

You can choose what to name your Cloudformation stack, the Region you want to deploy to, and the values of all the parameters in `template.yml`. I was happy with the defaults, so I only had to choose the stack name and the last few options.

![](/images/image-2.png)

The last 3 options will save the SAM configuration to a [config file](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-config.html) called `samconfig.toml` in the root of the directory.

I asked to confirm the changes before deployment, so I get a chance to look at the changeset:

![](/images/image-3.png)

Those look like the resources I asked for in my template, so I will answer in the affirmative to `Deploy this changeset? [y/N]` `.`

You can watch it being created, and soon enough the stack will be successfully deployed:

![](/images/image-4.png)

5. View Cloudformation Stack in AWS Console
-------------------------------------------

Let's hope into the AWS console, go to the Cloudformation console and select the stack you've just created. If you go to the Resources tab you can see all the resources that have been created. At this point if you're anything like me you'll want to visit some of the resources and poke around, see if things are as you expected based on your template.

![](/images/image-5.png)

6. Test API in AWS Console
--------------------------

Let's start testing the API that we've deployed. Firstly we're going to test it from the console, by clicking the "physical ID" of the RestApi resource in the table shown in the image above. This will open up the API Gateway console and let us look at our API.

There's plenty of interesting things we could look at, but for now click on the POST method and then click the test button:

![](/images/image-6.png)

This test bypasses any authorization on the API. For the request body, enter something that matches the schema we set up for submitting sales stats for coloured widgets. It should look something like this:

```json
{
"date": "2021-07-28",
"location": "Manchester",
"red_sold": "2051",
"blue_sold": "37",
"green_sold": "588"
}
```

You're expecting a matching response

```json
{
  "Notes": "Thank you for submitting data. You submitted the following. Date 2021-07-28 at location Manchester, number of red widgets sold was 2051, number of blue widgets sold was 37, number of green widgets sold was 588."
}
```

7. Create IAM user + attach policy
----------------------------------

If we want to use the API properly, we need the right authorization. Last time, I decided to use IAM authorization. We want to create our IAM user separately from the stack, as we want their details to persist if changes are made to the stack.

Follow the instructions [here](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html) to create an IAM user with programmatic access. Make sure you save the access key and secret key.

The only permissions this user needs are in the API user managed policy created as part of the stack. Attach that policy to the user, and they will have access to this API.

8. Install Postman
------------------

[Postman](https://www.postman.com/) is a great tool for working on APIs, and it's particularly easy to send a test API request with Postman and look at the response. It's especially handy here as it can automatically sign the API request the way AWS IAM expects, using an access key and secret key. Download it [here](https://www.postman.com/downloads/).

9. Test API with Postman
------------------------

Let's construct our request. Click New in Postman, and choose a basic request. Give it a name and save it.

Select POST from the dropdown, and enter your API's URL.

The url will be of this form:

```
https://<API ID>.execute-api.<region>.amazonaws.com/<stage>/<resource>
```

You don't need to pass in any query parameters.

Select the Body tab, select the "raw" option and choose JSON from the dropdown. Enter a valid JSON Body.

![](/images/image-8.png)

If you click Send now, you'll get a "Missing Authentication Token" error in response. This API isn't available to just anyone - you need to sign your request with the access key and secret key of the IAM user you created earlier.

Go to the Authorization tab and select AWS Signature from the Authorization Type dropdown. Enter your access key and secret key on the right. Click Advanced and enter the AWS region.

![](/images/image-9.png)

Now when you hit Send, you'll get the response you expect below your request.

Congratulations - you've made and deployed an API Gateway backed by a lambda function with AWS, and tested it from inside and outside AWS!
  </div><a class="u-url" href="/blog/2021/08-12-AWS-Cloudformation-Example-Part-2--Deploy-and-Test-a-REST-API-+-Lambda-Function/post.txt" hidden></a>
</article>

      </div>
    </main><footer class="site-footer h-card">
  <data class="u-url" href="/"></data>

  <div class="wrapper">

    <h2 class="footer-heading">Dave Bartram Blog</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <li class="p-name">Dave Bartram Blog</li><li><a class="u-email" href="mailto:david.bartram@gmail.com">david.bartram@gmail.com</a></li></ul>
      </div>

      <div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/davidbartram"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">davidbartram</span></a></li></ul>
</div>

      <div class="footer-col footer-col-3">
        <p>Lessons I&#39;m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science</p>
      </div>
    </div>

  </div>

</footer>
</body>

</html>
