<!DOCTYPE html>
<html lang="en"><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Advent Of Code 2020 Days 6-10 | Dave Bartram Blog</title>
<meta name="generator" content="Jekyll v3.9.0" />
<meta property="og:title" content="Advent Of Code 2020 Days 6-10" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science" />
<meta property="og:description" content="Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science" />
<link rel="canonical" href="http://localhost:4000/blog/2021/01-14-Advent-of-Code-2020-Days-6-10/post.txt" />
<meta property="og:url" content="http://localhost:4000/blog/2021/01-14-Advent-of-Code-2020-Days-6-10/post.txt" />
<meta property="og:site_name" content="Dave Bartram Blog" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2021-01-14T13:45:39+00:00" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Advent Of Code 2020 Days 6-10" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2021-01-14T13:45:39+00:00","datePublished":"2021-01-14T13:45:39+00:00","description":"Lessons I’m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science","headline":"Advent Of Code 2020 Days 6-10","mainEntityOfPage":{"@type":"WebPage","@id":"http://localhost:4000/blog/2021/01-14-Advent-of-Code-2020-Days-6-10/post.txt"},"url":"http://localhost:4000/blog/2021/01-14-Advent-of-Code-2020-Days-6-10/post.txt"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/main.css"><link type="application/atom+xml" rel="alternate" href="http://localhost:4000/feed.xml" title="Dave Bartram Blog" /></head>
<body><header class="site-header" role="banner">

  <div class="wrapper"><a class="site-title" rel="author" href="/">Dave Bartram Blog</a><nav class="site-nav">
        <input type="checkbox" id="nav-trigger" class="nav-trigger" />
        <label for="nav-trigger">
          <span class="menu-icon">
            <svg viewBox="0 0 18 15" width="18px" height="15px">
              <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z"/>
            </svg>
          </span>
        </label>

        <div class="trigger"><a class="page-link" href="/about/">About</a><a class="page-link" href="/blog/2021/08-20-Vancian-Spellcasting-in-Tabletop-RPGs/post.txt">Vancian Spellcasting In Tabletop Rpgs</a><a class="page-link" href="/blog/2021/01-04-ReInvent-2020-1--AWS-Systems-Manager/post.txt">Reinvent 2020 Part 1 Aws Systems Manager</a><a class="page-link" href="/blog/2021/06-03-Reflections-on-the-AWS-Solutions-Architect-Associate-certification-(2021)/post.txt">Reflections On The Aws Solutions Architect Associate Certification 2021</a><a class="page-link" href="/blog/2021/03-22-RPG-Review-Worlds-Without-Number/post.txt">Rpg Review Worlds Without Number</a><a class="page-link" href="/blog/2021/08-12-AWS-Cloudformation-Example-Part-2--Deploy-and-Test-a-REST-API-+-Lambda-Function/post.txt">Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function</a><a class="page-link" href="/blog/2021/01-08-Advent-of-Code-2020-Days-1-5/post.txt">Advent Of Code 2020 Days 1-5</a><a class="page-link" href="/blog/2021/07-08-Doubting-Tau--a-question-of-%CF%80/post.txt">Doubting Tau A Question Of %Cf%80</a><a class="page-link" href="/blog/2021/04-29-Configuring-the-nginx-proxy-in-an-Elastic-Beanstalk-Linux-environment/post.txt">Configuring The Nginx Proxy In An Elastic Beanstalk Linux Environment</a><a class="page-link" href="/blog/2021/01-12-ReInvent-2020-2-%E2%80%93-Amazon-CodeGuru/post.txt">Reinvent 2020 2 Amazon Codeguru</a><a class="page-link" href="/blog/2021/08-02-AWS-Cloudformation-Example-Part-1--SAM-Template-for-REST-API-+-Lambda-Function/post.txt">Aws Cloudformation Example Part 1 Sam Template For Rest Api Lambda Function</a><a class="page-link" href="/blog/2021/01-22-ReInvent-2020-3-%E2%80%93-Container-Insights/post.txt">Reinvent 2020 3 Container Insights</a><a class="page-link" href="/blog/2021/09-02-Understanding-a-Python-38-Quine/post.txt">Understanding A Python 3 8 Quine</a><a class="page-link" href="/blog/2021/02-02-Advent-of-Code-2020-Days-11-15/post.txt">Advent Of Code 2020 Days 11-15</a><a class="page-link" href="/blog/2021/10-05-SQL-Server-Queries--Task-Duration-and-Inserting-Defaults/post.txt">Sql Server Queries Task Duration Inserting Defaults</a><a class="page-link" href="/blog/2021/10-26-RPG-Review-Stars-Without-Number-Revised-Edition/post.txt">Rpg Review Stars Without Number Revised Edition</a><a class="page-link" href="/blog/2021/02-22-Adding-Date-Related-Features-to-a-Pandas-Dataframe/post.txt">Adding Date Related Features To A Pandas Dataframe</a><a class="page-link" href="/blog/2021/03-08-Advent-of-Code-2020-Days-16-20/post.txt">Advent Of Code 2020 Days 16-20</a><a class="page-link" href="/blog/2021/12-17-Advent-of-Code-2021-Days-1-5/post.txt">Advent Of Code 2021 Days 1-5</a><a class="page-link" href="/blog/2021/07-15-Python-API-Request-with-Error-Handling-England-and-Wales-Bank-Holidays/post.txt">Python Api Request With Error Handling England Wales Bank Holidays</a><a class="page-link" href="/blog/2021/04-13-How-to-solve-SSL-Error-unable-to-get-local-issuer-certificate-for-Python-on-Windows/post.txt">How To Solve Ssl Error Unable To Get Local Issuer Certificate For Python On Windows</a><a class="page-link" href="/blog/2021/04-06-Advent-of-Code-2020-Days-21-25/post.txt">Advent Of Code 2020 Days 21-25</a><a class="page-link" href="/blog/2021/01-14-Advent-of-Code-2020-Days-6-10/post.txt">Advent Of Code 2020 Days 6-10</a><a class="page-link" href="/blog/2022/01-05-Advent-of-Code-2021-Days-6-10/post.txt">Advent Of Code 2021 Days 6-10</a><a class="page-link" href="/blog/2022/03-01-Advent-of-Code-2021-Days-11-15/post.txt">Advent Of Code 2021 Days 11-15</a><a class="page-link" href="/blog/2022/03-21-Advent-of-Code-2021-Days-16-20/post.txt">Advent Of Code 2021 Days 16-20</a><a class="page-link" href="/blog/2022/04-17-Advent-of-Code-2021--Days-21-25/post.txt">Advent Of Code 2021 Days 21-25</a><a class="page-link" href="/blog/2020/12-23-Bash-Scripting-2--Command-Substitution/post.txt">Bash Scripting 2 Command Substitution</a><a class="page-link" href="/blog/2020/12-18-The-Wizard-is-on-Mute-Roleplaying-During-the-Pandemic/post.txt">Roleplaying During The Pandemic</a><a class="page-link" href="/blog/2020/11-13-Bash-Scripting-1--the-whole-shebang/post.txt">Bash Scripting 1 The Whole Shebang</a><a class="page-link" href="/blog/2020/11-17-Great-content-from-Stand-up-Maths-Benfords-Law-Dodgy-Scatter-Graphs-and-the-2020-US-Election/post.txt">Great Content From Stand Up Maths Benfords Law Dodgy Scatter Graphs And The 2020 Us Election</a></div>
      </nav></div>
</header>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">Advent Of Code 2020 Days 6-10</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="2021-01-14T13:45:39+00:00" itemprop="datePublished">Jan 14, 2021
      </time></p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    # Advent of Code 2020 Days 6-10

![advent architecture blur business](/images/pexels-photo-195030.jpeg)

Continuing my series of posts as I work through [Advent of Code 2020](http://adventofcode.com/2020/) at my own pace. Here are some of my thoughts and solutions.

These posts will be quite brief, just a few thoughts on each puzzle and the Python 3 code I used to solve it. All code on Github [here](https://git.io/JmAvJ). The code below is for Part 2 of each day, which often incorporates Part 1 in some way.

Day 6 - [Custom Customs](https://adventofcode.com/2020/day/6)
-------------------------------------------------------------

### Thoughts

Stripped of context, the input is a text file with groups of lines separated by blank lines. In each group, you need to find how many characters appear in _every_ line of the group. I did this by first putting all the characters in the group into a set, and then taking the intersection with the set of characters on each line.

### Python Code
```python
import sys

with open(sys.argv[1]) as file:
    groups = file.read().split('\n\n')

output = []

for group in groups:
    x = set(group)
    for line in group.split('\n'):
        x = x.intersection(set(line))
    
    output.append(len(x))
        
print(sum(output))
```

Day 7 - [Handy Haversacks](https://adventofcode.com/2020/day/7)
---------------------------------------------------------------

### Thoughts

The goal here was to process a set of rules similar to the below (but much longer), and find out how many bags in total are contained in a shiny gold bag.

shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.
dark olive bags contain 3 faded blue bags, 4 dotted black bags.
vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.
faded blue bags contain no other bags.
dotted black bags contain no other bags.

My solution below is...fairly unpleasant, to say the least. It's a naïve recursion approach. It's not fast, it's not pretty. The recursion in lines 18-20 below was the first way I found which worked, though it's a truly nasty bit of code which I'm sure is calling the function more times than is necessary.

If you want to see a better solution, take a look at [this solution by sophiebits](https://github.com/sophiebits/adventofcode/blob/main/2020/day07.py) which, much more sensibly, starts by processing the rules into two dictionaries - one where you can look up what bags _are contained_ in a given bag, and one where you can look up what bags _contain_ a given bag.

### Python Code
```python
import sys
import re


with open(sys.argv[1]) as file:
    rules = [line.rstrip('\n') for line in file]

count = 0

def bagcount(colour):
    nextcolour = ''
    global count
    for rule in rules:
        if rule.startswith(colour):
            for x in re.findall(r'\d+ \w+ \w+',rule):
                num = int(x.split()[0])
                nextcolour = ' '.join(x.split()[1:3])
                for i in range(num):
                        count += 1
                        bagcount(nextcolour)
            
            

bagcount('shiny gold')

print(count)
```

Day 8 - [Handheld Halting](https://adventofcode.com/2020/day/8)
---------------------------------------------------------------

### Thoughts

Here we have a simple version of a halting problem.

*   The function `run` below will execute a program as defined in the puzzle.
    *   The program **terminates** if it attempts to execute an instruction immediately after the last instruction in the program, handled on lines 13-15. In this case `run` will return `terminates: True` as part of its output.
    *   The program **enters an infinite loop** if it visits an instruction for the second time. Rather than execute the infinite loop, the `run` function actually terminates as soon as this happens. In this case `run` will return `terminates: False` as part of its output.
*   The function `findswap` is where the puzzle is actually solved - this involves searching the given program for a line where exchanging the `nop` and `jmp` commands would make the code terminate properly.

### Python Code
```python
def run(code):
    
    visited = set()

    i=0
    acc = 0

    terminates = False

    while i not in visited:
        visited.add(i)

        if i == len(code):
            terminates = True
            break
        
        else:
            op,arg = code[i].split()
            arg = int(arg)

            if op == "nop":
                i += 1
            elif op == "acc":
                acc += arg
                i += 1
            elif op == "jmp":
                i += arg

    return {'lastline': i, 'acc': acc, 'terminates': terminates }


def findswap(filename):

    with open(filename) as file:
        code = [line.rstrip('\n') for line in file]

    for i in range(0,len(code)):
        
        code2 = code[:]
        
        
        if code2[i].startswith("nop"):
            code2[i] = code2[i].replace("nop", "jmp")
            

        if code2[i].startswith("jmp"):
            code2[i] = code2[i].replace("jmp", "nop")
            

        result = run(code2)
        terminates = result["terminates"]

        if terminates == True:
            acc = result["acc"]
            print("Swapping line", i, "makes the code terminate with acc =", acc)
            break
    

findswap("bootcode.txt")
```
Day 9 - [Encoding Error](https://adventofcode.com/2020/day/9)
-------------------------------------------------------------

### Thoughts

Dealing with sublists. The input is a list of integer values. In part 1 we're looking for the first value which equals the sum of two distinct elements from the previous 25 values. In part 2 we're seeking a consecutive sublist of any length which sums to the answer to part 1.

The solution below doesn't look particularly "Pythonic" - there's a whole lot of indexing going on.

### Python Code
```python
import sys

with open(sys.argv[1]) as file:
    l = [int(line) for line in file]


#Part 1 
k=25

# Set up a list of tuples, the first element of each tuple is a value from the list,
# the second element is the set of the k previous values
m = [(l[i+k], set(l[i:i+k])) for i in range(len(l)-k)]

#for each tuple, determine if the second element (the set) contains two values which sum to the first element (the value)
for (x,y) in m:
    haspair=False
    for val in y:
        goal = x - val
        if goal in y:
          haspair=True
          
    if haspair==False:
        s = x
        break

print(s)

#Part 2
#Find a sublist of any length which sums to the answer from Part 1

def findsub():
    for k in range(2,len(l)):
        sublists = [l[i:i+k] for i in range(len(l)-k+1)]
        for x in sublists:
            if sum(x) == s:
                return min(x)+max(x)

print(findsub())
```

Day 10 - [Adapter Array](https://adventofcode.com/2020/day/10)
--------------------------------------------------------------

### Thoughts

This was _extremely satisfying_ to write.

The puzzle is a classic [Dynamic Programming](https://skerritt.blog/dynamic-programming/) problem. Given a power outlet of 0 "jolts" and a set of adapters with various distinct integer "joltage" ratings, how many ways are there to connect the outlet to your highest-rated adapter? Any adapter can be plugged into another one as long as the next adapter is rated 1-3 "jolts" higher than the previous one.

A simple recursive algorithm will work, but in order to make it more efficient in time I've used [memoization](https://chialunwu.medium.com/wtf-is-memoization-a2979594fb2a). This is a fancy word for caching the results of your function calls so you don't have to make the same function call twice. The dictionary `memo` stores all previously made function calls, to avoid needless repetition of the recursive function `cost`.

The answer for my puzzle input was that there were 97 trillion ways to plug in the adapters, and on my machine the code below runs in about 5 milliseconds. What if I removed the memoization? Well . . . [some redditors](https://www.reddit.com/r/adventofcode/comments/kasqdq/2020_day_10_part_2_i_calculated_how_long_it_would/) have estimated it as taking somewhere between a few hours and a month depending on implementation.

### Python Code
```python
import sys


with open(sys.argv[1]) as file:
    ratings = [int(line) for line in file]

memo = {}

def cost(x):

    if x in memo:
        return memo[x]
    
    ways = 0

    if x == max(ratings):
        ways = 1
    if x+1 in ratings:
        ways += cost(x+1)
    if x+2 in ratings:
        ways += cost(x+2)
    if x+3 in ratings:
        ways += cost(x+3)

    memo[x] = ways
    return ways
    

print(cost(0))
```
  </div><a class="u-url" href="/blog/2021/01-14-Advent-of-Code-2020-Days-6-10/post.txt" hidden></a>
</article>

      </div>
    </main><footer class="site-footer h-card">
  <data class="u-url" href="/"></data>

  <div class="wrapper">

    <h2 class="footer-heading">Dave Bartram Blog</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <li class="p-name">Dave Bartram Blog</li><li><a class="u-email" href="mailto:david.bartram@gmail.com">david.bartram@gmail.com</a></li></ul>
      </div>

      <div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/davidbartram"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">davidbartram</span></a></li></ul>
</div>

      <div class="footer-col footer-col-3">
        <p>Lessons I&#39;m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science</p>
      </div>
    </div>

  </div>

</footer>
</body>

</html>
