<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-04T16:37:27+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dave Bartram Blog</title><subtitle>Lessons I&apos;m learning as a: Software platform engineer, Tabletop roleplayer, Lifelong lover of maths &amp; science</subtitle><entry><title type="html">Advent Of Code 2021 Days 21-25</title><link href="http://localhost:4000/2022/04/17/advent-of-code-2021-days-21-25.html" rel="alternate" type="text/html" title="Advent Of Code 2021 Days 21-25" /><published>2022-04-17T14:45:39+01:00</published><updated>2022-04-17T14:45:39+01:00</updated><id>http://localhost:4000/2022/04/17/advent-of-code-2021-days-21-25</id><content type="html" xml:base="http://localhost:4000/2022/04/17/advent-of-code-2021-days-21-25.html"><![CDATA[<h1 id="advent-of-code-2021---days-21-25">Advent of Code 2021 - Days 21-25</h1>

<p><img src="/images/pexels-photo-6211095.jpeg" alt="christmas tree decorated with baubles and garland" /></p>

<p>Welcome to the final instalment of my series on Advent of Code 2021! Christmas is but a faded memory now, indeed it is literally Easter Sunday 2022 as I type. But I’m still here to spread one last dose of festive Python joy. All code on Github <a href="https://git.io/JmAvJ">here</a>. The code below is for Part 2 of each day, which often incorporates Part 1 in some way.</p>

<p>I hope you’ve enjoyed joining me on this journey through AoC 2021, I’ve learned a lot, I hope you’ve picked up one or two things as well. Merry Christmas and Happy Easter to all!</p>

<h2 id="day-21---dirac-dice">Day 21 - <a href="https://adventofcode.com/2021/day/16">Dirac Dice</a></h2>

<h3 id="thoughts">Thoughts</h3>

<p>As a former student of quantum mechanics, the name and concept of this puzzle appealed to me. Paul Dirac was one of the founding physicists in quantum mechanics, inventing many of the concepts and notations still used in quantum physics (and quantum computing) today.</p>

<p>As far as Part 2 of the puzzle is concerned, a Dirac die is a 3-sided die with sides labelled 1, 2 and 3.</p>

<p>We take our Dirac die and play a game against the computer of Santa’s submarine. The game consists of a circular track of ten spaces labelled 1 through 10 clockwise. The starting position of each player is given by the puzzle input, and each player starts with a score of 0.</p>

<p>To take a turn, roll the Dirac die three times and add up the results. Move that many spaces clockwise on the circular path. Add the number of the space you land on to your score. If your score is 21 or better, you have won! Otherwise, your opponent takes a turn.</p>

<p>Unfortunately, Dirac dice are imbued with powers inspired by the Many Worlds interpretation of quantum mechanics. Every time you roll a Dirac die, the universe splits into three worlds, one where the die rolled each possible outcome. In taking a single turn, a player rolls the Dirac die three times, creating 27 universes!</p>

<p>“All” we have to do is determine whether Player 1 or Player 2 wins in more universes, and the puzzle answer is the number of universes in which that player wins. What could be simpler?</p>

<h4 id="dice-result-frequencies">Dice Result Frequencies</h4>

<p>The first thing I wanted to do was count a few universes at a time. When three Dirac dice are thrown and added up, there are 27 possible universes. But many of those universes share the same value for the sum of the dice, and are thus indistinguishable in terms of the game rules.</p>

<p>There’s only 1 universe in which you roll a 3. You must have rolled {1,1,1}.</p>

<p>There are 3 universes in which you get a total of 4, depending on which die rolls a 2. You might roll {2,1,1}, {1,2,1} or {1,1,2}.</p>

<p>And so on. My code calculates these values directly to produce a dictionary from total score to number of universes called <code class="language-plaintext highlighter-rouge">dice_freq</code>, but this doesn’t depend on the input and will always be as follows:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="mi">3</span><span class="err">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
</span><span class="mi">4</span><span class="err">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
</span><span class="mi">5</span><span class="err">:</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w">
</span><span class="mi">6</span><span class="err">:</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w">
</span><span class="mi">7</span><span class="err">:</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w">
</span><span class="mi">8</span><span class="err">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
</span><span class="mi">9</span><span class="err">:</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h4 id="recursive-function-for-playing-dirac-dice">Recursive Function for Playing Dirac Dice</h4>

<p>Before a turn is taken, the game state can be defined by 5 parameters. The position and score for each player, and whose turn is next. The game of Dirac dice has no “memory”. If the game state is the same, it doesn’t matter if it is reached on turn 2 or turn 200.</p>

<p>To play Dirac dice recursively, the solution below does the following via a function <code class="language-plaintext highlighter-rouge">play_dirac_dice</code>:</p>

<ul>
  <li>Check if either player won at the end of the last turn. I count victory for player 1 with a weight of 1, and victory for player 2 with a weight of 0.</li>
  <li>If the game is not over, we need to deal with subgames - all the further turns that happen in various universes branching off the current state.</li>
  <li>Track the total number of victories for player 1 in a variable called <code class="language-plaintext highlighter-rouge">subgame_total</code>, which is initialised at 0.</li>
  <li>Iterate over all the possible scores on the dice (the keys of <code class="language-plaintext highlighter-rouge">dice_freq</code>).
    <ul>
      <li>Increase <code class="language-plaintext highlighter-rouge">subgame_total</code> by the frequency of that score (<code class="language-plaintext highlighter-rouge">dice_freq[score]</code>) multiplied by the output of <code class="language-plaintext highlighter-rouge">play_dirac_dice</code>, passing in the state of the game as it would be if that score had just been rolled by the active player.</li>
    </ul>
  </li>
  <li>Recursive function calls will continue until either player 1 wins (returning 1 back up the chain of recursion) or player 0 wins (returning 0).</li>
  <li><code class="language-plaintext highlighter-rouge">subgame_total</code> will thus accumulate the total number of universes in which player 1 is victorious, given the starting state passed in to <code class="language-plaintext highlighter-rouge">play_dirac_dice</code> at the beginning.</li>
  <li>Return <code class="language-plaintext highlighter-rouge">subgame_total</code>.</li>
</ul>

<p>This function calculates the number of universes in which player 1 wins. We also need to calculate the number of universes in which player 2 wins, which is achieved by passing a different initial game state to the function. In essence, to find out when player 2 wins, initialise the game state such that player 1 and player 2 have swapped labels. Their initial position swaps, and the first turn goes to the newly-labelled “player 2”, who was originally player 1.</p>

<h4 id="caching">Caching</h4>

<p>The numbers of universes involved here are combinatorically huge - there are around a quadrillion possible universes in total, give or take.</p>

<p>Yes, we’ve added slight efficiency by calculating the frequency of different dice results in advance, but we haven’t made serious strides in cutting down the universe count. This kind of recursion could easily take an unholy amount to time to run.</p>

<p>The key thing to realise here, is that while the number of possible universes is vast, the number of possible game states is relatively small. Each player can be in one of 10 positions on the board, have a score from 0 to 30 (a score of 30 happens if your score is 20, just below the threshold to win, then you land on a 10 and win). The next player to take a turn is either player 1 or player 2.</p>

<p>The number of possible game states is 10 x 10 x 31 x 31 x 2 = 192,200. And not all of those states are necessarily accessible from a given starting state.</p>

<p>As a result, we can see that we will be calling <code class="language-plaintext highlighter-rouge">play_dirac_dice</code> many times with the same input. This is exactly what caching was made for. Every time we call <code class="language-plaintext highlighter-rouge">play_dirac_dice</code> with an input we’ve seen before, we should return the previous output rather than running the function again.</p>

<p>You can implement this caching (or “memoization”) yourself with a dictionary from input to output, but in this case I used the built-in Python LRU cache decorator.</p>

<h3 id="python-code">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span><span class="p">,</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">product</span>
<span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>
<span class="kn">import</span> <span class="nn">sys</span>


<span class="c1">#calculate the frequency of each possible sum of 3 rolls of a 3-sided die with sides labelled 1, 2 and 3
</span><span class="n">dice_results</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">product</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span><span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>

<span class="n">dice_results</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">dice_results</span><span class="p">]</span>

<span class="n">dice_freq</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">Counter</span><span class="p">(</span><span class="n">dice_results</span><span class="p">))</span>

<span class="o">@</span><span class="n">lru_cache</span><span class="p">(</span><span class="n">maxsize</span><span class="o">=</span><span class="mi">200000</span><span class="p">)</span> <span class="c1">#caching
</span><span class="k">def</span> <span class="nf">play_dirac_dice</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span> <span class="n">score1</span><span class="p">,</span> <span class="n">pos2</span><span class="p">,</span> <span class="n">score2</span><span class="p">,</span> <span class="n">whoseTurn</span><span class="p">):</span>
    <span class="c1">#given the position and score of each player, and a marker for whose turn is next
</span>    <span class="c1">#return the number of universes arising from this game state in which player 1 wins
</span>
    <span class="c1">#print(pos1, score1, pos2, score2, whoseTurn)
</span>
    <span class="k">if</span> <span class="n">score1</span><span class="o">&gt;=</span><span class="mi">21</span><span class="p">:</span> <span class="c1">#player 1 wins
</span>        <span class="k">return</span> <span class="mi">1</span>
    
    <span class="k">elif</span> <span class="n">score2</span><span class="o">&gt;=</span><span class="mi">21</span><span class="p">:</span> <span class="c1">#player 2 wins
</span>        <span class="k">return</span> <span class="mi">0</span>
    
    <span class="n">subgame_total</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">if</span> <span class="n">whoseTurn</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c1">#player 1 takes a turn next
</span>        <span class="k">for</span> <span class="n">dice</span> <span class="ow">in</span> <span class="n">dice_freq</span><span class="p">:</span>
            <span class="n">newpos</span> <span class="o">=</span> <span class="p">(</span><span class="n">pos1</span><span class="o">+</span><span class="n">dice</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">#update player 1's position
</span>
            <span class="c1">#recursively call the function for the updated game state
</span>            <span class="c1">#multiply by dice_freq[dice] because each total on the dice has a different frequency
</span>            <span class="c1">#e.g. there are 3 universes in which dice==3 but 7 universes in which dice==6
</span>            <span class="n">subgame_total</span> <span class="o">+=</span> <span class="n">dice_freq</span><span class="p">[</span><span class="n">dice</span><span class="p">]</span><span class="o">*</span><span class="n">play_dirac_dice</span><span class="p">(</span><span class="n">newpos</span><span class="p">,</span><span class="n">score1</span><span class="o">+</span><span class="n">newpos</span><span class="p">,</span><span class="n">pos2</span><span class="p">,</span><span class="n">score2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span> <span class="c1">#player 2 takes a turn next
</span>        <span class="k">for</span> <span class="n">dice</span> <span class="ow">in</span> <span class="n">dice_freq</span><span class="p">:</span>
            <span class="n">newpos</span> <span class="o">=</span> <span class="p">(</span><span class="n">pos2</span><span class="o">+</span><span class="n">dice</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">#update player 1's position
</span>
            <span class="c1">#as above, recursively call the function for the updated game state
</span>            <span class="n">subgame_total</span> <span class="o">+=</span> <span class="n">dice_freq</span><span class="p">[</span><span class="n">dice</span><span class="p">]</span><span class="o">*</span><span class="n">play_dirac_dice</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span><span class="n">score1</span><span class="p">,</span><span class="n">newpos</span><span class="p">,</span><span class="n">score2</span><span class="o">+</span><span class="n">newpos</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">subgame_total</span>

<span class="c1">#starting positions hard-coded from the input
</span><span class="n">start1</span> <span class="o">=</span> <span class="mi">7</span> 
<span class="n">start2</span> <span class="o">=</span> <span class="mi">5</span> 

<span class="n">wins</span> <span class="o">=</span> <span class="p">(</span><span class="n">play_dirac_dice</span><span class="p">(</span><span class="n">start1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">start2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="n">play_dirac_dice</span><span class="p">(</span><span class="n">start2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">start1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">wins</span><span class="p">))</span>
</code></pre></div></div>
<p>Day 22 - <a href="https://adventofcode.com/2021/day/22">Reactor Reboot</a>
—————————————————————</p>

<h3 id="thoughts-1">Thoughts</h3>

<p>After a lot of initial frustration, this problem really caught my imagination and I solved it a few slightly different ways. I’m going to describe the method that I implemented last. It’s probably the best…or at least the one I remember most clearly…</p>

<h4 id="the-problem">The problem</h4>

<p>Consider a 3D grid made up of cubes. Each cube sits at an integer 3D coordinate <code class="language-plaintext highlighter-rouge">(x,y,z)</code>. A cube can either be <strong>on</strong> or <strong>off</strong>. Initially, every cube in the grid is off.</p>

<p>The goal is to apply a set of instructions to this grid.</p>

<p>Each instruction consists of a <strong>cuboid</strong>, and the instruction to set the state of all the cubes inside that cuboid to either <strong>on</strong> or <strong>off</strong>. Each cuboid is defined by contiguous intervals of each coordinate. The end points of the intervals are all integers, and they are inclusive. So for example a cuboid might include all cubes whose coordinates <code class="language-plaintext highlighter-rouge">(x,y,z)</code> satisfy <code class="language-plaintext highlighter-rouge">-5 &lt;= x &lt;= 10, 300 &lt;= y &lt;= 350</code> and <code class="language-plaintext highlighter-rouge">45 &lt;= z &lt;= 51</code></p>

<p>In my solution, each cuboid is defined by three <strong>closed interval</strong> objects from the <a href="https://github.com/kvesteri/intervals">intervals</a> library.</p>

<p>The goal is to execute approximately 400 of these instructions, some with coordinate boundaries in the tens of thousands. A method based on tracking the state of individual cubes is doomed to failure by the scale of the problem.</p>

<h4 id="approach">Approach</h4>

<p>First let’s decide how to represent the instructions we want to apply.</p>

<p>Each element in the list <code class="language-plaintext highlighter-rouge">instructions</code> is a tuple <code class="language-plaintext highlighter-rouge">(op, (ix, iy, iz))</code> where op is the operation (either ‘on’ or ‘off’), and the other element is a <code class="language-plaintext highlighter-rouge">cuboid</code> object, a tuple of <a href="https://github.com/kvesteri/intervals">interval</a> objects defining a cuboid.</p>

<p>The key concept in applying these instructions, is that whenever a new cuboid is switched either on or off, we have to tread carefully if the new cuboid <em>overlaps</em> with any previous cuboids.</p>

<p>We begin with all the cubes in the off state. Let’s say we apply an <strong>on</strong> cuboid, called Cuboid A. Now we have a nice neat cuboid of <strong>on</strong> cubes. The number of cubes switched on is just the volume of Cuboid A.</p>

<p>If we apply a second <strong>on</strong> cuboid, what’s the number of cubes switched on? We could try adding the volume of Cuboid A to Cuboid B - and that’s the right answer if the cuboids don’t overlap. If they do overlap, we’ll count some of the cubes twice. To correct that, we can add the volume of cuboid A to the volume of cuboid B, and subtract the volume of the intersection.</p>

<p>This is an application of the <a href="https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle">inclusion-exclusion principle</a>, which in its guise as the “addition rule” is popular with probability students everywhere.</p>

<p>To handle this, my solution includes a defaultdict <code class="language-plaintext highlighter-rouge">cuboids</code> from cuboids to signs. The sign of a cuboid is either 1, -1 or 0. 0 is the default value. When we calculate the total number of on cuboids at the end of the solution, we will simply sum the volume of each cuboid multiplied by its sign.</p>

<p>The key is keeping the sign correct. For the case of two intersecting <strong>‘on’</strong> cuboids, this is simple. The two cuboids should have sign +1, and their cuboid of intersection should have sign -1.</p>

<p>Note that at this point we would have applied only <em>two</em> instructions but our <code class="language-plaintext highlighter-rouge">cuboids</code> dictionary will contain <em>three</em> cuboids and their respective signs. As more instructions are applied, <code class="language-plaintext highlighter-rouge">cuboids</code> will contain original cuboids from the instruction list, cuboids of intersection between them, cuboids of intersection between cuboids of intersection and new cuboids, and so on. It’s dizzying to imagine but the mathematics will bestow upon every cuboid its proper sign, and keep them all in place. Since <code class="language-plaintext highlighter-rouge">cuboids</code> is a dictionary, it will also keep track only of unique cuboids. From time to time a new cuboid, or cuboid of intersection, will exactly overlap with a previous one. Again, we trust to mathematics to correctly handle this, my visualisation skills are not up to the task of imagining the process!</p>

<h4 id="applying-a-single-instruction">Applying a Single Instruction</h4>

<p>So how does this mathematics work? How do we apply an arbitrary instruction?</p>

<p>Let’s call it instruction X, consisting of operation X (either ‘off’ or ‘on’) and cuboid X.</p>

<p>First, create a copy of the current cuboids dictionary and call it <code class="language-plaintext highlighter-rouge">new</code>.</p>

<p>If operation X is ‘on’, we need to add cuboid x to the <code class="language-plaintext highlighter-rouge">new</code> dictionary as a key with a value of 1. This is intuitive, we ultimately want to count the total number of ‘on’ cubes, so we want to count this cuboid as a positive.</p>

<p>If operation X is ‘off’, we do not add it to the <code class="language-plaintext highlighter-rouge">new</code> dictionary at all. We’re not counting the ‘off’ cuboids, so we don’t need this. We definitely care if cuboid X is ‘off’ and overlaps with an ‘on’ cuboid, turning some previously ‘on’ cubes to the ‘off’ state, but that’s handled below. For now, do nothing.</p>

<p>Regardless of operation X, we now iterate over the current <code class="language-plaintext highlighter-rouge">cuboids</code> dictionary (not the <code class="language-plaintext highlighter-rouge">new</code> dictionary).</p>

<p>We calculate the cuboid of intersection between each cuboid in the dictionary, and cuboid X, our brand new cuboid. If the cuboid of intersection exists, we add it to <code class="language-plaintext highlighter-rouge">new</code> with the appropriate sign, based on its current sign in the new dictionary and the sign of its ‘parent’ cuboid (the cuboid that was intersected with cuboid X to produce it).</p>

<p>“The appropriate sign” is the part of the procedure that is frankly magical.</p>

<p><strong>The sign of the cuboid of intersection (if it exists), is equal to its current value in the <code class="language-plaintext highlighter-rouge">new</code> dictionary, minus the value of its ‘parent’ cuboid in the <code class="language-plaintext highlighter-rouge">cuboids</code> dictionary.</strong></p>

<p>Once we have followed this procedure for every cuboid in <code class="language-plaintext highlighter-rouge">cuboids</code>, we return <code class="language-plaintext highlighter-rouge">new</code>. This has successfully applied the instruction.</p>

<h4 id="wait-what">Wait, what???</h4>

<p>That’s it. No handling of edge cases is required. You might be worried that the new cuboid could be a duplicate of a previous cuboid - that’s fine. Or that some of these many, many cuboids of intersection will also be duplicates of each other, or duplicates of previous cuboids - that’s also fine. As long as each unique cuboid is in the dictionary with a correct sign, I don’t care where it came from. And the procedure above keeps the signs correct regardless of the scenario.</p>

<p><strong>The sign of the cuboid of intersection (if it exists), is equal to its current value in the <code class="language-plaintext highlighter-rouge">new</code> dictionary, minus the value of its ‘parent’ cuboid in the <code class="language-plaintext highlighter-rouge">cuboids</code> dictionary.</strong></p>

<p>Let’s consider the simple case of two ‘on’ instructions, A and B. Assume that cuboid A intersects with cuboid B, but they are not identical.</p>

<p>Both <code class="language-plaintext highlighter-rouge">cuboids</code> and <code class="language-plaintext highlighter-rouge">new</code> are empty, but remember these are defaultdicts, and will return 0 if the value for any key is requested.</p>

<h5 id="instruction-a-an-on-cuboid">Instruction A (an ‘on’ cuboid)</h5>

<p>To apply instruction A, we add cuboid A to the new dictionary with value 1. We then iterate over <code class="language-plaintext highlighter-rouge">cuboids</code>, which is empty, so we do nothing. Then we return <code class="language-plaintext highlighter-rouge">new</code>, and set <code class="language-plaintext highlighter-rouge">cuboids = new</code>.</p>

<p>At this point, <code class="language-plaintext highlighter-rouge">cuboids == { cuboid A : 1}</code>.</p>

<p>If we calculated the volume of ‘on’ cuboids now, we would just get the volume of cuboid A. Quite right.</p>

<h5 id="instruction-b-another-on-cuboid">Instruction B (another ‘on’ cuboid)</h5>

<p>Now apply instruction B. Make a copy of <code class="language-plaintext highlighter-rouge">cuboids</code> and call it <code class="language-plaintext highlighter-rouge">new</code>. Since instruction B is also an ‘on’ instruction, we will add cuboid B to <code class="language-plaintext highlighter-rouge">new</code> with a value of 1.</p>

<p>Now iterate over cuboids, which currently only contains cuboid A. We calculate the intersection between cuboids A and B, and give it a sign. The sign should be its current value in the new dictionary (which is 0, because this cuboid hasn’t been put into new yet), minus the value of cuboid A in the cuboids dictionary (which is 1).</p>

<p>Therefore, the cuboid of intersection is added to new with the sign 0 - 1 = -1.</p>

<p>Then we return <code class="language-plaintext highlighter-rouge">new</code>, and set <code class="language-plaintext highlighter-rouge">cuboids = new</code>.</p>

<p>At this point, <code class="language-plaintext highlighter-rouge">cuboids == { cuboid A : 1, cuboid B : 1, intersection(A,B)</code> : -1<code class="language-plaintext highlighter-rouge">}</code> If we calculated the number of ‘on’ cubes now, we would simply be applying the inclusion-exclusion principle, which would surely give the correct result!</p>

<h5 id="instruction-c-an-off-cuboid">Instruction C (an ‘off’ cuboid)</h5>

<p>Now let’s apply instruction C, which is an ‘off’ cuboid. Let’s assume it overlaps with cuboid A, cuboid B and cuboid C but is not identical to any of them.</p>

<p>Make a copy of <code class="language-plaintext highlighter-rouge">cuboids</code> and call it <code class="language-plaintext highlighter-rouge">new</code>. We don’t need to add cuboid C to new, as it is an ‘off’ cuboid.</p>

<p>Iterate over <code class="language-plaintext highlighter-rouge">cuboids</code>, which contains cuboid A, cuboid B and intersection(A,B).</p>

<p>cuboid A will produce intersection(A,C) with sign 0 - 1 = -1.</p>

<p>cuboid B will produce intersection(B,C) with sign 0 - 1 = -1.</p>

<p>intersection(A,B) will produce intersection(A,B,C) with sign 0 - (-1) = 1.</p>

<p>Then we return <code class="language-plaintext highlighter-rouge">new</code>, and set <code class="language-plaintext highlighter-rouge">cuboids = new</code>.</p>

<p>At this point, <code class="language-plaintext highlighter-rouge">cuboids == { cuboid A : 1, cuboid B : 1, intersection(A,B)</code> : -1, intersection(A,C) : -1, <code class="language-plaintext highlighter-rouge">intersection(B,C)</code> : -1, <code class="language-plaintext highlighter-rouge">intersection(A,B,C)</code> : 1<code class="language-plaintext highlighter-rouge">}</code>.</p>

<p>Does this make sense? Well, yes! We add the volumes of cuboid A and cuboid B, which double counts intersection(A,B). Subtracting intersection(A,B) corrects that.</p>

<p>But then cuboid C comes along and turns off all the previously-on cubes in intersection(A,C) and intersection(B,C), so we subtract those volumes.</p>

<p>But we’ve overcounted here as well! We’ve subtracted too much, because intersection(A,C) and intersection(B,C) intersect! We’ve double counted intersection(A,B,C), but we’ve overcounted while subtracting. The appropriate correction is to <em>add</em> the volume of intersection(A,B,C) back into our total. Which, indeed, is why intersection(A,B,C) has a sign of 1.</p>

<p>This example doesn’t cover every possibility, but it hopefully illustrates how the solution correctly handles ‘on’ and ‘off’ instructions, while dealing with intersections correctly.</p>

<h3 id="python-code-1">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">intervals</span> <span class="k">as</span> <span class="n">I</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">from</span> <span class="nn">statistics</span> <span class="kn">import</span> <span class="n">median</span>

<span class="k">def</span> <span class="nf">initialise</span><span class="p">():</span>
    <span class="c1">#read the input file
</span>    <span class="c1">#output instructions, a list of tuples (op, (ix,iy,iz))
</span>    <span class="c1">#op is either 'on' or 'off', representing the operation for that instruction
</span>    <span class="c1">#ix, iy, iz are intervals defining the cuboid for that instruction
</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>

    <span class="n">instructions</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">op</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">ranges</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)[</span><span class="mi">1</span><span class="p">:])</span>
        <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">'-{0,1}\d{1,10}'</span><span class="p">,</span> <span class="n">ranges</span><span class="p">)]</span>
        <span class="n">ix</span> <span class="o">=</span> <span class="n">I</span><span class="p">.</span><span class="n">closed</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">values</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">iy</span> <span class="o">=</span> <span class="n">I</span><span class="p">.</span><span class="n">closed</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">values</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
        <span class="n">iz</span> <span class="o">=</span> <span class="n">I</span><span class="p">.</span><span class="n">closed</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="n">values</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
        <span class="n">instructions</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">op</span><span class="p">,(</span><span class="n">ix</span><span class="p">,</span><span class="n">iy</span><span class="p">,</span><span class="n">iz</span><span class="p">)))</span>

    <span class="k">return</span> <span class="n">instructions</span>

<span class="k">def</span> <span class="nf">volume</span><span class="p">(</span><span class="n">cuboid</span><span class="p">):</span>
    <span class="c1">#calculate the number of cubes contained in a cuboid
</span>    <span class="c1">#cubes on the boundary of a cuboid count as contained within that cuboid
</span>
    <span class="n">ix</span><span class="p">,</span> <span class="n">iy</span><span class="p">,</span> <span class="n">iz</span> <span class="o">=</span> <span class="n">cuboid</span>

    <span class="n">a</span> <span class="o">=</span> <span class="n">ix</span><span class="p">.</span><span class="n">upper</span> <span class="o">-</span> <span class="n">ix</span><span class="p">.</span><span class="n">lower</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">iy</span><span class="p">.</span><span class="n">upper</span> <span class="o">-</span> <span class="n">iy</span><span class="p">.</span><span class="n">lower</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">iz</span><span class="p">.</span><span class="n">upper</span> <span class="o">-</span> <span class="n">iz</span><span class="p">.</span><span class="n">lower</span> <span class="o">+</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">*</span><span class="n">c</span>


<span class="k">def</span> <span class="nf">intersect</span><span class="p">(</span><span class="n">cuboid1</span><span class="p">,</span><span class="n">cuboid2</span><span class="p">):</span>
    <span class="c1">#calculate the cuboid of intersection between two cuboids
</span>    <span class="c1">#return the cuboid of intersection, or False if the input cuboids do not intersect
</span>
    <span class="n">ix1</span><span class="p">,</span><span class="n">iy1</span><span class="p">,</span><span class="n">iz1</span> <span class="o">=</span> <span class="n">cuboid1</span>
    <span class="n">ix2</span><span class="p">,</span> <span class="n">iy2</span><span class="p">,</span> <span class="n">iz2</span> <span class="o">=</span> <span class="n">cuboid2</span>

    <span class="n">ix</span> <span class="o">=</span> <span class="n">ix1</span> <span class="o">&amp;</span> <span class="n">ix2</span> <span class="c1">#interval intersection
</span>    <span class="n">iy</span> <span class="o">=</span> <span class="n">iy1</span> <span class="o">&amp;</span> <span class="n">iy2</span>
    <span class="n">iz</span> <span class="o">=</span> <span class="n">iz1</span> <span class="o">&amp;</span> <span class="n">iz2</span>

    <span class="k">if</span> <span class="n">ix</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span> <span class="ow">or</span> <span class="n">iy</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span> <span class="ow">or</span> <span class="n">iz</span><span class="p">.</span><span class="n">is_empty</span><span class="p">():</span>
        <span class="k">return</span> <span class="bp">False</span>
    
    <span class="k">return</span> <span class="p">(</span><span class="n">ix</span><span class="p">,</span><span class="n">iy</span><span class="p">,</span><span class="n">iz</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">apply_one_instruction</span><span class="p">(</span><span class="n">cuboids</span><span class="p">,</span><span class="n">newcuboid</span><span class="p">,</span> <span class="n">onoff</span><span class="p">):</span>
    <span class="c1">#apply a single instruction
</span>
    <span class="n">new</span> <span class="o">=</span> <span class="n">cuboids</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">onoff</span> <span class="o">==</span> <span class="s">'on'</span><span class="p">:</span>
        <span class="n">new</span><span class="p">[</span><span class="n">newcuboid</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">for</span> <span class="n">cuboid</span><span class="p">,</span> <span class="n">sign</span> <span class="ow">in</span> <span class="n">cuboids</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">overlap</span> <span class="o">=</span> <span class="n">intersect</span><span class="p">(</span><span class="n">newcuboid</span><span class="p">,</span><span class="n">cuboid</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">overlap</span><span class="p">:</span>
            <span class="n">new</span><span class="p">[</span><span class="n">overlap</span><span class="p">]</span> <span class="o">-=</span> <span class="n">sign</span>

    <span class="k">return</span> <span class="n">new</span>

<span class="k">def</span> <span class="nf">apply_instructions</span><span class="p">(</span><span class="n">instructions</span><span class="p">):</span>
    <span class="c1">#apply all the instructions in the input file
</span>    <span class="c1">#return the total number of 'on' cubes after all instructions are applied
</span>    <span class="n">cuboids</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">instruction</span> <span class="ow">in</span> <span class="n">instructions</span><span class="p">:</span>
        <span class="n">onoff</span> <span class="o">=</span> <span class="n">instruction</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">newcuboid</span> <span class="o">=</span> <span class="n">instruction</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">cuboids</span> <span class="o">=</span> <span class="n">apply_one_instruction</span><span class="p">(</span><span class="n">cuboids</span><span class="p">,</span><span class="n">newcuboid</span><span class="p">,</span><span class="n">onoff</span><span class="p">)</span>
    
    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">cuboid</span><span class="p">,</span> <span class="n">sign</span> <span class="ow">in</span> <span class="n">cuboids</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">total</span> <span class="o">+=</span> <span class="n">sign</span><span class="o">*</span><span class="n">volume</span><span class="p">(</span><span class="n">cuboid</span><span class="p">)</span>


    <span class="k">return</span> <span class="n">total</span>

<span class="n">instructions</span> <span class="o">=</span> <span class="n">initialise</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">apply_instructions</span><span class="p">(</span><span class="n">instructions</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-23---amphipod">Day 23 - <a href="https://adventofcode.com/2021/day/23">Amphipod</a></h2>

<h3 id="thoughts-2">Thoughts</h3>

<p>This puzzle was complex to implement but the concept is simple. Four types of amphipod (types A, B, C and D) consist in a burrow consisting of four rooms and one hallway. Each room can hold four amphipods in single file.</p>

<p>There are four of each type of amphipod. The amphipods start disorganised (their starting arrangement is based on your individual puzzle input), and the goal is to move them so that the type A amphipods are in the leftmost room, the type B’s are one room to the right of the type A’s, and so on.</p>

<p>The amphipods can move around the burrow, obeying certain rules.</p>

<ul>
  <li>Amphipods cannot pass through each other.</li>
  <li>Moving an amphipod one space has a cost of 1 energy for a type A, 10 energy for a type B, 100 energy for a type C, and 1000 energy for a type D.</li>
  <li>Amphipods cannot stop on the space directly outside any room. They can only move into that space if they immediately continue moving.</li>
  <li>Amphipods cannot move from the hallway into a room unless that room is their destination <strong>and</strong> the room currently contains no amphipods of a different type.</li>
</ul>

<p>The goal is to find the minimum total energy cost to arrange the amphipods correctly.</p>

<h4 id="my-approach">My Approach</h4>

<p>My approach here was to use Dijkstra’s algorithm, implemented with a Python <a href="https://www.geeksforgeeks.org/priority-queue-in-python/">Priority Queue</a>.</p>

<p>Since the energy cost for the different types of amphipod are powers of 10, it is easier to think of the amphipod types as 0, 1, 2, 3 rather than A,B,C,D. Then the rooms can be labelled the same way, so that the type 0 amphipods are aiming to get into room 0, and so on. The type of an amphipod is usually denoted by the variable <code class="language-plaintext highlighter-rouge">amphi</code>.</p>

<p>The room number under consideration is denoted by the variable <code class="language-plaintext highlighter-rouge">r</code>.</p>

<p>To map out the burrow, I labelled the seven hallway positions 0 to 6 from left to right. In the code, the hallway position is denoted by the variable <code class="language-plaintext highlighter-rouge">h.</code></p>

<p>Positions inside a room are denoted by the variable <code class="language-plaintext highlighter-rouge">r_pos</code>, where <code class="language-plaintext highlighter-rouge">r_pos</code>=0 is the space next to the hallway and <code class="language-plaintext highlighter-rouge">r_pos</code> increases as you go deeper into the room, to a maximum of <code class="language-plaintext highlighter-rouge">r_pos</code>=4.</p>

<p>The dictionary <code class="language-plaintext highlighter-rouge">distance</code> from tuples <code class="language-plaintext highlighter-rouge">(h,r)</code> to integer distances is hard-coded with the number of spaces required to move from hallway position <code class="language-plaintext highlighter-rouge">h</code> to room position 0 inside room <code class="language-plaintext highlighter-rouge">r</code>.</p>

<p><code class="language-plaintext highlighter-rouge">distance[(3,1)] == 2</code> means that an amphipod needs to move two spaces to get from hallway position 3 to position 0 inside room 1.</p>

<p>A state of the game board is represented by two tuples, <code class="language-plaintext highlighter-rouge">hall</code> and <code class="language-plaintext highlighter-rouge">rooms</code>.</p>

<p>For example, my initial state looks like this:</p>

<p><code class="language-plaintext highlighter-rouge">hall = (None,None,None,None,None,None,None)</code></p>

<p><code class="language-plaintext highlighter-rouge">rooms = ((3,3,3,3),(2,2,1,2),(0,1,0,1),(1,0,2,0))</code></p>

<p>This means that all seven positions in the hallway are unoccupied. Room 0 contains four amphipods of type 3, and so on up to room 3, which contains two type 0 amphipods, a type 2 and a type 1. The type 1 amphipod in room 3 is directly adjacent to the hallway, with the other three in single file behind it.</p>

<p>Let’s say we moved the type 1 amphipod in room 3 out into hallway position 6. This is a legal move and would result in the following board state:</p>

<p><code class="language-plaintext highlighter-rouge">hall = (None,None,None,None,None,None,1)</code></p>

<p><code class="language-plaintext highlighter-rouge">rooms = ((3,3,3,3),(2,2,1,2),(0,1,0,1),(None,0,2,0))</code></p>

<p>The goal is to find the minimum energy cost to achieve the desired final state, which looks like this:</p>

<p><code class="language-plaintext highlighter-rouge">hall = (None,None,None,None,None,None,None)</code></p>

<p><code class="language-plaintext highlighter-rouge">rooms = ((0,0,0,0),(1,1,1,1),(2,2,2,2),(3,3,3,3))</code></p>

<p>The implementation below is a little finicky in the details, and not particularly fast, but it does the job!</p>

<h3 id="python-code-2">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">inf</span><span class="p">,</span> <span class="n">ceil</span>
<span class="kn">from</span> <span class="nn">queue</span> <span class="kn">import</span> <span class="n">PriorityQueue</span>
<span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span>

<span class="c1">#distance (h,r) = distance from hallway position h to front of room r or vice-versa
</span><span class="n">distance</span> <span class="o">=</span><span class="p">{</span>
    <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span><span class="mi">3</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="mi">5</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span><span class="mi">7</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span><span class="mi">9</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span><span class="mi">2</span><span class="p">,(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="mi">4</span><span class="p">,(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span><span class="mi">6</span><span class="p">,(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span><span class="mi">8</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span><span class="mi">2</span><span class="p">,(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="mi">2</span><span class="p">,(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span><span class="mi">4</span><span class="p">,(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span><span class="mi">6</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span><span class="mi">4</span><span class="p">,(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="mi">2</span><span class="p">,(</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span><span class="mi">2</span><span class="p">,(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span><span class="mi">4</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span><span class="mi">6</span><span class="p">,(</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="mi">4</span><span class="p">,(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span><span class="mi">2</span><span class="p">,(</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span><span class="mi">2</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span><span class="mi">8</span><span class="p">,(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="mi">6</span><span class="p">,(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span><span class="mi">4</span><span class="p">,(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span><span class="mi">2</span><span class="p">,</span>
    <span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">0</span><span class="p">):</span><span class="mi">9</span><span class="p">,(</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span><span class="mi">7</span><span class="p">,(</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span><span class="mi">5</span><span class="p">,(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span><span class="mi">3</span>
    <span class="p">}</span>

<span class="k">def</span> <span class="nf">move_cost</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">amphi</span><span class="p">,</span><span class="n">r_pos</span><span class="p">):</span>
    <span class="c1">#calculate the energy cost to move an amphipod
</span>    <span class="c1">#from hallway position h to room position r_pos inside room r
</span>    <span class="c1">#or vice-versa
</span>    <span class="n">cost</span> <span class="o">=</span> <span class="n">distance</span><span class="p">[</span><span class="n">h</span><span class="p">,</span><span class="n">r</span><span class="p">]</span> <span class="o">+</span> <span class="n">r_pos</span>

    <span class="n">cost</span> <span class="o">=</span> <span class="n">cost</span><span class="o">*</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="n">amphi</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">cost</span>

<span class="k">def</span> <span class="nf">hall_to_room</span><span class="p">(</span><span class="n">amphi</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">hall</span><span class="p">,</span><span class="n">rooms</span><span class="p">):</span>
    <span class="c1">#given an amphipod of type amphi in hallway position h
</span>    <span class="c1">#with the current hall and room occupations given by hall and rooms
</span>    <span class="c1">#return None if the amphipod cannot be moved to its destination room
</span>    <span class="c1">#otherwise, return (newhall, newrooms, cost) representing the new hall and room occupations
</span>    <span class="c1">#and the cost of moving that amphipod to its destination room
</span>

    <span class="n">room_index</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mf">1.5</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mf">2.5</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="mf">3.5</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="mf">4.5</span><span class="p">}</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">room_index</span><span class="p">[</span><span class="n">amphi</span><span class="p">]</span>
    <span class="n">k</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ceil</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>

    <span class="n">newhall</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">hall</span><span class="p">)</span>
    <span class="n">newrooms</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">room</span><span class="p">)</span> <span class="k">for</span> <span class="n">room</span> <span class="ow">in</span> <span class="n">rooms</span><span class="p">]</span>

    <span class="c1">#check if there are any amphipods between this amphipod and its destination room
</span>    <span class="k">if</span> <span class="n">h</span><span class="o">&lt;</span><span class="n">j</span><span class="p">:</span>
        <span class="n">intervening_hall</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span><span class="o">!=</span><span class="bp">None</span> <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">hall</span><span class="p">[</span><span class="n">h</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">k</span><span class="p">]]</span>

    <span class="k">if</span> <span class="n">h</span><span class="o">&gt;</span><span class="n">j</span><span class="p">:</span>
        <span class="n">intervening_hall</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span><span class="o">!=</span><span class="bp">None</span> <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">hall</span><span class="p">[</span><span class="n">k</span><span class="p">:</span><span class="n">h</span><span class="p">]]</span>
    
    <span class="c1">#check if there are any amphipods of the wrong type in the destination room
</span>    <span class="n">wrong_amphi</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="o">!=</span><span class="n">amphi</span> <span class="ow">and</span> <span class="n">x</span><span class="o">!=</span><span class="bp">None</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">rooms</span><span class="p">[</span><span class="n">amphi</span><span class="p">]]</span>

    <span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">intervening_hall</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">any</span><span class="p">(</span><span class="n">wrong_amphi</span><span class="p">):</span>
        <span class="c1">#if the hallway is blocked or there are any wrong-type amphipods in the room
</span>        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">intervening_hall</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">any</span><span class="p">(</span><span class="n">wrong_amphi</span><span class="p">)):</span>
        <span class="c1">#calculate the position inside the destination room that the amphipod will move to
</span>        <span class="n">r_pos</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">rooms</span><span class="p">[</span><span class="n">amphi</span><span class="p">])</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="nb">sum</span><span class="p">([</span><span class="n">x</span><span class="o">==</span><span class="n">amphi</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">rooms</span><span class="p">[</span><span class="n">amphi</span><span class="p">]])</span>
        <span class="c1">#calculate the energy cost of the move
</span>        <span class="n">cost</span> <span class="o">=</span> <span class="n">move_cost</span><span class="p">(</span><span class="n">amphi</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">amphi</span><span class="p">,</span><span class="n">r_pos</span><span class="p">)</span>
        <span class="c1">#update the state of the hallway and rooms to account for the move
</span>        <span class="n">newhall</span><span class="p">[</span><span class="n">h</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">newrooms</span><span class="p">[</span><span class="n">amphi</span><span class="p">][</span><span class="n">r_pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">amphi</span>
        <span class="n">newhall</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">newhall</span><span class="p">)</span>
        <span class="n">newrooms</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">([</span><span class="nb">tuple</span><span class="p">(</span><span class="n">newroom</span><span class="p">)</span> <span class="k">for</span> <span class="n">newroom</span> <span class="ow">in</span> <span class="n">newrooms</span><span class="p">])</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">newhall</span><span class="p">,</span> <span class="n">newrooms</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">room_to_hall</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">amphi</span><span class="p">,</span><span class="n">hall</span><span class="p">,</span><span class="n">rooms</span><span class="p">,</span> <span class="n">r_pos</span><span class="p">):</span>
    <span class="c1">#given an amphipod of type amphi in room r
</span>    <span class="c1">#with the current hall and room occupations given by hall and rooms
</span>    <span class="c1">#return None if the amphipod cannot be moved to hallway position h
</span>    <span class="c1">#otherwise, return (newhall, newrooms, cost) representing the new hall and room occupations
</span>    <span class="c1">#and the cost of moving that amphipod to hallway position h
</span>
    <span class="n">room_index</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="mf">1.5</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span><span class="mf">2.5</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="mf">3.5</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="mf">4.5</span><span class="p">}</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">room_index</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
    <span class="n">k</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ceil</span><span class="p">(</span><span class="n">j</span><span class="p">))</span>

    <span class="n">newhall</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">hall</span><span class="p">)</span>
    <span class="n">newrooms</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">room</span><span class="p">)</span> <span class="k">for</span> <span class="n">room</span> <span class="ow">in</span> <span class="n">rooms</span><span class="p">]</span>

    <span class="c1">#check if there are any amphipods in the hallway between this amphipod and hallway position h
</span>    <span class="k">if</span> <span class="n">h</span><span class="o">&lt;</span><span class="n">j</span><span class="p">:</span>
        <span class="n">intervening_hall</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span><span class="o">!=</span><span class="bp">None</span> <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">hall</span><span class="p">[</span><span class="n">h</span><span class="p">:</span><span class="n">k</span><span class="p">]]</span>

    <span class="k">if</span> <span class="n">h</span><span class="o">&gt;</span><span class="n">j</span><span class="p">:</span>
        <span class="n">intervening_hall</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span><span class="o">!=</span><span class="bp">None</span> <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">hall</span><span class="p">[</span><span class="n">k</span><span class="p">:</span><span class="n">h</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span>
    
    <span class="c1">#check if there are any amphipods in the room between this amphipod and the hallway
</span>    <span class="k">if</span> <span class="n">r_pos</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">intervening_room</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span>
    
    <span class="k">if</span> <span class="n">r_pos</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">intervening_room</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span><span class="o">!=</span><span class="bp">None</span> <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">rooms</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">0</span><span class="p">:</span><span class="n">r_pos</span><span class="p">]]</span>

    <span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">intervening_hall</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">any</span><span class="p">(</span><span class="n">intervening_room</span><span class="p">):</span>
        <span class="c1">#if there is an amphipod blocking this path
</span>        <span class="k">return</span> <span class="bp">None</span>
    
    <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">intervening_hall</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">any</span><span class="p">(</span><span class="n">intervening_room</span><span class="p">)):</span>
        <span class="c1">#calculate the cost of moving to hallway position h
</span>        <span class="n">cost</span> <span class="o">=</span> <span class="n">move_cost</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">amphi</span><span class="p">,</span><span class="n">r_pos</span><span class="p">)</span>
        <span class="c1">#update the state of the hallway and rooms to account for the move
</span>        <span class="n">newhall</span><span class="p">[</span><span class="n">h</span><span class="p">]</span> <span class="o">=</span> <span class="n">amphi</span>
        <span class="n">newrooms</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">r_pos</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">newhall</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">newhall</span><span class="p">)</span>
        <span class="n">newrooms</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">([</span><span class="nb">tuple</span><span class="p">(</span><span class="n">newroom</span><span class="p">)</span> <span class="k">for</span> <span class="n">newroom</span> <span class="ow">in</span> <span class="n">newrooms</span><span class="p">])</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">newhall</span><span class="p">,</span> <span class="n">newrooms</span><span class="p">,</span> <span class="n">cost</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">neighbours</span><span class="p">(</span><span class="n">hall</span><span class="p">,</span><span class="n">rooms</span><span class="p">):</span>
    <span class="c1">#find the legal board states one move away from the current board
</span>    <span class="c1">#helper function for Dijkstra
</span>    <span class="n">neighbours</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">h</span><span class="p">,</span><span class="n">amphi</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">hall</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">amphi</span><span class="o">!=</span><span class="bp">None</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">hall_to_room</span><span class="p">(</span><span class="n">amphi</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">hall</span><span class="p">,</span><span class="n">rooms</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
                <span class="n">neighbours</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">h</span><span class="p">,</span><span class="n">_</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">hall</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">r</span><span class="p">,</span><span class="n">room</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">rooms</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">r_pos</span><span class="p">,</span> <span class="n">amphi</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">room</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">amphi</span><span class="o">!=</span><span class="bp">None</span><span class="p">:</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="n">room_to_hall</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="n">h</span><span class="p">,</span><span class="n">amphi</span><span class="p">,</span><span class="n">hall</span><span class="p">,</span><span class="n">rooms</span><span class="p">,</span> <span class="n">r_pos</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
                        <span class="c1">#print(result)
</span>                        <span class="n">neighbours</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">neighbours</span>

<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span><span class="n">costs</span><span class="p">):</span>
    <span class="c1">#dijkstra's algorithm
</span>    
    <span class="k">while</span> <span class="ow">not</span> <span class="n">visit</span><span class="p">.</span><span class="n">empty</span><span class="p">():</span>
        <span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">_</span><span class="p">,(</span><span class="n">hall</span><span class="p">,</span><span class="n">rooms</span><span class="p">))</span> <span class="o">=</span> <span class="n">visit</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="c1">#get the next board state in the queue
</span>
        <span class="k">if</span> <span class="n">hall</span> <span class="o">==</span> <span class="n">final_hall</span> <span class="ow">and</span> <span class="n">rooms</span> <span class="o">==</span> <span class="n">final_rooms</span><span class="p">:</span>
            <span class="c1">#if the final state has been reached, return the cost
</span>            <span class="k">return</span> <span class="n">c</span>
        
        <span class="c1">#identify neighbouring board states
</span>        <span class="n">nbs</span> <span class="o">=</span> <span class="n">neighbours</span><span class="p">(</span><span class="n">hall</span><span class="p">,</span><span class="n">rooms</span><span class="p">)</span>

        <span class="c1">#dijkstra procedure
</span>        <span class="k">for</span> <span class="n">nb</span> <span class="ow">in</span> <span class="n">nbs</span><span class="p">:</span>
            <span class="c1">#update the cost with the cost of the move to that neighbour state
</span>            <span class="n">newc</span> <span class="o">=</span> <span class="n">c</span> <span class="o">+</span> <span class="n">nb</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">newc</span> <span class="o">&lt;</span> <span class="n">costs</span><span class="p">[(</span><span class="n">nb</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">nb</span><span class="p">[</span><span class="mi">1</span><span class="p">])]:</span>
                <span class="c1">#update label if new cost is lower than current cost
</span>                <span class="n">costs</span><span class="p">[(</span><span class="n">nb</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">nb</span><span class="p">[</span><span class="mi">1</span><span class="p">])]</span> <span class="o">=</span> <span class="n">newc</span>
                <span class="c1">#add the new board state to the queue
</span>                <span class="n">visit</span><span class="p">.</span><span class="n">put</span><span class="p">((</span><span class="n">newc</span><span class="p">,</span> <span class="nb">next</span><span class="p">(</span><span class="n">unique</span><span class="p">),(</span><span class="n">nb</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">nb</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>


<span class="c1">#starting board state - hard-coded from my puzzle input
</span><span class="n">start_hall</span> <span class="o">=</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">)</span>
<span class="n">start_rooms</span> <span class="o">=</span> <span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>

<span class="c1">#destination board state
</span><span class="n">final_hall</span> <span class="o">=</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">)</span>
<span class="n">final_rooms</span> <span class="o">=</span> <span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>

<span class="c1">#initialise variables for dijkstra
</span><span class="n">start_costs</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span> <span class="p">:</span> <span class="n">inf</span><span class="p">)</span> <span class="c1">#cost to reach all board states is initialised at infinity
</span><span class="n">start_costs</span><span class="p">[(</span><span class="n">start_hall</span><span class="p">,</span><span class="n">start_rooms</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1">#cost to reach initial board state is zero
</span><span class="n">unique</span><span class="o">=</span><span class="n">count</span><span class="p">()</span> <span class="c1">#a unique index for each board state, purely to break ties in the priority queue
</span>
<span class="n">visit</span> <span class="o">=</span> <span class="n">PriorityQueue</span><span class="p">()</span> <span class="c1">#priority queue of board states to visit
</span><span class="n">visit</span><span class="p">.</span><span class="n">put</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="nb">next</span><span class="p">(</span><span class="n">unique</span><span class="p">),(</span><span class="n">start_hall</span><span class="p">,</span><span class="n">start_rooms</span><span class="p">)))</span> <span class="c1">#initially, queue contains only the starting board state
</span>

<span class="k">print</span><span class="p">(</span><span class="n">dijkstra</span><span class="p">(</span><span class="n">visit</span><span class="p">,</span><span class="n">start_costs</span><span class="p">))</span> <span class="c1">#print puzzle answer
</span></code></pre></div></div>
<p>Day 24 - <a href="https://adventofcode.com/2021/day/24">Arithmetic Logic Unit</a>
———————————————————————-</p>

<h3 id="thoughts-3">Thoughts</h3>

<p>A very tricky puzzle that I eventually solved without any code at all. Here, the goal is to <em>understand</em> the input code, and then solve the puzzle from that understanding. It’s a code <em>reading</em> puzzle, not a code <em>writing</em> puzzle!</p>

<p>Santa’s submarine uses a program called MONAD to validate submarine model numbers. A model number is a 14-digit number. MONAD is a program which expects 14 sequential inputs. To validate a model number, enter the next digit of the model number into the program whenever an input is required. If and only if the model number is valid, MONAD will output a final value of zero for the variable <code class="language-plaintext highlighter-rouge">z.</code></p>

<p>The goal is to find the smallest (part 1) and largest (part 2) valid model numbers.</p>

<p>The processing unit that runs MONAD can store four integer variables:<code class="language-plaintext highlighter-rouge">w</code>,<code class="language-plaintext highlighter-rouge">x</code>,<code class="language-plaintext highlighter-rouge">y</code>, and <code class="language-plaintext highlighter-rouge">z</code>. These variables all start with the value <code class="language-plaintext highlighter-rouge">0</code>.</p>

<p>MONAD contains instructions of 6 types.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">inp a</code>- Read an input value and write it to variable <code class="language-plaintext highlighter-rouge">a</code>. As stated above, each time this type of instruction arises, we enter the next digit of the model number we are trying to verify.</li>
  <li><code class="language-plaintext highlighter-rouge">add a b</code>- Add the value of <code class="language-plaintext highlighter-rouge">a</code> to the value of <code class="language-plaintext highlighter-rouge">b</code>, then store the result in variable <code class="language-plaintext highlighter-rouge">a</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">mul a b</code> - Multiply the value of <code class="language-plaintext highlighter-rouge">a</code> by the value of <code class="language-plaintext highlighter-rouge">b</code>, then store the result in variable <code class="language-plaintext highlighter-rouge">a</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">div a b</code> - Divide the value of <code class="language-plaintext highlighter-rouge">a</code> by the value of <code class="language-plaintext highlighter-rouge">b</code>, truncate the result to an integer, then store the result in variable <code class="language-plaintext highlighter-rouge">a</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">mod a b</code> - Divide the value of <code class="language-plaintext highlighter-rouge">a</code> by the value of <code class="language-plaintext highlighter-rouge">b</code>, then store the <em>remainder</em> in variable <code class="language-plaintext highlighter-rouge">a</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">eql a b</code> - If the value of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> are equal, then store the value <code class="language-plaintext highlighter-rouge">1</code> in variable <code class="language-plaintext highlighter-rouge">a</code>. Otherwise, store the value <code class="language-plaintext highlighter-rouge">0</code> in variable <code class="language-plaintext highlighter-rouge">a</code>.</li>
</ul>

<p>To understand MONAD, we have to look at our puzzle input. For my input, it was clear that MONAD consists of 14 blocks of 18 lines. Each block takes in a single input. Each block falls into one of two categories, which I’ve called Type I and Type II.</p>

<p>There are seven Type I blocks and seven Type II blocks in the input.</p>

<h4 id="type-i-block">Type I Block</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>inp w
mul x 0
add x z
mod x 26
div z 1
add x P
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y Q
mul y x
add z y
</code></pre></div></div>

<p>Here P and Q are constants which vary in different Type I blocks in the MONAD program. For example the first block in my input had P=13 and Q=13, whereas the third block had P=15 and Q=5. This is hard-coded into the program - P and Q are not variables in the processor, they are determined solely by the MONAD program.</p>

<p>Observing my input, I noticed the following are true for all Type I blocks:</p>

<ul>
  <li>9 &lt; P &lt; 17</li>
  <li>0 &lt; Q &lt; 17</li>
</ul>

<p>What does a Type I block do?</p>

<p>Well, if we look at lines 2 and 9, we see that x and y are zeroed before they are used. So any values of x and y currently stored in memory are ignored.</p>

<p>Lines 3, 4 and 6 will update the value of x such that x = zmod26 + P. Note that line 5 does nothing at all.</p>

<p>Line 7 checks whether w == z mod 26 + P. w is the latest input, which is a digit from the model number. Since P&gt;9 throughout MONAD, <strong>this equality will never hold</strong>.</p>

<p>z mod 26 + P will always be a two-digit number, and since w is a digit from the model number, they cannot be equal. As a result, every Type I block will write 0 to the variable x.</p>

<p>Therefore, when line 8 checks whether x == 0, this equality always holds. Therefore the program will write 1 to the variable x.</p>

<p>Lines 9-12 will always set y = 26, so line 13 will set z = 26*z.</p>

<p>Lines 14-17 will set y = w + Q.</p>

<p>Line 18 will set z = z + w + Q.</p>

<p>The overall effect of the block is to set <code class="language-plaintext highlighter-rouge">z_final = z_initial*26 + w + Q</code>.</p>

<p>Changes to x and y are irrelevant, as they will be zeroed in the next block (both Type I and Type II blocks set x and y to zero before doing anything with them).</p>

<p><strong>This process looks like appending a digit in base 26.</strong></p>

<p>Sticking to base 10 for a minute, how would we turn z=123 into z=1234. Well, we’d have to multiply 123 by 10 to get 1230, then add the 4 to get 1234.</p>

<p>Similarly, <code class="language-plaintext highlighter-rouge">z_final = z_initial*26 + w + Q</code> , considered in base 26, has the effect of <strong>appending the digit (w + Q) to the end of the digits of z_initial.</strong></p>

<p><strong>Type I blocks append the digit to the base-26 representation of z.</strong></p>

<h4 id="type-ii-block">Type II Block</h4>

<p>A Type II block looks very similar to a Type I block, but the differences are important!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>inp w
mul x 0
add x z
mod x 26
div z 26
add x P
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y Q
mul y x
add z y
</code></pre></div></div>

<p>Observing my input, I noticed the following are true for all Type II blocks:</p>

<ul>
  <li>-17 &lt; P &lt;= 0</li>
  <li>0 &lt; Q &lt; 17</li>
</ul>

<p>Understanding the block follows the same logic as before:</p>

<p>If we look at lines 2 and 9, we see again that x and y are zeroed before they are used.</p>

<p>Lines 3, 4 and 6 will update the value of x such that x = z mod 26 + P.</p>

<p>Note that line 5 will set z = z//26. In a type I block, this line did nothing!</p>

<p>Line 7 checks whether w == z mod 26 + P. w is the latest input, which is a digit from the model number. Since P is always less than or equal to 0, it is possible that this equality is true, depending on the values of z and w.</p>

<h5 id="case-a-w--z-mod-26--p">Case A: w == z mod 26 + P</h5>

<p>Line 7 sets x=1.</p>

<p>Line 8 sets x=0.</p>

<p>Lines 9-12 will set y = 1, so line 13 will do nothing.</p>

<p>Lines 14-17 will set y = 0, so line 18 will do nothing.</p>

<p>In Case A, the overall effect of the block is to set <code class="language-plaintext highlighter-rouge">**z_final = z_initial//26**</code>.</p>

<p><strong>This process is removing the final digit in base 26.</strong></p>

<p>Again we can compare to base-10. If we take the number 1234 and want to change it to 123, all we have to do is divide by 10 and round down. 1234//10 gives 123.</p>

<p>Note that 6//10 = 0, so a single-digit number gets reduced to 0 rather than made into a “zero digit number”, whatever that would mean.</p>

<p><strong>In Case A, Type II blocks remove the final digit of the base-26 representation of z.</strong> <strong>If the base-26 representation of z only has one digit, then the block will set z to zero.</strong></p>

<h5 id="case-b-w--z-mod-26--p">Case B: w != z mod 26 + P</h5>

<p>Line 7 sets x=0.</p>

<p>Line 8 sets x=1.</p>

<p>Lines 9-12 will set y = 26, so line 13 will set z = 26*z</p>

<p>Lines 14-17 will set y = w + Q.</p>

<p>Line 18 will set z = z + w + Q.</p>

<p>In Case B, the overall effect of the block is to set <code class="language-plaintext highlighter-rouge">**z_final = (z_initial//26)*26 + w + Q**</code>.</p>

<p>This is replacing the final digit. Again we can imagine the base-10 situation. What if we want to turn 1234 into 1237. Well first we divide by 10 and round down, 1234//10 gives us 123. Then we multiply by 10 to give us 1230. Then we add z.</p>

<p><strong>In Case B, Type II blocks replace the final digit of the base-26 representation of z.</strong></p>

<h4 id="which-model-numbers-will-be-valid">Which model numbers will be valid?</h4>

<p>Now we can approach the question of when a model number will be valid. For a 14-digit model number to be validated by MONAD, the program must output z=0 when we input the digits of the model number as the inputs to the 14 blocks in MONAD.</p>

<p>We know that Type I blocks add a digit to the base-26 representation of z.</p>

<p>We know that Type II blocks either remove a digit from the base-26 representation of z (Case A), or replace the final digit with a new digit (Case B).</p>

<p>z=0 when MONAD starts. If we want z=0 at the end, we need to remove any digits that get added by Type I blocks. For that to happen, <strong>every Type II block must follow Case A.</strong></p>

<p>This means for every Type II block, we need <strong>w == z mod 26 + R</strong></p>

<ul>
  <li>w is the input digit, taken from the model number.</li>
  <li>z mod 26 is the final digit of the base-26 representation of z
    <ul>
      <li>Base-10 example: 1234 mod 10 is the remainder when 1234 is divided by 10.</li>
      <li>1234 mod 10 = 4 , i.e. the final digit of 1234</li>
    </ul>
  </li>
  <li>R is hard-coded in the particular Type II block we are looking at.</li>
</ul>

<p><strong>Simultaneous Equations To The Rescue</strong></p>

<p>Now we need to read through each block of MONAD, keeping track of the value of z as we do so. We’re going to assume that w == z mod 26 + R is true every time we hit a Type II block.</p>

<p>Let’s say that our 14 digit model number is abcdefghijklmn , where each letter represents a single digit of the number.</p>

<p>Here is the situation for the first 6 blocks of my particular input:</p>

<table>
  <thead>
    <tr>
      <th>Block #</th>
      <th>Input digit</th>
      <th>Block Type</th>
      <th>P</th>
      <th>Q</th>
      <th>Case A condition</th>
      <th>base-26 digits of z_final</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>–</td>
      <td>–</td>
      <td>–</td>
      <td>–</td>
      <td>–</td>
      <td>[0]</td>
    </tr>
    <tr>
      <td>1</td>
      <td>a</td>
      <td>I</td>
      <td>13</td>
      <td>13</td>
      <td>–</td>
      <td>[a+13]</td>
    </tr>
    <tr>
      <td>2</td>
      <td>b</td>
      <td>I</td>
      <td>11</td>
      <td>10</td>
      <td>–</td>
      <td>[a+13, b+10]</td>
    </tr>
    <tr>
      <td>3</td>
      <td>c</td>
      <td>I</td>
      <td>15</td>
      <td>5</td>
      <td>–</td>
      <td>[a+13, b+10, c+5]</td>
    </tr>
    <tr>
      <td>4</td>
      <td>d</td>
      <td>II</td>
      <td>-11</td>
      <td>14</td>
      <td>d = c+5+-11<br />(d = c-6)</td>
      <td>[a+13,b+10]</td>
    </tr>
    <tr>
      <td>5</td>
      <td>e</td>
      <td>I</td>
      <td>14</td>
      <td>5</td>
      <td>–</td>
      <td>[a+13,b+10, e+5]</td>
    </tr>
    <tr>
      <td>6</td>
      <td>f</td>
      <td>II</td>
      <td>0</td>
      <td>15</td>
      <td>f = e+5+0<br />(f = e+5)</td>
      <td>[a+13,b+10]</td>
    </tr>
  </tbody>
</table>

<p>Every time we encounter a Type II block, we get an equation relating two of the input digits.</p>

<h4 id="solving-the-puzzle">Solving the Puzzle</h4>

<p>At the end of the process we will have 7 equations for 14 unknown digits. This means there is no unique solution. But that’s fine - there are many possible valid model numbers.</p>

<p>We know that the digits can only be integers between 0 and 9 inclusive.</p>

<p>To find the <strong>smallest</strong> valid model number and solve part 1, we simply need to make the digits as small as possible while satisfying the equations.</p>

<ul>
  <li>d = c - 6
    <ul>
      <li>Since a digit cannot be negative, the lowest possible value of c would be 6, and the lowest possible value of d would be 0.</li>
    </ul>
  </li>
  <li>f = e + 5
    <ul>
      <li>The lowest value of f would be 5 and the lowest value of e would be 0.</li>
    </ul>
  </li>
</ul>

<p>The opposite logic will give us the digits of the <strong>largest</strong> valid model number:</p>

<ul>
  <li>d = c - 6
    <ul>
      <li>Since a digit cannot be higher than 9, the highest possible value of c would be 9, and the highest possible value of d would be 3.</li>
    </ul>
  </li>
  <li>f = e + 5
    <ul>
      <li>The highest value of f would be 9 and the highest value of e would be 4.</li>
    </ul>
  </li>
</ul>

<p>And thus the solution is in reach. I continued the table above, covering all 14 blocks of my input, created and solved 7 equations, and wrote down my answer.</p>

<p>No code was required! Now of course you could make certain assumptions about the input and write a solver, but the problem here depends sensitively on the details of the input. Without checking other people’s puzzle inputs, I can’t tell whether MONAD always uses base 26, whether it always splits neatly into 14 blocks, and so on. I’m sure that the puzzle inputs follow a strict pattern, but the point here is to reverse engineer the solution from the MONAD problem. This puzzle isn’t about coding a solution, it’s about reading, understanding and reverse-engineering someone else’s code.</p>

<h2 id="day-25---sea-cucumber">Day 25 - <a href="https://adventofcode.com/2021/day/25">Sea Cucumber</a></h2>

<h3 id="thoughts-4">Thoughts</h3>

<p>After some serious brain work on days 21-24, we get a light, refreshing single-part puzzle for Christmas Day, to round out Advent of Code 2021.</p>

<p>Sea cucumbers live on a grid.</p>

<p>Sea cucumbers come in two herds. An east-facing sea cucumber (&gt;) always moves east. A south-facing sea cucumber (v) always moves south.</p>

<p>Each step, the east-facing herd simultaneously try to move one square to the east, then the south-facing herd simultaneously try to move one square to the south.</p>

<p>A sea cucumber can only move into an unoccupied (.) space. If the space a sea cucumber would like to move to is occupied by another sea cucumber, it will not move on this step.</p>

<p>Sea cucumbers live in a toroidal space. If an east-facing cucumber reaches the eastmost edge of their row, on the next step they will try to move to the westmost position in that row. Likewise, if a south-facing cucumber reaches the southmost edge of their column, on the next step they will try to move to the northmost position in that column.</p>

<p>The question is, given an input grid, how many steps are required before no sea cucumber can move?</p>

<p>The code below attacks this problem without any particular elegance. The function <code class="language-plaintext highlighter-rouge">advance</code> will advance the grid by a single step, following the rules laid out above. The function <code class="language-plaintext highlighter-rouge">find_stability</code> will check after each step whether the grid has remained unchanged. If the grid hasn’t changed, <code class="language-plaintext highlighter-rouge">find_stability</code> will return the number of steps so far.</p>

<h3 id="python-code-3">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">copy</span> <span class="kn">import</span> <span class="n">deepcopy</span>


<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>

<span class="n">width</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">height</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">advance</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="n">grid1</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span><span class="p">,</span><span class="n">char</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">char</span><span class="o">==</span><span class="s">'&gt;'</span><span class="p">:</span>
                <span class="n">destination</span> <span class="o">=</span> <span class="n">row</span><span class="p">[(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">width</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">destination</span> <span class="o">==</span> <span class="s">'.'</span><span class="p">:</span>
                    <span class="n">grid1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span><span class="s">'.'</span>
                    <span class="n">grid1</span><span class="p">[</span><span class="n">i</span><span class="p">][(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">width</span><span class="p">]</span> <span class="o">=</span> <span class="s">'&gt;'</span>

    <span class="n">grid2</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">grid1</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">grid1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span><span class="p">,</span><span class="n">char</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">char</span><span class="o">==</span><span class="s">'v'</span><span class="p">:</span>
                <span class="n">destination</span> <span class="o">=</span> <span class="n">grid1</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">height</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">destination</span> <span class="o">==</span> <span class="s">'.'</span><span class="p">:</span>
                    <span class="n">grid2</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="s">'.'</span>
                    <span class="n">grid2</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">height</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="s">'v'</span>
    
    <span class="k">return</span> <span class="n">grid2</span>

<span class="k">def</span> <span class="nf">find_stability</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="n">stable</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">stable</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
        <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
        <span class="n">newgrid</span> <span class="o">=</span> <span class="n">advance</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">newgrid</span> <span class="o">==</span> <span class="n">grid</span><span class="p">:</span>
            <span class="n">stable</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">grid</span> <span class="o">=</span> <span class="n">newgrid</span>
    
    <span class="k">return</span> <span class="n">i</span>

<span class="k">print</span><span class="p">(</span><span class="n">find_stability</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="advent-of-code" /><category term="aoc" /><category term="coding" /><category term="python" /><summary type="html"><![CDATA[Advent of Code 2021 - Days 21-25]]></summary></entry><entry><title type="html">Advent Of Code 2021 Days 16-20</title><link href="http://localhost:4000/2022/03/21/advent-of-code-2021-days-16-20.html" rel="alternate" type="text/html" title="Advent Of Code 2021 Days 16-20" /><published>2022-03-21T13:45:39+00:00</published><updated>2022-03-21T13:45:39+00:00</updated><id>http://localhost:4000/2022/03/21/advent-of-code-2021-days-16-20</id><content type="html" xml:base="http://localhost:4000/2022/03/21/advent-of-code-2021-days-16-20.html"><![CDATA[<p>o</p>
<h1 id="advent-of-code-2021-days-16-20">Advent of Code 2021 Days 16-20</h1>

<p><img src="/images/pexels-photo-6211095.jpeg" alt="christmas tree decorated with baubles and garland" /></p>

<p>Welcome back to some more <a href="http://adventofcode.com/2021/">Advent of Code 2021</a>!</p>

<p>These posts will be quite brief, just a few thoughts on each puzzle and the Python 3 code I used to solve it. All code on Github <a href="https://git.io/JmAvJ">here</a>. The code below is for Part 2 of each day, which often incorporates Part 1 in some way.</p>

<h2 id="day-16---packet-decoder">Day 16 - <a href="https://adventofcode.com/2021/day/16">Packet Decoder</a></h2>

<h3 id="thoughts">Thoughts</h3>

<p>A parsing puzzle - formerly my least favourite type of AoC puzzle, though they are growing on me. A little. Here our puzzle input is a transmission in hexadecimal. The transmission consists of a single <strong>packet</strong>, which itself contains multiple packets.</p>

<h4 id="packet-structure">Packet Structure</h4>

<p>When converted into binary, a packet is structured as follows:</p>

<ul>
  <li>The first 3 bits encode an integer which is the packet <strong>version</strong></li>
  <li>The next 3 bits encode another integer, which is the <strong>type ID</strong>.
    <ul>
      <li>If ID == 4, the packet is a <strong>literal value</strong>, representing a single binary integer</li>
      <li>Otherwise, the packet is an <strong>operator packet</strong>, and the ID determines which operation it performs on all the subpackets it contains (see below)</li>
    </ul>
  </li>
</ul>

<p>All packets will have this standard 6-digit header.</p>

<h4 id="literal-value-packets">Literal Value Packets</h4>

<p>Literal values have their header followed by groups of five bits. The first bit in each 5-bit group is 1, unless it is the last group contained in the packet, in which case it is 0. The last 4 digits in each group are the digits the binary number the packet represents, padded with leading zeros and split into groups of exactly four digits.</p>

<p>For example, a literal value packet, converted from hexadecimal to binary, might look like this: 111100100101011010001. The interpretation of this packet is explained by the diagram below:</p>

<p><img src="/images/bits_literal_value_package.jpg" alt="" /></p>

<h4 id="operator-packets">Operator Packets</h4>

<p>If the type ID of an operator packet isn’t equal to 4, the packet is an operator packet. The type ID defines the operation that the packet performs on the subpackets it contains.</p>

<table>
  <thead>
    <tr>
      <th>Type ID</th>
      <th>Packet value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>Sum of the values of the subpackets</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Product of the values of the subpackets</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Minimum value of the subpackets</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Maximum value of the subpackets</td>
    </tr>
    <tr>
      <td>5</td>
      <td>1 if the first subpacket’s value is greater than the second.<br />0 otherwise.<br />Will contain exactly two subpackets.</td>
    </tr>
    <tr>
      <td>6</td>
      <td>1 if the first subpacket’s value is less than the second.<br />0 otherwise.<br />Will contain exactly two subpackets.</td>
    </tr>
    <tr>
      <td>7</td>
      <td>1 if the first subpacket’s value is equal to the second.<br />0 otherwise.<br />Will contain exactly two subpackets.</td>
    </tr>
  </tbody>
</table>

<p>After the 6-digit header containing version number and type ID, the next digit in an operator packet is the <strong>length type</strong>. This determines how to work out which subpackets are included.</p>

<p>If length type is 0, then the next 15 bits of the packet represent an integer which is the total length in bits of the of the subpackets contained by the operator packet.</p>

<p>If length type is 1, then the next 11 bits of the packet represent an integer which is the number of subpackets contained by the operator packet. This only counts the “immediate” subpackets, i.e. nested subpackets to do not count towards this total.</p>

<p>Below is an example of an operator subpacket using length type 1, with value 4 + 3 = 7.</p>

<p><img src="/images/bits_operator_packet_sum.jpg" alt="" /></p>

<p>And another example using length type 0, with value 4 x 3 = 12.</p>

<p><img src="/images/bits_operator_packet_product.jpg" alt="" /></p>

<h4 id="approach">Approach</h4>

<p>I used a little bit of object-oriented programming here, which I normally don’t see as beneficial for Advent of Code puzzles. Here we need to keep track of where we are in a binary string as we parse it, and the easiest thing seemed to be to have a Message object where the string and the current position are attributes.</p>

<p>The Message class has a helper method <code class="language-plaintext highlighter-rouge">integer_value</code> to pull out a decimal integer value for the next few digits in the binary string, the number of digits specified as an argument.</p>

<p>It also has two methods <code class="language-plaintext highlighter-rouge">parse_one_packet</code> and <code class="language-plaintext highlighter-rouge">read_packet_content</code>, which together constitute a parser. Given a packet (which may or may not contain subpackets), <code class="language-plaintext highlighter-rouge">parse_one_packet</code> will convert the packet into a tuple containing the version number, the type ID, and the content of the packet. The content is either an integer (for literal value packets) or a list of tuples representing each of the subpackets (for an operator packet).</p>

<p>Evaluating a packet’s value is left to an external function <code class="language-plaintext highlighter-rouge">apply_operators</code>, outside the Message class, which takes in the parsed (tuple) version of a packet and applies the operations required by the puzzle rules.</p>

<h3 id="python-code">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">binascii</span>
<span class="kn">import</span> <span class="nn">math</span>


<span class="k">class</span> <span class="nc">Message</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">file</span><span class="p">):</span>
        <span class="n">hex_data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>

        <span class="c1">#convert transmission from hexadecimal to binary
</span>        <span class="n">bin_data</span> <span class="o">=</span> <span class="n">binascii</span><span class="p">.</span><span class="n">a2b_hex</span><span class="p">(</span><span class="n">hex_data</span><span class="p">)</span>
        
        <span class="c1">#pos is an integer attribute representing the current position of the parser in parsing the message
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1">#bits is a string attribute containing the bits in the message
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">bits</span> <span class="o">=</span> <span class="s">''</span>

        <span class="c1">#add the bits from the input file into the bits attribute of the Message object
</span>        <span class="k">for</span> <span class="n">byte</span> <span class="ow">in</span> <span class="n">bin_data</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">bits</span> <span class="o">+=</span> <span class="s">'{:08b}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">byte</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">integer_value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_bits</span><span class="p">):</span>
        <span class="c1">#returns the integer value, in decimal, of the next n_bits bits of the message
</span>
        <span class="c1">#convert to decimal and store as int
</span>        <span class="n">result</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bits</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">pos</span><span class="p">:</span><span class="bp">self</span><span class="p">.</span><span class="n">pos</span><span class="o">+</span><span class="n">n_bits</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
        <span class="c1">#advance the position
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">n_bits</span>
        <span class="k">return</span> <span class="n">result</span>
    
    <span class="k">def</span> <span class="nf">parse_one_packet</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1">#parse the next packet of the message
</span>        <span class="c1">#return the packet as a tuple of (packet version, type id, packet content)
</span>        <span class="c1">#content is either a decimal integer (for literal value packets), or a list of subpackets (for operator packets)
</span>        <span class="n">version</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">integer_value</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="nb">id</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">integer_value</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">content</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">read_packet_content</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">read_packet_content</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="nb">id</span><span class="p">):</span>
        <span class="c1">#interpret the contents of a packet
</span>        <span class="k">if</span> <span class="nb">id</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span> <span class="c1">#the packet is a literal value, return the decimal integer value
</span>            <span class="n">val</span> <span class="o">=</span> <span class="s">''</span>
            <span class="n">go</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">go</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">go</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">integer_value</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="n">val</span> <span class="o">+=</span> <span class="s">"{:04b}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">integer_value</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>

            <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>

        <span class="k">else</span><span class="p">:</span> <span class="c1">#the packet is an operator packet, return a list of subpackets
</span>            <span class="n">length_type</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">integer_value</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">length_type</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c1">#the next 11 binary digits give the number of subpackets
</span>                <span class="n">n_packets</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">integer_value</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>

                <span class="k">return</span> <span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">parse_one_packet</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_packets</span><span class="p">)]</span>
            
            <span class="k">if</span> <span class="n">length_type</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c1">#the next 15 binary digits give the total number of bits in the subpackets
</span>                <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">integer_value</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="c1">#need to do this on a separate line as it changes self.pos
</span>                <span class="n">end</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">+</span> <span class="n">x</span> <span class="c1">#end = self.pos + self.integer_value(15) one one line would be bad as it would depend on the order that pos and integer_value are evaluated
</span>                <span class="n">output</span><span class="o">=</span><span class="p">[]</span>
                <span class="k">while</span> <span class="bp">self</span><span class="p">.</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span> <span class="c1">#parse packets until the end position is reached
</span>                    <span class="n">output</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">parse_one_packet</span><span class="p">())</span>

                <span class="k">return</span> <span class="n">output</span>

<span class="k">def</span> <span class="nf">apply_operators</span><span class="p">(</span><span class="n">packet</span><span class="p">):</span>
    <span class="c1">#recursive function to calculate the value of a packet (which may contain more packets, which may contain more packets etc.)
</span>    <span class="p">(</span><span class="n">version</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span> <span class="o">=</span> <span class="n">packet</span>

    <span class="k">if</span> <span class="nb">id</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span> <span class="c1">#sum packet, calculates the sum of all subpackets
</span>        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">subpacket</span> <span class="ow">in</span> <span class="n">content</span><span class="p">:</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">subpacket</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">total</span>

    <span class="k">if</span> <span class="nb">id</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span> <span class="c1">#product packet, calculates the product of all subpackets
</span>        <span class="n">total</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">subpacket</span> <span class="ow">in</span> <span class="n">content</span><span class="p">:</span>
            <span class="n">total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">*</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">subpacket</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">total</span>

    <span class="k">if</span> <span class="nb">id</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span> <span class="c1">#minimum packet, calculates the minimum value of all subpackets
</span>        <span class="n">total</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">inf</span>
        <span class="k">for</span> <span class="n">subpacket</span> <span class="ow">in</span> <span class="n">content</span><span class="p">:</span>
            <span class="n">val</span> <span class="o">=</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">subpacket</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">val</span><span class="o">&lt;</span><span class="n">total</span><span class="p">:</span>
                <span class="n">total</span> <span class="o">=</span> <span class="n">val</span>
        <span class="k">return</span> <span class="n">total</span>

    <span class="k">if</span> <span class="nb">id</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> <span class="c1">#maximum packet, calculates the maximum value of all subpackets
</span>        <span class="n">total</span> <span class="o">=</span> <span class="o">-</span><span class="n">math</span><span class="p">.</span><span class="n">inf</span>
        <span class="k">for</span> <span class="n">subpacket</span> <span class="ow">in</span> <span class="n">content</span><span class="p">:</span>
            <span class="n">val</span> <span class="o">=</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">subpacket</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">val</span><span class="o">&gt;</span><span class="n">total</span><span class="p">:</span>
                <span class="n">total</span> <span class="o">=</span> <span class="n">val</span>
        <span class="k">return</span> <span class="n">total</span>

    <span class="k">if</span> <span class="nb">id</span><span class="o">==</span><span class="mi">4</span><span class="p">:</span> <span class="c1">#literal value packet, the value in content is the integer the packet represents
</span>        <span class="n">total</span> <span class="o">=</span> <span class="n">content</span>
        <span class="k">return</span> <span class="n">total</span>

    <span class="k">if</span> <span class="nb">id</span><span class="o">==</span><span class="mi">5</span><span class="p">:</span> <span class="c1"># &gt; packet. contains exactly two subpackets, if the first has a value greater than the second, return 1. Otherwise return 0.
</span>        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">if</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&gt;</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
            <span class="n">total</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">total</span>
    
    <span class="k">if</span> <span class="nb">id</span><span class="o">==</span><span class="mi">6</span><span class="p">:</span> <span class="c1"># &lt; packet. contains exactly two subpackets, if the first has a value less than the second, return 1. Otherwise return 0.
</span>        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">if</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&lt;</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
            <span class="n">total</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">total</span>

    <span class="k">if</span> <span class="nb">id</span><span class="o">==</span><span class="mi">7</span><span class="p">:</span> <span class="c1"># == packet. contains exactly two subpackets, if the first has a value equal to the second, return 1. Otherwise return 0.
</span>        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">if</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="n">apply_operators</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
            <span class="n">total</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">total</span>
    

<span class="c1">#initialise a Message object from the input file
</span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">Message</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>

<span class="c1">#parse the outer packet of the message into a tuple of (version number, type ID, content)
</span><span class="n">packet</span> <span class="o">=</span> <span class="n">message</span><span class="p">.</span><span class="n">parse_one_packet</span><span class="p">()</span>

<span class="c1">#calculate the value of the outer packet of the message
</span><span class="k">print</span><span class="p">(</span><span class="n">apply_operators</span><span class="p">(</span><span class="n">packet</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-17---trick-shot">Day 17 - <a href="https://adventofcode.com/2021/day/17">Trick Shot</a></h2>

<h3 id="thoughts-1">Thoughts</h3>

<p>What we have here is a simplified version of projectile motion with gravity and water resistance on a 2-dimensional grid. We are launching an underwater probe from the origin and then computing its position after each step. The probe starts at position <code class="language-plaintext highlighter-rouge">(0,0)</code> with initial velocity <code class="language-plaintext highlighter-rouge">(ux,uy)</code>, where <code class="language-plaintext highlighter-rouge">ux</code> and <code class="language-plaintext highlighter-rouge">uy</code> are integers.</p>

<p>On each step:</p>

<ul>
  <li>The probe’s x-position increases by its current x-velocity.</li>
  <li>Then the probe’s y-position increases by its current y-velocity.</li>
  <li>Then the probe’s x-velocity decreases by 1 if it is positive, increases by 1 if it is negative, or stays unchanged if it is zero. This simulates the water resistance or drag on the probe.</li>
  <li>Then the probe’s y-velocity decreases by 1, simulating gravity.</li>
</ul>

<p>The goal is to find all the distinct values of the initial velocity vector which result in the probe being in a specified <strong>target area</strong> after any step. The target area is a rectangle specified by integer minimum and maximum coordinates <code class="language-plaintext highlighter-rouge">x_min, x_max, y_min</code> and <code class="language-plaintext highlighter-rouge">y_max</code>.</p>

<p>For the example and my input, <code class="language-plaintext highlighter-rouge">x_max&gt;0</code>, <code class="language-plaintext highlighter-rouge">y_min&lt;0</code> and <code class="language-plaintext highlighter-rouge">y_max&lt;0</code>, which I have assumed in my solution below.</p>

<p>This problem can be solved analytically, but it can also be brute forced pretty quickly. Unsurprisingly, I chose the latter. The solution below simulates a range of initial velocities and computes whether the probe hits the target area for each case, incrementing a count if the probe does reach the target area after any step.</p>

<h4 id="bounds-on-the-initial-x-velocity">Bounds on the initial x-velocity</h4>

<p>The code tries integer values for <code class="language-plaintext highlighter-rouge">ux</code> between 1 and <code class="language-plaintext highlighter-rouge">x_max</code> inclusive.</p>

<ul>
  <li>If <code class="language-plaintext highlighter-rouge">ux &lt;= 0</code>, the x-velocity will be always be negative or zero. This means the probe will never move right of the origin, and since <code class="language-plaintext highlighter-rouge">x_min&gt;0</code>, the target area is always right of the origin.</li>
  <li>If <code class="language-plaintext highlighter-rouge">ux &gt; x_max</code>, then the probe overshoots to the right of the target area on the first step. Since x-velocity was initially positive and tends towards zero, this overshoot can never be corrected.</li>
</ul>

<h4 id="bounds-on-the-initial-y-velocity">Bounds on the initial y-velocity</h4>

<p>The code tries integer values for <code class="language-plaintext highlighter-rouge">uy</code> between <code class="language-plaintext highlighter-rouge">y_</code>min and <code class="language-plaintext highlighter-rouge">-y_min-1</code> inclusive. (Recall that I have assumed y_min&lt;0).</p>

<ul>
  <li>If <code class="language-plaintext highlighter-rouge">uy &lt; y_min</code> then the probe falls below the target area after the first step. Since y-velocity can only decrease, this means the probe will always be below the target area after every step.</li>
  <li>I’ve assumed that <code class="language-plaintext highlighter-rouge">y_max&lt;0</code>. For any positive <code class="language-plaintext highlighter-rouge">uy</code>, the probe starts at <code class="language-plaintext highlighter-rouge">(0,0)</code> and passes through <code class="language-plaintext highlighter-rouge">y=0</code> again with velocity <code class="language-plaintext highlighter-rouge">-uy-1</code>.
    <ul>
      <li>If <code class="language-plaintext highlighter-rouge">-uy-1 &lt; y_min</code>, or equivalently <code class="language-plaintext highlighter-rouge">uy &gt; -y_min-1</code> , then the probe will fall below the target area after the following step.</li>
    </ul>
  </li>
</ul>

<h3 id="python-code-1">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="c1">#read the input data to find the boundaries of the target area
</span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'target area: x='</span><span class="p">,</span><span class="s">''</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'y='</span><span class="p">,</span><span class="s">''</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'..'</span><span class="p">,</span><span class="s">', '</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">', '</span><span class="p">)</span>

<span class="n">x_min</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">x_max</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">y_min</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">y_max</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">on_target</span><span class="p">(</span><span class="n">vx</span><span class="p">,</span> <span class="n">vy</span><span class="p">):</span>
    <span class="c1">#determine whether an initial velocity (vx,vy) results in the probe
</span>    <span class="c1">#being inside the target area after any step
</span>    <span class="n">x</span><span class="o">=</span><span class="mi">0</span>
    <span class="n">y</span><span class="o">=</span><span class="mi">0</span>
    <span class="k">while</span> <span class="n">y</span><span class="o">&gt;=</span><span class="n">y_min</span><span class="p">:</span> <span class="c1">#while the probe is above the bottom of the target area
</span>                    <span class="c1">#once it goes below the target area it will never be on target
</span>                    <span class="c1">#as y-velocity is always decreasing
</span>        <span class="n">x</span> <span class="o">+=</span> <span class="n">vx</span>
        <span class="n">y</span> <span class="o">+=</span> <span class="n">vy</span>

        <span class="k">if</span> <span class="n">x_min</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">x_max</span>  <span class="ow">and</span> <span class="n">y_min</span> <span class="o">&lt;=</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="n">y_max</span><span class="p">:</span> <span class="c1">#if the position is in the target area
</span>            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="k">if</span> <span class="n">vx</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">vx</span> <span class="o">-=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="n">vx</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">x_min</span> <span class="ow">or</span> <span class="n">x</span><span class="o">&gt;</span><span class="n">x_max</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>    <span class="c1">#if the probe is left or right of the target area and has x-velocity zero
</span>                                <span class="c1">#it will never reach the target area
</span>        
        <span class="k">if</span> <span class="n">vx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">vx</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="n">vy</span> <span class="o">-=</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="bp">False</span>

<span class="n">on_target_probes</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">ux</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">x_max</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">uy</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">y_min</span><span class="p">,</span><span class="o">-</span><span class="n">y_min</span><span class="p">):</span>
        <span class="n">is_on_target</span> <span class="o">=</span> <span class="n">on_target</span><span class="p">(</span><span class="n">ux</span><span class="p">,</span><span class="n">uy</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_on_target</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">on_target_probes</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="n">on_target_probes</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="day-18---snailfish">Day 18 - <a href="https://adventofcode.com/2021/day/18">Snailfish</a></h2>

<h3 id="thoughts-2">Thoughts</h3>

<p>Snailfish, as is to be expected, have their own version of arithmetic.</p>

<ul>
  <li>A <strong>snailfish number</strong> is a pair, such as <code class="language-plaintext highlighter-rouge">[3,4]</code>.
    <ul>
      <li>The elements of the pair might be an integer or another pair.</li>
      <li><code class="language-plaintext highlighter-rouge">[6,[3,[12,4]]</code> is also a valid snailfish number.</li>
      <li>Order matters. <code class="language-plaintext highlighter-rouge">[4,3]</code> is a different number to <code class="language-plaintext highlighter-rouge">[3,4]</code>.</li>
    </ul>
  </li>
  <li>Snailfish <strong>addition</strong> is performed by forming a new pair, so that <code class="language-plaintext highlighter-rouge">[3,4] + [7,2] = [[3,4],[7,2]]</code>
    <ul>
      <li>Snailfish addition is not commutative: <code class="language-plaintext highlighter-rouge">A + B</code> is not necessarily equal to <code class="language-plaintext highlighter-rouge">B + A</code>.</li>
    </ul>
  </li>
  <li>Snailfish numbers must be <strong>reduced</strong> whenever possible. To reduce a snailfish number, apply the first action in the list below that is possible. Once that has been applied, return to the top of the list and apply the first possible action from this list again. Repeat until neither action is possible.
    <ol>
      <li>The leftmost pair that is nested inside 4 pairs <strong>explodes</strong></li>
      <li>The leftmost integer that is 10 or greater <strong>splits</strong></li>
    </ol>
  </li>
  <li>To add a list of snailfish numbers, add the first and second, reduce the result, and add the reduced result to the third snailfish number in the list. Then reduce the answer, add the fourth snailfish number, reduce the answer, and so on until the list has been exhausted.</li>
</ul>

<h4 id="exploding-a-pair">Exploding a pair</h4>

<p>To explode a pair, follow the steps below. “Add” here refers to normal addition of integers, not snailfish addition of pairs.</p>

<ol>
  <li>Add the left element of the pair to the first integer to the left of the pair, if any.</li>
  <li>Add the right element of the pair to the first integer to the right of the pair, if any.</li>
  <li>Replace the exploded pair with the integer <code class="language-plaintext highlighter-rouge">0</code>.</li>
</ol>

<p><code class="language-plaintext highlighter-rouge">[[[[5,**[2,3]**],6],1]]</code> becomes <code class="language-plaintext highlighter-rouge">[[[[**5+2**,**0**],**6+3**],1]] = [[[[7,0],9],1]]</code></p>

<p>Thanks to a well-formed puzzle input, we can reliably assume that no integer will be nested more than 5 brackets deep at any stage, so we do not need a procedure for exploding a pair where one or more of the elements is another pair. All pairs that explode will be pairs of two integers.</p>

<h4 id="splitting-an-integer">Splitting an integer</h4>

<p>To split an integer greater than 9, replace it with a pair as follows:</p>

<ul>
  <li>The left element of the new pair is the original integer divided by 2 and rounded down</li>
  <li>The right element of the new pair is the original integer divided by 2 and rounded up</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">10</code> splits to <code class="language-plaintext highlighter-rouge">[5,5]</code></p>

<p><code class="language-plaintext highlighter-rouge">13</code> splits to <code class="language-plaintext highlighter-rouge">[6,7]</code></p>

<p>etc.</p>

<h4 id="magnitude">Magnitude</h4>

<p>The magnitude operation maps any reduced snailfish number to an integer. It follows the following rules:</p>

<ul>
  <li>The magnitude of an integer is equal to the integer itself</li>
  <li>The magnitude of a pair is equal to 3 times the magnitude of its left element, plus 2 times the magnitude of its right element</li>
</ul>

<h4 id="the-puzzle">The Puzzle</h4>

<p>We are given a list of snailfish numbers. In part 1, we need to add up the entire list, and calculate the magnitude of the final result. In part 2, we need to find the largest magnitude we can make by adding two distinct snailfish numbers from the list.</p>

<h4 id="my-approach">My Approach</h4>

<p>Here I really wanted to deal with snailfish numbers in a flattened form, without all this nesting.</p>

<p>To that end I convert every snailfish number into a list of tuples <code class="language-plaintext highlighter-rouge">(x, depth)</code>, one for each integer <code class="language-plaintext highlighter-rouge">x</code> inside the snailfish number. <code class="language-plaintext highlighter-rouge">depth</code> is calculated as follows: the number of <code class="language-plaintext highlighter-rouge">[</code> symbols to the left of <code class="language-plaintext highlighter-rouge">x</code>, minus the number of <code class="language-plaintext highlighter-rouge">]</code> symbols to the left of <code class="language-plaintext highlighter-rouge">x</code>.</p>

<p>The snailfish number <code class="language-plaintext highlighter-rouge">[6,[3,[12,4]]</code> becomes the list <code class="language-plaintext highlighter-rouge">[(6,1), (3,2), (12,3), (4,3)]</code></p>

<p>The snailfish number <code class="language-plaintext highlighter-rouge">[[[[5,[2,3]],6],1]]</code> becomes the list <code class="language-plaintext highlighter-rouge">[(5,4), (2,5), (3,5), (6,3),(1,2)]</code></p>

<p>Each of the operations we require can be performed on the flattened representation of the snailfish number.</p>

<h4 id="snailfish-addition-in-flattened-form">Snailfish Addition in Flattened Form</h4>

<p><strong>Snailfish addition</strong> means appending the second list to the first, then increasing all depths in the new list by 1.</p>

<p><code class="language-plaintext highlighter-rouge">[(1,3), (2,3), (3,2), (4,1)] + [(5,1), (6,1)] -&gt; [(1,4), (2,4), (3,3), (4,2),(5,2), (6,2)]</code></p>

<p>is equivalent to this sum in the original representation:</p>

<p><code class="language-plaintext highlighter-rouge">[[[1,2],3],4] + [5,6] = [[[[1,2],3],4]</code>,<code class="language-plaintext highlighter-rouge">[5,6]</code>]</p>

<h4 id="explosion-in-flattened-form">Explosion in Flattened Form</h4>

<p><strong>Exploding</strong> a pair means:</p>

<ol>
  <li>Identify the leftmost pair two consecutive integers which have a depth of 5. Call the integer values <code class="language-plaintext highlighter-rouge">a</code> and b.
    <ul>
      <li>So the list is of the form <code class="language-plaintext highlighter-rouge">[…, (a,5), (b,5), …]</code></li>
    </ul>
  </li>
  <li>Add <code class="language-plaintext highlighter-rouge">a</code> to the nearest integer to the left of the pair (if any)</li>
  <li>Add <code class="language-plaintext highlighter-rouge">b</code> to the nearest integer to the right of the pair (if any)</li>
  <li>Remove the <code class="language-plaintext highlighter-rouge">(b,5)</code> tuple from the list</li>
  <li>Replace the <code class="language-plaintext highlighter-rouge">(a,5)</code> tuple with <code class="language-plaintext highlighter-rouge">(0,4)</code>.</li>
</ol>

<p>This explosion example from above:</p>

<p><code class="language-plaintext highlighter-rouge">[[[[5,**[2,3]**],6],1]]</code> -&gt; <code class="language-plaintext highlighter-rouge">[[[[7,0],9],1]</code>]</p>

<p>Becomes the following in the flattened representation:</p>

<p><code class="language-plaintext highlighter-rouge">[(5,4), **(2,5)**, **(3,5)**, (6,3), (1,2)]</code> -&gt; <code class="language-plaintext highlighter-rouge">[(7,4), (0,4), (9,3), (1,2)]</code></p>

<h4 id="splitting-in-flattened-form">Splitting in Flattened Form</h4>

<p><strong>Splitting</strong> an integer means:</p>

<ol>
  <li>Identify the leftmost integer value in the list that is greater than 9
    <ul>
      <li>So the list is of the form [<code class="language-plaintext highlighter-rouge">…, (x,d), …]</code> where <code class="language-plaintext highlighter-rouge">x&gt;9</code> and <code class="language-plaintext highlighter-rouge">d</code> is the depth of <code class="language-plaintext highlighter-rouge">x</code>.</li>
    </ul>
  </li>
  <li>Insert the tuple <code class="language-plaintext highlighter-rouge">(ceil(x/2),d+1)</code> in the list directly after <code class="language-plaintext highlighter-rouge">(x,d)</code></li>
  <li>Replace the tuple <code class="language-plaintext highlighter-rouge">(x,d)</code> with <code class="language-plaintext highlighter-rouge">(floor(x/2), d+1)</code></li>
</ol>

<p>So <code class="language-plaintext highlighter-rouge">(10,d)</code> splits to <code class="language-plaintext highlighter-rouge">(5,d+1)</code> and <code class="language-plaintext highlighter-rouge">(5,d+1)</code></p>

<p>and <code class="language-plaintext highlighter-rouge">(13,d)</code> splits to <code class="language-plaintext highlighter-rouge">(6,d+1)</code> and <code class="language-plaintext highlighter-rouge">(7,d+1)</code></p>

<h4 id="magnitude-in-flattened-form">Magnitude in Flattened Form</h4>

<p>Finding the <strong>magnitude</strong> of a snailfish number ends up being the most complicated task in this flattened representation. My solution is as follows:</p>

<ol>
  <li>Find the pair (or pairs) of integers with the greatest depth.
    <ul>
      <li>The list would be of the form <code class="language-plaintext highlighter-rouge">[…, (L1,d_max), (R1,d_max), …, `(L2,d_max), (R2,d_max)`, `…`]</code></li>
    </ul>
  </li>
  <li>Replace each pair at maximum depth as follows:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">(L1,d_max), (R1,d_max) -&gt; (3*L1 + 2*R1, d_max - 1)</code></li>
      <li><code class="language-plaintext highlighter-rouge">(L2, d_max), (R2, d_max) -&gt; (3*L1 + 2*R2, d_max - 1)</code></li>
      <li>etc.</li>
    </ul>
  </li>
  <li>Repeat steps 1 and 2 until the list contains only two tuples <code class="language-plaintext highlighter-rouge">(x, d)</code> and <code class="language-plaintext highlighter-rouge">(y,d)</code>.</li>
  <li>Return <code class="language-plaintext highlighter-rouge">3*x + 2*y</code>.</li>
</ol>

<h3 id="python-code-2">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">ceil</span><span class="p">,</span> <span class="n">floor</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>

<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">snail_string</span><span class="p">):</span> <span class="c1">#assume no values above 9 in input
</span>    <span class="n">snail</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">snail_string</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="s">'['</span><span class="p">:</span>
            <span class="n">depth</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">char</span> <span class="o">==</span> <span class="s">']'</span><span class="p">:</span>
            <span class="n">depth</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">char</span> <span class="o">!=</span> <span class="s">','</span><span class="p">:</span>
            <span class="n">snail</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="nb">int</span><span class="p">(</span><span class="n">char</span><span class="p">),</span><span class="n">depth</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">snail</span>

<span class="k">def</span> <span class="nf">explode</span><span class="p">(</span><span class="n">snail</span><span class="p">):</span>

    <span class="n">newsnail</span> <span class="o">=</span> <span class="n">snail</span><span class="p">[:]</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">depth</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">snail</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">depth</span><span class="o">==</span><span class="mi">5</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">newsnail</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">val</span><span class="p">,</span><span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">&lt;=</span><span class="nb">len</span><span class="p">(</span><span class="n">snail</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">newsnail</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
            
            <span class="n">newsnail</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

            <span class="n">newsnail</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">depth</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    
            <span class="k">return</span> <span class="n">newsnail</span>
    
    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="n">snail</span><span class="p">):</span>
    <span class="n">newsnail</span> <span class="o">=</span> <span class="n">snail</span><span class="p">[:]</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">depth</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">snail</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">:</span>
            <span class="n">leftval</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">floor</span><span class="p">(</span><span class="n">val</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
            <span class="n">rightval</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">ceil</span><span class="p">(</span><span class="n">val</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
            <span class="n">newsnail</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">leftval</span><span class="p">,</span><span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">newsnail</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">rightval</span><span class="p">,</span><span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
            <span class="k">return</span> <span class="n">newsnail</span>
    
    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">snail1</span><span class="p">,</span> <span class="n">snail2</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">snail1</span> <span class="o">+</span> <span class="n">snail2</span>

    <span class="n">res</span><span class="o">=</span> <span class="p">[(</span><span class="n">val</span><span class="p">,</span><span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">depth</span><span class="p">)</span> <span class="ow">in</span> <span class="n">res</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">res</span>

<span class="k">def</span> <span class="nf">snail_reduce</span><span class="p">(</span><span class="n">snail</span><span class="p">):</span>
    <span class="k">while</span> <span class="n">explode</span><span class="p">(</span><span class="n">snail</span><span class="p">)</span> <span class="ow">or</span> <span class="n">split</span><span class="p">(</span><span class="n">snail</span><span class="p">):</span>
        <span class="n">ex</span> <span class="o">=</span> <span class="n">explode</span><span class="p">(</span><span class="n">snail</span><span class="p">)</span>
        <span class="n">spl</span> <span class="o">=</span> <span class="n">split</span><span class="p">(</span><span class="n">snail</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">ex</span><span class="p">:</span>
            <span class="n">snail</span> <span class="o">=</span> <span class="n">ex</span>

        <span class="k">elif</span> <span class="n">spl</span><span class="p">:</span>
            <span class="n">snail</span> <span class="o">=</span> <span class="n">spl</span>
        
    <span class="k">return</span> <span class="n">snail</span>

<span class="k">def</span> <span class="nf">add_and_snail_reduce</span><span class="p">(</span><span class="n">snail1</span><span class="p">,</span><span class="n">snail2</span><span class="p">):</span>

    <span class="n">res</span> <span class="o">=</span> <span class="n">add</span><span class="p">(</span><span class="n">snail1</span><span class="p">,</span><span class="n">snail2</span><span class="p">)</span>

    <span class="n">res</span> <span class="o">=</span> <span class="n">snail_reduce</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">res</span>

<span class="k">def</span> <span class="nf">magnitude</span><span class="p">(</span><span class="n">snail</span><span class="p">):</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">snail</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">3</span><span class="o">*</span><span class="n">snail</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">snail</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="n">max_depth</span> <span class="o">=</span> <span class="nb">max</span><span class="p">([</span><span class="n">d</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="n">snail</span><span class="p">])</span>

    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">snail</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="n">max_depth</span><span class="p">:</span>
            <span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">snail</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="n">max_depth</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">snail</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">+=</span><span class="mi">1</span> 

    <span class="k">return</span> <span class="n">magnitude</span><span class="p">(</span><span class="n">snail</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">part_one</span><span class="p">(</span><span class="n">snails</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">magnitude</span><span class="p">(</span><span class="nb">reduce</span><span class="p">(</span><span class="n">add_and_snail_reduce</span><span class="p">,</span><span class="n">snails</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">part_two</span><span class="p">(</span><span class="n">snails</span><span class="p">):</span>
    <span class="n">mags</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">snails</span><span class="p">)):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">snails</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="n">j</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="n">mag1</span> <span class="o">=</span> <span class="n">magnitude</span><span class="p">(</span><span class="n">add_and_snail_reduce</span><span class="p">(</span><span class="n">snails</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">snails</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
            <span class="n">mag2</span> <span class="o">=</span> <span class="n">magnitude</span><span class="p">(</span><span class="n">add_and_snail_reduce</span><span class="p">(</span><span class="n">snails</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">snails</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
            <span class="n">mags</span> <span class="o">+=</span> <span class="p">[</span><span class="n">mag1</span><span class="p">,</span><span class="n">mag2</span><span class="p">]</span>

    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">mags</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">snails</span> <span class="o">=</span> <span class="p">[</span><span class="n">read</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">())</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">]</span>   

<span class="k">print</span><span class="p">(</span><span class="n">part_one</span><span class="p">(</span><span class="n">snails</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">part_two</span><span class="p">(</span><span class="n">snails</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-19---beacon-scanner">Day 19 - <a href="https://adventofcode.com/2021/day/19">Beacon Scanner</a></h2>

<h3 id="thoughts-3">Thoughts</h3>

<p>This was without a doubt the trickiest puzzle so far, for me.</p>

<p>The key objects in the puzzle are <strong>scanners</strong> and <strong>beacons</strong>, floating at particular integer coordinates in a 3D underwater space. Each scanner reports the relative position (coordinates) of all the beacons within its range. A scanner does not know its own position or orientation relative to other scanners. The scanner could be rotated any multiple of 90 degrees around any of the three axes, leading to <a href="https://www.euclideanspace.com/maths/algebra/matrix/transforms/examples/index.htm">24 possible orientations</a>.</p>

<h4 id="the-rule-of-12">The Rule of 12</h4>

<p>The puzzle asserts that if scanner X can be transformed (reoriented and translated) such that it shares <strong>at least 12</strong> sets of beacon coordinates with scanner Y, then we have found the true relative position and orientation of scanner X relative to scanner Y and vice-versa.</p>

<p>This assumption rules out the possibility that we might match, say, 13 beacons from two scanners by pure luck, without having actually found the true relative position and orientation. The rule says that if 12 or more beacons coincide, we have definitely found the true position with no possibility of error.</p>

<h4 id="puzzle-goal">Puzzle Goal</h4>

<p>Our goal is to find the position and orientation of all the scanners, and then calculate the largest <a href="https://en.wikipedia.org/wiki/Taxicab_geometry">Manhattan distance</a> between any two scanners.</p>

<h4 id="my-approach-1">My Approach</h4>

<p>The approach below is my old friend brute force<strong>.</strong> Taking scanner 0 as the reference set of coordinates, the code creates a “<strong>base scanner</strong>” containing all the beacon coordinates from scanner 0.</p>

<p>Then the code iterates through the other scanners in the input. For each scanner, let’s call it scanner B, we iterate over all <a href="https://www.euclideanspace.com/maths/algebra/matrix/transforms/examples/index.htm">24 possible orientations</a> of scanner B, and then over all the possible translations (offsets) which cause at least one beacon from scanner B to align with a beacon from the base scanner.</p>

<p>During that iteration, if we find an orientation and offset that causes at least 12 beacons to align, we know we have found the true orientation and position of scanner B in the coordinate system of the base scanner. We add the (properly oriented and offset) beacon coordinates from scanner B into the base scanner, add scanner B to our list of “visited” scanners, and repeat the whole set of iterations. This continues until all the scanners have been “visited”.</p>

<p>The code keeps a list of the positions (offsets) of each new scanner once it has been translated and aligned. At the end all the Manhattan distances between pairs of scanners are calculated, and the maximum selected.</p>

<h4 id="sigs-and-perms---how-i-constructed-the-orientations">“sigs” and “perms” - How I constructed the orientations</h4>

<p>We can only rotate a scanner by multiples of 90 degrees around each of the coordinate axes. We can’t perform any reflections, or rotate it by any angle that isn’t a multiple of 90 degrees. There’s a <a href="https://www.euclideanspace.com/maths/algebra/matrix/transforms/examples/index.htm">set of rotation matrices</a> that expresses the 24 possible rotations, but my code doesn’t use rotation matrices.</p>

<p>Instead, I considered what happens to the coordinates of a beacon when the scanner is rotated.</p>

<p>The first thing that might happen, is some of the coordinates might swap sign. For example a scanner pointing “north” might measure a beacon’s x-coordinate as 52. Rotate the same scanner to point “south” and that x-coordinate would now be measured as -52.</p>

<p>These sign swaps are represented by what I call “signatures” or <strong>sigs</strong>. A sig is a tuple like (-1,1,-1) which describes which coordinates (x,y,z) will have their signs swapped. The sig (-1,1,-1) would map the beacon coordinates (-3, 5, 6) onto (3, 5, -6) and so on.</p>

<p>In addition to sign swaps, some of the coordinates might change position in the coordinate tuple. For example the coordinates (-3,5,6) might appear as (5,6,-3) to a rotated scanner. This is just a <strong>permutation</strong> of the coordinates. These are expressed as tuples (“<strong>perms</strong>”) of the indices (0,1,2) with 0 representing the original x-axis, 1 the original y-axis, and 2 the original z-axis. Turning (-3,5,6) to (5,6,-3) is achieved using the perm (1,2,0).</p>

<h4 id="an-overabundance-of-orientations">An overabundance of orientations</h4>

<p>There are 2^3^ = 8 possible sigs:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{(1,1,1), (-1,1,1), (-1,-1,1), (-1,1,-1), (-1,-1,-1), (1,-1,1), (1,-1,-1), (1,1,-1)}
</code></pre></div></div>

<p>There are 6 possible permutations of 3 axes, leading to 6 perms:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{(0,1,2), (0,2,1), (1,2,0), (1,0,2), (2,0,1), (2,1,0)}
</code></pre></div></div>

<p>Every orientation consists of applying a sig and a perm, so there are 8 x 6 = 48 possible orientations…wait a second, something has gone wrong! The problem here is that those 48 orientations include reflections! The scanners are underwater, they might have got turned around somewhat, but they have not been replaced by invaders from the Mirror Universe! Reflections are not valid for this puzzle.</p>

<h4 id="evenodd-parity">Even/Odd Parity</h4>

<p>How do we get rid of the reflections? We need to make sure that the overall parity of the reorientation is <strong>even</strong>, so that it keeps the coordinate system <a href="https://en.wikipedia.org/wiki/Right-hand_rule#:~:text=Coordinates%20are%20usually%20right%2Dhanded,the%20system%20is%20counter%2Dclockwise.">right-handed</a>. This means we are avoiding any net reflection in our reorientation.</p>

<p>An <strong>even sig</strong> contains an even number of negative elements.</p>

<p>An <strong>even perm</strong> has an even number of pairs of indices which are out of ascending order.</p>

<p>e.g. (2,0,1). Consider all 3 pairs of indices:</p>

<ul>
  <li>(2,0) out of order</li>
  <li>(0,1) in order</li>
  <li>(2,1) out of order.</li>
</ul>

<p>Two pairs are mis-ordered, so the perm is even.</p>

<p>e.g. (0,2,1).</p>

<ul>
  <li>(0,2) in order</li>
  <li>(0,1) in order,</li>
  <li>(2,1) out of order.</li>
</ul>

<p>One pair is mis-ordered, so the perm is odd.</p>

<p>A reorientation is <strong>even</strong> if it consists of an even perm and an even sig, or an odd perm and an odd sig. Otherwise the reorientation is <strong>odd</strong> and is not a physically possible reorientation of the scanner.</p>

<p>As a result we half the space of reorientation from the incorrect 48 which includes reflections, down to 24 which consist of pure rotations.</p>

<p><strong>Yes, it would probably have been easier just to use rotation matrices.</strong></p>

<h3 id="python-code-3">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">initialise</span><span class="p">():</span>
    <span class="c1">#read the input file and set up
</span>    <span class="c1">#scanners is a set of sets of beacon coordinates
</span>    <span class="c1">#perms is the set of permutations of the indices (0,1,2)
</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>

    <span class="n">scanners</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">scanner</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">if</span> <span class="s">','</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
            <span class="n">beacon</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)])</span>
            <span class="n">scanner</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">beacon</span><span class="p">)</span>
        
        <span class="k">elif</span> <span class="n">line</span> <span class="o">==</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">:</span>
            <span class="n">scanners</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">scanner</span><span class="p">)</span>
            <span class="n">scanner</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">scanners</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">scanner</span><span class="p">)</span>

    <span class="n">scanners</span> <span class="o">=</span> <span class="p">[</span><span class="nb">set</span><span class="p">(</span><span class="n">scanner</span><span class="p">)</span> <span class="k">for</span> <span class="n">scanner</span> <span class="ow">in</span> <span class="n">scanners</span><span class="p">]</span>

    <span class="n">perms</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">permutations</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)))</span>

    <span class="k">return</span> <span class="n">scanners</span><span class="p">,</span> <span class="n">perms</span>

<span class="k">def</span> <span class="nf">parity</span><span class="p">(</span><span class="n">perms</span><span class="p">):</span>
    <span class="c1">#returns a dictionary from permutations of (0,1,2) to the set of signatures (axis inversion) such that the total operation is parity preserving
</span>    <span class="c1">#for example, since the permutation (1,0,2) is odd, we must choose the odd signatures (-1,1,1), (1,-1,1),(1,1,-1) and (-1,-1,-1)}
</span>    <span class="c1"># so correct_sigs[(1,0,2)] == {(-1,1,1), (1,-1,1),(1,1,-1),(-1,-1,-1)}
</span>
    <span class="n">correct_sigs</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">perm</span> <span class="ow">in</span> <span class="n">perms</span><span class="p">:</span>
        <span class="n">parity</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">px</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">perm</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">py</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">perm</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">y</span> <span class="ow">and</span> <span class="n">px</span><span class="o">&gt;</span><span class="n">py</span><span class="p">)</span><span class="o">%</span><span class="mi">2</span>  <span class="c1">#calculate parity of the permutation
</span>

        <span class="k">if</span> <span class="n">parity</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">correct_sigs</span><span class="p">[</span><span class="n">perm</span><span class="p">]</span> <span class="o">=</span> <span class="p">{(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span>

        <span class="k">if</span> <span class="n">parity</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">correct_sigs</span><span class="p">[</span><span class="n">perm</span><span class="p">]</span> <span class="o">=</span> <span class="p">{(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span>
    
    <span class="k">return</span> <span class="n">correct_sigs</span>

<span class="n">scanners</span><span class="p">,</span> <span class="n">perms</span> <span class="o">=</span> <span class="n">initialise</span><span class="p">()</span>

<span class="n">correct_sigs</span> <span class="o">=</span> <span class="n">parity</span><span class="p">(</span><span class="n">perms</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">reorient</span><span class="p">(</span><span class="n">scanner</span><span class="p">,</span><span class="n">perm</span><span class="p">,</span><span class="n">sig</span><span class="p">):</span>
    <span class="c1">#reorients a scanner using a particular permutation and signature
</span>    <span class="c1">#returns the reoriented scanner (a new set of beacon coordinates)
</span>    <span class="n">newscanner</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">beacon</span> <span class="ow">in</span> <span class="n">scanner</span><span class="p">:</span>
        <span class="n">newbeacon</span> <span class="o">=</span> <span class="p">(</span><span class="n">beacon</span><span class="p">[</span><span class="n">perm</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">*</span><span class="n">sig</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">beacon</span><span class="p">[</span><span class="n">perm</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span><span class="o">*</span><span class="n">sig</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">beacon</span><span class="p">[</span><span class="n">perm</span><span class="p">[</span><span class="mi">2</span><span class="p">]]</span><span class="o">*</span><span class="n">sig</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
        <span class="n">newscanner</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">newbeacon</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">newscanner</span>

<span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">scanner</span><span class="p">,</span><span class="n">offset</span><span class="p">):</span>
    <span class="c1">#translates a scanner by a particular offset, where the offset is a tuple (dx,dy,dz) representing the translation vector
</span>    <span class="c1">#returns the reoriented scanner (a new set of beacon coordinates)
</span>    <span class="n">newscanner</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
    <span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">,</span><span class="n">dz</span> <span class="o">=</span> <span class="n">offset</span>

    <span class="k">for</span> <span class="n">beacon</span> <span class="ow">in</span> <span class="n">scanner</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span> <span class="o">=</span> <span class="n">beacon</span>
        <span class="n">newbeacon</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="n">dy</span><span class="p">,</span><span class="n">z</span><span class="o">+</span><span class="n">dz</span><span class="p">)</span>
        <span class="n">newscanner</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">newbeacon</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">newscanner</span>

<span class="k">def</span> <span class="nf">match12</span><span class="p">(</span><span class="n">scannerA</span><span class="p">,</span> <span class="n">scannerB</span><span class="p">):</span>
    <span class="c1">#Returns True if scannerA and scannerB have 12 or more beacon coordinates in common
</span>    <span class="c1">#otherwise returns False
</span>    <span class="n">common_points</span> <span class="o">=</span> <span class="n">scannerA</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">scannerB</span><span class="p">)</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">common_points</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">12</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    
    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">compare</span><span class="p">(</span><span class="n">scannerA</span><span class="p">,</span><span class="n">scannerB</span><span class="p">):</span>
    <span class="c1">#brute force to determine if two scanners match
</span>    <span class="c1">#check every parity preserving orientation of scanner B (permutation + signature)
</span>    <span class="c1">#and every translation (offset) of scanner B that brings a beacon from scanner B into alignment with a beacon from scanner A
</span>    <span class="c1">#if a match is found, return the offset, permutation and signature that matches the two scanners
</span>    <span class="c1">#return None if no match is found
</span>    <span class="k">for</span> <span class="n">perm</span> <span class="ow">in</span> <span class="n">perms</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">sig</span> <span class="ow">in</span> <span class="n">correct_sigs</span><span class="p">[</span><span class="n">perm</span><span class="p">]:</span>
            <span class="n">rotB</span> <span class="o">=</span> <span class="n">reorient</span><span class="p">(</span><span class="n">scannerB</span><span class="p">,</span><span class="n">perm</span><span class="p">,</span><span class="n">sig</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">beaconA</span> <span class="ow">in</span> <span class="n">scannerA</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">beaconB</span> <span class="ow">in</span> <span class="n">rotB</span><span class="p">:</span>
                    <span class="n">xa</span><span class="p">,</span><span class="n">ya</span><span class="p">,</span><span class="n">za</span> <span class="o">=</span> <span class="n">beaconA</span>
                    <span class="n">xb</span><span class="p">,</span><span class="n">yb</span><span class="p">,</span><span class="n">zb</span> <span class="o">=</span> <span class="n">beaconB</span>
                    <span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="n">xa</span><span class="o">-</span><span class="n">xb</span><span class="p">,</span><span class="n">ya</span><span class="o">-</span><span class="n">yb</span><span class="p">,</span><span class="n">za</span><span class="o">-</span><span class="n">zb</span><span class="p">)</span>
                    <span class="n">transB</span> <span class="o">=</span> <span class="n">translate</span><span class="p">(</span><span class="n">rotB</span><span class="p">,</span><span class="n">offset</span><span class="p">)</span>
                    
                    <span class="k">if</span> <span class="n">match12</span><span class="p">(</span><span class="n">scannerA</span><span class="p">,</span><span class="n">transB</span><span class="p">):</span>
                        <span class="k">return</span> <span class="n">offset</span><span class="p">,</span> <span class="n">perm</span><span class="p">,</span> <span class="n">sig</span>

                    <span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="n">xb</span><span class="o">-</span><span class="n">xa</span><span class="p">,</span><span class="n">yb</span><span class="o">-</span><span class="n">ya</span><span class="p">,</span><span class="n">zb</span><span class="o">-</span><span class="n">za</span><span class="p">)</span>
                    <span class="n">transB</span> <span class="o">=</span> <span class="n">translate</span><span class="p">(</span><span class="n">rotB</span><span class="p">,</span><span class="n">offset</span><span class="p">)</span>

                    <span class="k">if</span> <span class="n">match12</span><span class="p">(</span><span class="n">scannerA</span><span class="p">,</span><span class="n">transB</span><span class="p">):</span>
                        <span class="k">return</span> <span class="n">offset</span><span class="p">,</span> <span class="n">perm</span><span class="p">,</span> <span class="n">sig</span>



<span class="k">def</span> <span class="nf">part_two</span><span class="p">(</span><span class="n">scanners</span><span class="p">):</span>

    <span class="c1">#the "base scanner" is a set of coordinates of beacons from the point of view of scanner 0
</span>    <span class="c1">#when a new scanner is correctly aligned and translated, its beacons are added to the "base scanner" set
</span>    <span class="n">base_scanner</span> <span class="o">=</span> <span class="n">scanners</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="c1">#a list of scanners which have been incorporated into the "base scanner"
</span>    <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="c1">#list of the offsets (translation vectors) of the other scanners from scanner 0's position
</span>    <span class="n">offsets</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">visited</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">scanners</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">scanner</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">scanners</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">visited</span><span class="p">:</span>
                    <span class="k">continue</span>

                <span class="n">result</span> <span class="o">=</span> <span class="n">compare</span><span class="p">(</span><span class="n">base_scanner</span><span class="p">,</span> <span class="n">scanner</span><span class="p">)</span>
            
                <span class="k">if</span> <span class="n">result</span><span class="p">:</span>
                    <span class="n">offset</span><span class="p">,</span> <span class="n">perm</span><span class="p">,</span> <span class="n">sig</span> <span class="o">=</span> <span class="n">result</span>
                    <span class="n">offsets</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">offset</span><span class="p">)</span>
                    <span class="c1">#reorient and translate the scanner into scanner 0's coordinate system
</span>                    <span class="n">new_scanner</span> <span class="o">=</span> <span class="n">reorient</span><span class="p">(</span><span class="n">scanner</span><span class="p">,</span><span class="n">perm</span><span class="p">,</span><span class="n">sig</span><span class="p">)</span>
                    <span class="n">new_scanner</span> <span class="o">=</span> <span class="n">translate</span><span class="p">(</span><span class="n">new_scanner</span><span class="p">,</span><span class="n">offset</span><span class="p">)</span>
                    <span class="n">visited</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                    <span class="n">base_scanner</span> <span class="o">=</span> <span class="n">base_scanner</span> <span class="o">|</span> <span class="n">new_scanner</span> <span class="c1">#incorporate the scanner's beacons into the base scanner
</span>    
    <span class="c1">#calculate the manhattan distance between every pair of scanners
</span>    <span class="c1">#return the maximum manhattan distance (the puzzle solution)
</span>    <span class="n">manhattans</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">off1</span> <span class="ow">in</span> <span class="n">offsets</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">off2</span> <span class="ow">in</span> <span class="n">offsets</span><span class="p">:</span>
            <span class="n">x1</span><span class="p">,</span><span class="n">y1</span><span class="p">,</span><span class="n">z1</span> <span class="o">=</span> <span class="n">off1</span>
            <span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">,</span><span class="n">z2</span> <span class="o">=</span> <span class="n">off2</span>
            <span class="n">manhattans</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x2</span><span class="o">-</span><span class="n">x1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="n">y2</span><span class="o">-</span><span class="n">y1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">abs</span><span class="p">(</span><span class="n">z2</span><span class="o">-</span><span class="n">z1</span><span class="p">))</span>
                
    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">manhattans</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">part_two</span><span class="p">(</span><span class="n">scanners</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-20---trench-map">Day 20 - <a href="https://adventofcode.com/2021/day/20">Trench Map</a></h2>

<h3 id="thoughts-4">Thoughts</h3>

<p>A breath of fresh air after a challenging Day 19, this puzzle asks us to apply an “image enhancement” algorithm to a infinite grid of pixels. Each pixel is either light ( # ) or dark ( . ). Initially, there’s an input image made up of light and dark pixels, and all the other pixels on the infinite grid are dark.</p>

<p>The algorithm is a kind of cellular automaton process, not a million miles away from Conway’s Game of Life which was such a popular theme in Advent of Code 2020.</p>

<p>For each pixel in the image, consider the 3x3 grid of pixels with the target pixel at the centre. Starting from the top-left and reading right across each row, convert the 3x3 grid into a 9-digit binary number by treating light pixels as 1s and dark pixels as 0s. The resulting number gives an index in a 512-bit “algorithm string”, the character at that index will either be # or . , indicating the new state of the original target pixel.</p>

<p>This is repeated for every pixel in the original image to produce a new image.</p>

<p>The fact that the image lives on an infinite grid turns out to be relevant, which is the real trick on an otherwise simple procedural puzzle. Consider a dark pixel far away from any light pixels. This pixel and all its neighbours are dark, so the 3x3 grid with this pixel at the centre converts to the binary number 000000000, i.e. zero. But the algorithm string starts with #, so the new state of that dark pixel will be light.</p>

<p>So the whole infinite grid, apart from a small portion around the original image, will be lit up after the first iteration. Dealing with this is the cause of most of the puzzling around this puzzle, until you notice that not only is the first character of the algorithm string #, but the final character is . This turns out to be true for all inputs to this puzzle, which is a great advantage!</p>

<p>What this means is that any light pixel surrounded by light pixels will turn dark on the next iteration. It turns out, then, that most of the infinite grid will just oscillate between being dark and light. The only interesting part is an ever-growing region of the grid, starting with just the original input image. Each iteration, the interesting region grows by one pixel in each dimension. Outside the bounds of the interesting region, the pixels flip from dark to light and back each iteration.</p>

<p>In my solution this is handled by a variable <code class="language-plaintext highlighter-rouge">oob</code> (out of bounds). Initially, <code class="language-plaintext highlighter-rouge">oob == '0'</code> (dark), then it flips to <code class="language-plaintext highlighter-rouge">'1'</code> (light) and so on. Whenever the <code class="language-plaintext highlighter-rouge">update</code> function tries to get the value of a pixel outside the bounds of the current image, it will get the current value of <code class="language-plaintext highlighter-rouge">oob</code>.</p>

<p>The puzzle answer is the number of light pixels in the infinite grid after 50 iterations. Since 50 is even, most of the infinite grid will be dark at this point, so there is a finite answer!</p>

<h3 id="python-code-4">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>

<span class="n">algo</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">strip</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">'.'</span><span class="p">,</span><span class="s">'0'</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'#'</span><span class="p">,</span><span class="s">'1'</span><span class="p">)</span> <span class="c1">#algorithm string
</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">strip</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">'.'</span><span class="p">,</span><span class="s">'0'</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'#'</span><span class="p">,</span><span class="s">'1'</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">:]]</span> <span class="c1">#image grid as list of strings
</span>
<span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">image</span><span class="p">,</span> <span class="n">algo</span><span class="p">,</span> <span class="n">oob</span><span class="p">):</span>
    <span class="c1">#calculate the new value of a pixel based on its neighbours
</span>    <span class="c1">#and the algorithm
</span>
    <span class="n">xmax</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span>
    <span class="n">ymax</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">image</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>

    <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">point</span>
    <span class="n">steps</span> <span class="o">=</span> <span class="p">[(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)]</span>

    <span class="n">idx</span> <span class="o">=</span> <span class="s">''</span>

    <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">steps</span><span class="p">:</span>
        <span class="p">(</span><span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">)</span> <span class="o">=</span> <span class="n">step</span>
        
        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="o">+</span><span class="n">dx</span> <span class="o">&lt;=</span> <span class="n">xmax</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">y</span><span class="o">+</span><span class="n">dy</span> <span class="o">&lt;=</span> <span class="n">ymax</span><span class="p">:</span>
            <span class="c1">#if in the bounds of the grid, return the value
</span>            <span class="n">idx</span> <span class="o">+=</span> <span class="n">image</span><span class="p">[</span><span class="n">y</span><span class="o">+</span><span class="n">dy</span><span class="p">][</span><span class="n">x</span><span class="o">+</span><span class="n">dx</span><span class="p">]</span>
        
        <span class="k">else</span><span class="p">:</span>
            <span class="c1">#if out of bounds, return current value of oob
</span>            <span class="n">idx</span> <span class="o">+=</span> <span class="n">oob</span>
    
    <span class="n">idx</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">algo</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">apply_algo</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="n">algo</span><span class="p">,</span> <span class="n">oob</span><span class="p">):</span>
    <span class="c1">#apply the enhancement algorithm once to the image grid
</span>    <span class="c1">#return the new image grid
</span>    
    <span class="n">image2</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">xmax</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span>
    <span class="n">ymax</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">image</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>

    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">ymax</span><span class="o">+</span><span class="mi">2</span><span class="p">):</span>
            <span class="n">new_row</span> <span class="o">=</span> <span class="s">''</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">xmax</span><span class="o">+</span><span class="mi">2</span><span class="p">):</span>
                <span class="n">new_row</span> <span class="o">+=</span> <span class="n">update</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">),</span> <span class="n">image</span><span class="p">,</span> <span class="n">algo</span><span class="p">,</span> <span class="n">oob</span><span class="p">)</span>

            <span class="n">image2</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_row</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">image2</span>

<span class="k">def</span> <span class="nf">print_image</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
    <span class="c1">#helper function to print image
</span>    <span class="c1">#only used for debugging
</span>    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">image</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">part_one</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="n">algo</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
    <span class="c1">#apply the enhancement algorithm n times to the initial image grid
</span>
    <span class="n">oob</span> <span class="o">=</span> <span class="s">'0'</span>

    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="c1">#apply the enhancement algorithm
</span>        <span class="n">image</span> <span class="o">=</span> <span class="n">apply_algo</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="n">algo</span><span class="p">,</span><span class="n">oob</span><span class="p">)</span>

        <span class="c1">#update the value of oob
</span>        <span class="k">if</span> <span class="n">algo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="s">'1'</span> <span class="ow">and</span> <span class="n">algo</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="s">'0'</span> <span class="ow">and</span> <span class="n">oob</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">:</span>
            <span class="n">oob</span> <span class="o">=</span> <span class="s">'1'</span>
        <span class="k">elif</span> <span class="n">algo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="s">'1'</span> <span class="ow">and</span> <span class="n">algo</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="s">'0'</span> <span class="ow">and</span> <span class="n">oob</span> <span class="o">==</span> <span class="s">'1'</span><span class="p">:</span>
            <span class="n">oob</span> <span class="o">=</span> <span class="s">'0'</span>

    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">image</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">row</span><span class="p">:</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">count</span><span class="p">,</span> <span class="n">image</span>

<span class="n">pix_sum</span><span class="p">,</span> <span class="n">img</span> <span class="o">=</span> <span class="n">part_one</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="n">algo</span><span class="p">,</span><span class="mi">50</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pix_sum</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="advent-of-code" /><category term="aoc" /><category term="coding" /><category term="python" /><summary type="html"><![CDATA[o Advent of Code 2021 Days 16-20]]></summary></entry><entry><title type="html">Advent Of Code 2021 Days 11-15</title><link href="http://localhost:4000/2022/03/01/advent-of-code-2021-days-11-15.html" rel="alternate" type="text/html" title="Advent Of Code 2021 Days 11-15" /><published>2022-03-01T13:45:39+00:00</published><updated>2022-03-01T13:45:39+00:00</updated><id>http://localhost:4000/2022/03/01/advent-of-code-2021-days-11-15</id><content type="html" xml:base="http://localhost:4000/2022/03/01/advent-of-code-2021-days-11-15.html"><![CDATA[<h1 id="advent-of-code-2021-days-11-15">Advent of Code 2021 Days 11-15</h1>

<p><img src="/images/pexels-photo-6211095.jpeg" alt="christmas tree decorated with baubles and garland" /></p>

<p>Welcome back to some more <a href="http://adventofcode.com/2021/">Advent of Code 2021</a>!</p>

<p>These posts will be quite brief, just a few thoughts on each puzzle and the Python 3 code I used to solve it. All code on Github <a href="https://git.io/JmAvJ">here</a>. The code below is for Part 2 of each day, which often incorporates Part 1 in some way.</p>

<h2 id="day-11---dumbo-octopus">Day 11 - <a href="https://adventofcode.com/2021/day/11">Dumbo Octopus</a></h2>

<h3 id="thoughts">Thoughts</h3>

<p>We’re looking at a grid-based puzzle about bioluminescent octopuses. There’s an octopus at every point on a rectangular grid, and each octopus has an integer <strong>energy level</strong>, initially between 0 and 9.</p>

<p>Each iteration, the energy level of every octopus increases by 1. An octopus that reaches an energy level above 9 <strong>flashes</strong>, increasing the energy level of all adjacent octopuses by 1. This can lead to a chain reaction causing a neighbour’s energy to go above 9, causing another flash and so on. Each octopus can only flash once per iteration.</p>

<p>At the end of the iteration, every octopus which has flashed once is reset to an energy level of 0, and the next iteration begins.</p>

<p>The puzzle asks us to find the number of turns before the octopuses have synchronised, with every octopus flashing at once. This can be found by looking for a state where every octopus in the grid has energy 0, meaning they have all just flashed.</p>

<h3 id="python-code">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>

<span class="c1">#initialise a dict from tuples (i,j) to energy level of the point at coords (i,j)
</span><span class="n">grid</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
        <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

<span class="n">rows</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">cols</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">neighbour_coords</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1">#returns a list of coords of points adjacent to (i,j) in the grid
</span>    <span class="n">coords_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">steps</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    
    <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">steps</span><span class="p">:</span>
        <span class="p">(</span><span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">)</span> <span class="o">=</span> <span class="n">step</span>
        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">+</span><span class="n">dx</span> <span class="o">&lt;</span> <span class="n">cols</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="o">+</span><span class="n">dy</span> <span class="o">&lt;</span> <span class="n">rows</span><span class="p">:</span> 
            <span class="n">coords_list</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="n">dy</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">coords_list</span>

<span class="k">def</span> <span class="nf">nb_dict</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1">#populates a dictionary from each point in the grid to a list of neighbouring points
</span>    <span class="n">nbdict</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">.</span><span class="n">copy</span><span class="p">():</span>
        <span class="n">nbdict</span><span class="p">[</span><span class="n">point</span><span class="p">]</span> <span class="o">=</span> <span class="n">neighbour_coords</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">point</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">grid</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">nbdict</span>

<span class="k">def</span> <span class="nf">flash</span><span class="p">(</span><span class="n">point</span><span class="p">,</span><span class="n">grid</span><span class="p">,</span><span class="n">flashed_points</span><span class="p">,</span><span class="n">nbdict</span><span class="p">):</span>
    <span class="c1">#causes a point to flash, and recursively flashes any neighbours whose energy goes above 9
</span>
    <span class="n">flashed_points</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">point</span><span class="p">)</span> <span class="c1">#keep track of points which have already flashed
</span>
    <span class="n">nbs</span> <span class="o">=</span> <span class="n">nbdict</span><span class="p">[</span><span class="n">point</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">nb</span> <span class="ow">in</span> <span class="n">nbs</span><span class="p">:</span>
        <span class="n">grid</span><span class="p">[</span><span class="n">nb</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">for</span> <span class="n">nb</span> <span class="ow">in</span> <span class="n">nbs</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">nb</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">9</span> <span class="ow">and</span> <span class="n">nb</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">flashed_points</span><span class="p">:</span> <span class="c1">#only flash points that have not flashed this iteration
</span>            <span class="n">grid</span><span class="p">,</span> <span class="n">flashed_points</span> <span class="o">=</span> <span class="n">flash</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span> <span class="n">grid</span><span class="p">,</span> <span class="n">flashed_points</span><span class="p">,</span> <span class="n">nbdict</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">grid</span><span class="p">,</span><span class="n">flashed_points</span>

<span class="k">def</span> <span class="nf">advance_step</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">nbdict</span><span class="p">,</span> <span class="n">flash_sum</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">:</span>
        <span class="n">grid</span><span class="p">[</span><span class="n">point</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="n">flashed_points</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">point</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">9</span> <span class="ow">and</span> <span class="n">point</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">flashed_points</span><span class="p">:</span> <span class="c1">#only flash points that have not flashed this iteration
</span>            <span class="n">grid</span><span class="p">,</span> <span class="n">flashed_points</span> <span class="o">=</span> <span class="n">flash</span><span class="p">(</span><span class="n">point</span><span class="p">,</span><span class="n">grid</span><span class="p">,</span> <span class="n">flashed_points</span><span class="p">,</span> <span class="n">nbdict</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">point</span> <span class="ow">in</span> <span class="n">flashed_points</span><span class="p">:</span>
        <span class="n">grid</span><span class="p">[</span><span class="n">point</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>   <span class="c1">#reset points which have flashed to 0 energy
</span>
    <span class="n">flash_sum</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">flashed_points</span><span class="p">)</span> <span class="c1">#count flashed points
</span>    
    <span class="k">return</span> <span class="n">flash_sum</span>

<span class="k">def</span> <span class="nf">advance_until_synched</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="n">nbdict</span> <span class="o">=</span> <span class="n">nb_dict</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>
    <span class="n">flash_sum</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">i</span><span class="o">=</span><span class="mi">0</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">advance_step</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">nbdict</span><span class="p">,</span><span class="n">flash_sum</span><span class="p">)</span>
        <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

        <span class="k">if</span> <span class="nb">max</span><span class="p">(</span><span class="n">grid</span><span class="p">.</span><span class="n">values</span><span class="p">())</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c1">#when all points flash
</span>            <span class="k">return</span> <span class="n">i</span>

<span class="k">print</span><span class="p">(</span><span class="n">advance_until_synched</span><span class="p">(</span><span class="n">grid</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-12---passage-pathing">Day 12 - <a href="https://adventofcode.com/2021/day/12">Passage Pathing</a></h2>

<h3 id="thoughts-1">Thoughts</h3>

<p>Graph time! An underwater cave system can be represented as an unweighted undirected graph with four types of node. We have the <strong>start</strong> node, the <strong>end</strong> node, <strong>big caves</strong> represented by uppercase letters, and <strong>small caves</strong> represented by lowercase letters.</p>

<p>The puzzle is to find the number of possible paths from the start node to the end node. We are allowed to pass through each small cave only once on a given path, but we can visit big caves as many times as we like. In part 2 we are offered an exception to this rule - we can visit <em>exactly one</em> small cave <em>exactly twice</em>.</p>

<p>In the code below, the paths are found by a recursive <a href="https://en.wikipedia.org/wiki/Depth-first_search">depth-first search</a> (DFS).</p>

<p>The function <code class="language-plaintext highlighter-rouge">dfs</code> adds the current node to the current path. If the current node is the target node, a copy of the current path is appended to the <code class="language-plaintext highlighter-rouge">paths</code> variable. Otherwise, the function is called recursively for each of the valid neighbouring nodes.</p>

<p>The ability to visit a single small cave twice is handled by the Boolean <code class="language-plaintext highlighter-rouge">revisits</code> , which starts with the value <code class="language-plaintext highlighter-rouge">True</code>. While <code class="language-plaintext highlighter-rouge">revisits</code> is <code class="language-plaintext highlighter-rouge">True</code> , the function treats all neighbours except the start node as valid. When the function visits a small cave that is already in the current path, it toggles <code class="language-plaintext highlighter-rouge">revisits</code> to <code class="language-plaintext highlighter-rouge">False</code>. For that particular path (and all its child paths in the recursion), small caves that have been visited are no longer valid neighbours.</p>

<p>The <code class="language-plaintext highlighter-rouge">revisits</code> Boolean is implemented as an argument of the <code class="language-plaintext highlighter-rouge">dfs</code> function, so that the appropriate value can be passed down into recursive function calls.</p>

<h3 id="python-code-1">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>

<span class="n">graph</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="p">[])</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'-'</span><span class="p">)</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">graph</span><span class="p">[</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">paths</span><span class="p">,</span> <span class="n">revisits</span><span class="p">):</span>
    
    <span class="k">if</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">path</span> <span class="ow">and</span> <span class="n">node</span><span class="p">.</span><span class="n">islower</span><span class="p">():</span>
        <span class="n">revisits</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="n">path</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
        <span class="n">paths</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">[:])</span> <span class="c1">#append a copy of the current path, not a pointer to the path variable which keeps changing
</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">neighbour</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>

            <span class="k">if</span> <span class="n">revisits</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">valid_neighbour</span> <span class="o">=</span> <span class="ow">not</span> <span class="p">(</span><span class="n">neighbour</span> <span class="o">==</span> <span class="s">'start'</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">valid_neighbour</span> <span class="o">=</span> <span class="ow">not</span> <span class="p">(</span><span class="n">neighbour</span> <span class="ow">in</span> <span class="n">path</span> <span class="ow">and</span> <span class="n">neighbour</span><span class="p">.</span><span class="n">islower</span><span class="p">())</span>

            <span class="k">if</span> <span class="n">valid_neighbour</span><span class="p">:</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="n">neighbour</span><span class="p">,</span><span class="n">target</span><span class="p">,</span><span class="n">path</span><span class="p">,</span> <span class="n">paths</span><span class="p">,</span> <span class="n">revisits</span><span class="p">)</span>

    <span class="c1">#we are using the same path variable for all the recursive calls
</span>    <span class="c1">#when a function call completes, we want to leave the path the way we found it
</span>    <span class="c1">#so remove the node we appended above
</span>    <span class="n">path</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">paths</span>

<span class="k">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span><span class="s">'start'</span><span class="p">,</span><span class="s">'end'</span><span class="p">,[],[],</span> <span class="bp">True</span><span class="p">)))</span>
</code></pre></div></div>

<h2 id="day-13---transparent-origami">Day 13 - <a href="https://adventofcode.com/2021/day/13">Transparent Origami</a></h2>

<h3 id="thoughts-2">Thoughts</h3>

<p>We are given the coordinates of a set of dots on a sheet of transparent paper, along with a series of horizontal (y=constant) and vertical (x=constant) lines to fold the sheet along. We are told that none of the dots lie exactly on a fold line. The way the folds are performed, and the fact that none of the dots lie on any fold line, results in the following facts:</p>

<p>A fold in the line <code class="language-plaintext highlighter-rouge">x=p</code> sends each point <code class="language-plaintext highlighter-rouge">(x,y)</code> where <code class="language-plaintext highlighter-rouge">x&gt;p</code> to <code class="language-plaintext highlighter-rouge">(2p-x, y)</code>.</p>

<p>A fold in the line <code class="language-plaintext highlighter-rouge">y=q</code> sends each point <code class="language-plaintext highlighter-rouge">(x,y)</code> where <code class="language-plaintext highlighter-rouge">y&gt;q</code> to <code class="language-plaintext highlighter-rouge">(x, 2q-y)</code>.</p>

<p>Since the variable <code class="language-plaintext highlighter-rouge">dots</code> (and its temporary copy <code class="language-plaintext highlighter-rouge">newdots</code>) is implemented as a <em>set</em>, any dots which exactly overlaps with a previous dot will be ignored. We only care about whether a given point has a dot present or not, we are not counting how many dots land on that position. Making a set a natural choice to avoid duplicates.</p>

<p>The goal is to find the pattern of the dots after all the fold instructions have been executed. When printed, this pattern resembles a string of capital letters which is the final puzzle solution. Many participants included optical character recognition (OCR) to output the final solution, however I was content with simply printing the pattern to the console and using the OCR device attached to my eyeballs:</p>

<p><img src="/images/origami.jpg" alt="" /></p>

<h3 id="python-code-2">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>

<span class="n">dots</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

<span class="n">folds</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>

    <span class="k">if</span> <span class="s">','</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
        <span class="c1">#populate a set of tuples (x,y) with the coordinates of each dot on the paper
</span>        <span class="c1">#because it is a set, any dot that exactly overlaps with a previous dot will be ignored
</span>        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">","</span><span class="p">)</span>
        <span class="n">dots</span><span class="p">.</span><span class="n">add</span><span class="p">((</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    
    <span class="k">if</span> <span class="s">'='</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
        <span class="c1">#populate a list of fold instructions, for example ('x',100) would mean fold along the line x=100
</span>        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'fold along '</span><span class="p">,</span><span class="s">''</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">"="</span><span class="p">)</span> 
        <span class="n">folds</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>

<span class="k">def</span> <span class="nf">perform_fold</span><span class="p">(</span><span class="n">dots</span><span class="p">,</span><span class="n">fold</span><span class="p">):</span>

    <span class="n">newdots</span> <span class="o">=</span> <span class="n">dots</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">fold</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'x'</span><span class="p">:</span>
        <span class="c1">#perform a fold along a vertical line x=fold[1]
</span>        <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="n">dots</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">fold</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">newdots</span><span class="p">.</span><span class="n">remove</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
                <span class="n">newdots</span><span class="p">.</span><span class="n">add</span><span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="n">fold</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
    
    <span class="k">if</span> <span class="n">fold</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'y'</span><span class="p">:</span>
            <span class="c1">#perform a fold on a horizontal line y=fold[1]
</span>            <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="n">dots</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">fold</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                    <span class="n">newdots</span><span class="p">.</span><span class="n">remove</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span>
                    <span class="n">newdots</span><span class="p">.</span><span class="n">add</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="n">fold</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">y</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">newdots</span>

<span class="k">def</span> <span class="nf">final_dots</span><span class="p">(</span><span class="n">dots</span><span class="p">,</span> <span class="n">folds</span><span class="p">):</span>
    <span class="c1">#perform all the folds in the input
</span>    <span class="k">for</span> <span class="n">fold</span> <span class="ow">in</span> <span class="n">folds</span><span class="p">:</span>
        <span class="n">dots</span> <span class="o">=</span> <span class="n">perform_fold</span><span class="p">(</span><span class="n">dots</span><span class="p">,</span><span class="n">fold</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">dots</span>

<span class="k">def</span> <span class="nf">print_dots</span><span class="p">(</span><span class="n">dots</span><span class="p">):</span>
    <span class="c1">#print the final pattern of dots so that the puzzle solution
</span>    <span class="c1">#can be read from the console
</span>    <span class="n">max_x</span> <span class="o">=</span> <span class="nb">max</span><span class="p">([</span><span class="n">dot</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">dot</span> <span class="ow">in</span> <span class="n">dots</span><span class="p">])</span>
    <span class="n">max_y</span> <span class="o">=</span> <span class="nb">max</span><span class="p">([</span><span class="n">dot</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">dot</span> <span class="ow">in</span> <span class="n">dots</span><span class="p">])</span>

    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_y</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">output</span> <span class="o">=</span> <span class="s">''</span>

        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_x</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="n">dots</span><span class="p">:</span>
                <span class="n">output</span> <span class="o">+=</span> <span class="s">'█'</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">output</span> <span class="o">+=</span> <span class="s">' '</span>
        
        <span class="k">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

<span class="n">end_state</span> <span class="o">=</span> <span class="n">final_dots</span><span class="p">(</span><span class="n">dots</span><span class="p">,</span><span class="n">folds</span><span class="p">)</span>

<span class="n">print_dots</span><span class="p">(</span><span class="n">end_state</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="day-14---extended-polymerization">Day 14 - <a href="https://adventofcode.com/2021/day/14">Extended Polymerization</a></h2>

<h3 id="thoughts-3">Thoughts</h3>

<p>A polymer is represented by a sequence of capital letters, e.g. “NNCH”.</p>

<p>The polymer expands according to a list of <strong>pair insertion rules</strong> provided in the input. These rules are applied simultaneously on each iteration. For example, the rule “NC -&gt; B” means that B should be inserted between N and C, i.e. any occurrences of the pair NC in the polymer will be replaced by NBC.</p>

<p>The puzzle warns us - “<em>this polymer grows quickly</em>”. And indeed it does. If modelled as a string, the polymer increases exponentially in size, similar to the Lanternfish puzzle on Day 6. The puzzle, however, only requires us to find the difference in frequency between the most common element (letter) in the polymer and the least common. In part 1 we are asked to find this quantity after 10 iterations, in part 2 we need to apply 40 iterations.</p>

<p>The needful things to track are the frequency of each <em>pair</em> in the polymer, and the frequency of each individual element. In fact the latter could be calculated from the former fairly easily, but I have chosen to keep track of it throughout in the implementation below.</p>

<p>The polymer NNCH would be represented by the dictionary <code class="language-plaintext highlighter-rouge">elements=={N:2, C:1, H:1}</code> and the dictionary <code class="language-plaintext highlighter-rouge">pairs=={'NN':1,'NC':1,'CH':1}</code>. This way the insertion rules can be followed without keeping track of the entire polymer.</p>

<p>After 10 iterations, the polymer from my input contained nearly twenty thousand elements - nothing dramatic! However after 40 iterations it contained more than twenty <em>trillion</em> elements, amply demonstrating the need to find something more efficient than a string representation of the entire polymer.</p>

<h3 id="python-code-3">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>

<span class="n">polymer</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="s">''</span><span class="p">)</span>

<span class="n">rules</span> <span class="o">=</span> <span class="p">[</span><span class="nb">tuple</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="s">''</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">' -&gt; '</span><span class="p">,</span><span class="s">''</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">:]]</span>

<span class="k">def</span> <span class="nf">initialise</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>

    <span class="n">polymer</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="s">''</span><span class="p">)</span>

    <span class="n">rules</span> <span class="o">=</span> <span class="p">[</span><span class="nb">tuple</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">,</span><span class="s">''</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">' -&gt; '</span><span class="p">,</span><span class="s">''</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">:]]</span> <span class="c1">#AB -&gt; N  becomes (A,B,N)
</span>
    <span class="n">elements</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>

    <span class="n">pairs</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">polymer</span><span class="p">,</span><span class="n">polymer</span><span class="p">[</span><span class="mi">1</span><span class="p">:]):</span>
        <span class="n">elements</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">pairs</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)]</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="n">elements</span><span class="p">[</span><span class="n">polymer</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">+=</span><span class="mi">1</span> <span class="c1">#the last element in the zip object above will be (polymer[n-1],polymer[n]) so the last element won't be counted
</span>    
    <span class="k">return</span> <span class="n">elements</span><span class="p">,</span> <span class="n">pairs</span><span class="p">,</span> <span class="n">rules</span>

<span class="k">def</span> <span class="nf">apply_rules</span><span class="p">(</span><span class="n">rules</span><span class="p">,</span> <span class="n">elements</span><span class="p">,</span> <span class="n">pairs</span><span class="p">):</span>
    
    <span class="n">newelements</span> <span class="o">=</span> <span class="n">elements</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">newpairs</span> <span class="o">=</span> <span class="n">pairs</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">rule</span> <span class="ow">in</span> <span class="n">rules</span><span class="p">:</span>
        <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">)</span> <span class="o">=</span> <span class="n">rule</span>

        <span class="n">count</span> <span class="o">=</span> <span class="n">pairs</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)]</span>

        <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">newpairs</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)]</span> <span class="o">-=</span> <span class="n">count</span> <span class="c1">#pairs are removed when new char inserted
</span>
            <span class="n">newelements</span><span class="p">[</span><span class="n">z</span><span class="p">]</span> <span class="o">+=</span> <span class="n">count</span> <span class="c1">#new char inserted for each pair
</span>            <span class="n">newpairs</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span><span class="n">z</span><span class="p">)]</span> <span class="o">+=</span> <span class="n">count</span> <span class="c1">#new pair created for each pair
</span>            <span class="n">newpairs</span><span class="p">[(</span><span class="n">z</span><span class="p">,</span><span class="n">y</span><span class="p">)]</span> <span class="o">+=</span> <span class="n">count</span> <span class="c1">#new pair created for each pair
</span>    
    <span class="k">return</span> <span class="n">newelements</span><span class="p">,</span> <span class="n">newpairs</span>

<span class="k">def</span> <span class="nf">apply_rules_n_times</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">rules</span><span class="p">,</span> <span class="n">elements</span><span class="p">,</span><span class="n">pairs</span><span class="p">):</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">elements</span><span class="p">,</span> <span class="n">pairs</span> <span class="o">=</span> <span class="n">apply_rules</span><span class="p">(</span><span class="n">rules</span><span class="p">,</span> <span class="n">elements</span><span class="p">,</span> <span class="n">pairs</span><span class="p">)</span>

    <span class="n">freqs</span> <span class="o">=</span> <span class="n">elements</span><span class="p">.</span><span class="n">values</span><span class="p">()</span>

    <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">freqs</span><span class="p">)</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">freqs</span><span class="p">)</span>

<span class="n">elements</span><span class="p">,</span> <span class="n">pairs</span><span class="p">,</span> <span class="n">rules</span> <span class="o">=</span> <span class="n">initialise</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">apply_rules_n_times</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">rules</span><span class="p">,</span><span class="n">elements</span><span class="p">,</span><span class="n">pairs</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">apply_rules_n_times</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="n">rules</span><span class="p">,</span><span class="n">elements</span><span class="p">,</span><span class="n">pairs</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-15---chiton">Day 15 - <a href="https://adventofcode.com/2021/day/15">Chiton</a></h2>

<h3 id="thoughts-4">Thoughts</h3>

<p>I’ve spent many hours with <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra’s algorithm</a> - mainly in the form of teaching it to A-Level Maths students, who (unaccountably) need to be able to carry out the algorithm with pencil and paper. Here I was given a nice opportunity to code the algorithm in Python using a <a href="https://www.geeksforgeeks.org/priority-queue-in-python/">PriorityQueue</a>.</p>

<p>The puzzle is based on a grid of integers called “risk levels”. The goal is to find the path from the top left to the bottom right, with no diagonal steps, that minimises the sum of the risk levels you pass over. This is a very simple case for Dijkstra.</p>

<p>The added complexity in part 2 is that the puzzle input turns out not to show the whole grid. The true grid is five times as large in both dimensions. The original tile is repeated right and downwards, but each time it is repeated, the risk level of each point in the new copy is increased by 1.</p>

<p>After a bit of contemplation, I figured out that the risk level at coordinates <code class="language-plaintext highlighter-rouge">(x,y)</code> in the enlarged grid is given by:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">risk_level</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[(</span><span class="n">x</span><span class="o">%</span><span class="n">x_len</span><span class="p">,</span><span class="n">y</span><span class="o">%</span><span class="n">y_len</span><span class="p">)]</span> <span class="o">+</span> <span class="n">x</span><span class="o">//</span><span class="n">x_len</span> <span class="o">+</span> <span class="n">y</span><span class="o">//</span><span class="n">y_len</span>
</code></pre></div></div>

<p>Where <code class="language-plaintext highlighter-rouge">grid</code> is a dictionary from coordinate tuples to the values in the original smaller grid.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">x_len</code> is the x dimension of the original grid.</li>
  <li><code class="language-plaintext highlighter-rouge">y_len</code> is the y dimension of the original grid.</li>
  <li><code class="language-plaintext highlighter-rouge">a%b</code> is the <strong>modulo</strong> operation, returning the remainder when <code class="language-plaintext highlighter-rouge">a</code> is divided by <code class="language-plaintext highlighter-rouge">b</code>.</li>
  <li>a//b is the <strong>floor division</strong> operation, returning the integer part of the quotient when a is divided by b.</li>
</ul>

<p>However the puzzle also states that risk levels above 9 wrap back around to 1, requiring the following adjustment:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">risk_level</span> <span class="o">=</span> <span class="p">(</span><span class="n">risk_level</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<p>With that dealt with, the remainder of the code is a very standard implementation of <a href="https://brilliant.org/wiki/dijkstras-short-path-finder/">Dijkstra’s algorithm</a> using a queue of nodes to be visited, prioritised by the current shortest distance from the start node to that node.</p>

<h3 id="python-code-4">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">from</span> <span class="nn">queue</span> <span class="kn">import</span> <span class="n">PriorityQueue</span>
<span class="kn">import</span> <span class="nn">math</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">initialise</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="c1">#set up the initial grid, before the enlargement
</span>    <span class="n">grid</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="n">visit</span> <span class="o">=</span> <span class="n">PriorityQueue</span><span class="p">()</span>
    <span class="n">visit</span><span class="p">.</span><span class="n">put</span><span class="p">((</span><span class="mi">0</span><span class="p">,(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)))</span>

    <span class="n">distance</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">math</span><span class="p">.</span><span class="n">inf</span><span class="p">)</span>
    <span class="n">distance</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="n">target</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">grid</span><span class="p">,</span><span class="n">visit</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span> <span class="n">target</span>

<span class="k">def</span> <span class="nf">neighbour_coords</span><span class="p">(</span><span class="n">point</span><span class="p">,</span><span class="n">grid</span><span class="p">):</span>
<span class="c1">#returns a list of coords of points adjacent to (i,j) in the grid
</span>    <span class="n">coords_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">steps</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
        
    <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">steps</span><span class="p">:</span>
        <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">point</span>
        <span class="p">(</span><span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">)</span> <span class="o">=</span> <span class="n">step</span>
        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">+</span><span class="n">dx</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="o">+</span><span class="n">dy</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">coords_list</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="n">dy</span><span class="p">))</span>
        
    <span class="k">return</span> <span class="n">coords_list</span>

<span class="k">def</span> <span class="nf">get_node_value</span><span class="p">(</span><span class="n">point</span><span class="p">,</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1">#use modular arithmetic to get the value of a node at any point in the enlarged grid
</span>    <span class="c1">#by referencing the initial grid (pre-enlargement)
</span>    <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">point</span>
    <span class="n">x_len</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">y_len</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="n">value</span> <span class="o">=</span> <span class="n">grid</span><span class="p">[(</span><span class="n">x</span><span class="o">%</span><span class="n">x_len</span><span class="p">,</span><span class="n">y</span><span class="o">%</span><span class="n">y_len</span><span class="p">)]</span> <span class="o">+</span> <span class="n">x</span><span class="o">//</span><span class="n">x_len</span> <span class="o">+</span> <span class="n">y</span><span class="o">//</span><span class="n">y_len</span>

    <span class="k">return</span> <span class="p">(</span><span class="n">value</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span><span class="n">visit</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span><span class="n">target</span><span class="p">):</span>

    <span class="k">while</span> <span class="ow">not</span> <span class="n">visit</span><span class="p">.</span><span class="n">empty</span><span class="p">():</span>
        <span class="p">(</span><span class="n">d</span><span class="p">,(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">))</span> <span class="o">=</span> <span class="n">visit</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>

        <span class="k">for</span> <span class="n">nb</span> <span class="ow">in</span> <span class="n">neighbour_coords</span><span class="p">((</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">),</span> <span class="n">grid</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">d</span> <span class="o">+</span> <span class="n">get_node_value</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span><span class="n">grid</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">[</span><span class="n">nb</span><span class="p">]:</span>
                <span class="n">distance</span><span class="p">[</span><span class="n">nb</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span> <span class="o">+</span> <span class="n">get_node_value</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span><span class="n">grid</span><span class="p">)</span>
                <span class="n">visit</span><span class="p">.</span><span class="n">put</span><span class="p">((</span><span class="n">distance</span><span class="p">[</span><span class="n">nb</span><span class="p">],</span> <span class="n">nb</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">distance</span><span class="p">[</span><span class="n">target</span><span class="p">]</span>


<span class="n">grid</span><span class="p">,</span><span class="n">visit</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span> <span class="n">target</span> <span class="o">=</span> <span class="n">initialise</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">dijkstra</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span><span class="n">visit</span><span class="p">,</span><span class="n">distance</span><span class="p">,</span><span class="n">target</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="advent-of-code" /><category term="aoc" /><category term="coding" /><category term="python" /><summary type="html"><![CDATA[Advent of Code 2021 Days 11-15]]></summary></entry><entry><title type="html">Advent Of Code 2021 Days 6-10</title><link href="http://localhost:4000/2022/01/05/advent-of-code-2021-days-6-10.html" rel="alternate" type="text/html" title="Advent Of Code 2021 Days 6-10" /><published>2022-01-05T13:45:39+00:00</published><updated>2022-01-05T13:45:39+00:00</updated><id>http://localhost:4000/2022/01/05/advent-of-code-2021-days-6-10</id><content type="html" xml:base="http://localhost:4000/2022/01/05/advent-of-code-2021-days-6-10.html"><![CDATA[<h1 id="advent-of-code-2021-days-6-10">Advent of Code 2021 Days 6-10</h1>

<p><img src="/images/pexels-photo-6211095.jpeg" alt="christmas tree decorated with baubles and garland" /></p>

<p>Welcome back to some more <a href="http://adventofcode.com/2021/">Advent of Code 2021</a>!</p>

<p>These posts will be quite brief, just a few thoughts on each puzzle and the Python 3 code I used to solve it. All code on Github <a href="https://git.io/JmAvJ">here</a>. The code below is for Part 2 of each day, which often incorporates Part 1 in some way.</p>

<h2 id="day-6---lanternfish">Day 6 - <a href="https://adventofcode.com/2021/day/6">Lanternfish</a></h2>

<h3 id="thoughts">Thoughts</h3>

<p>Here we are dealing with exponential growth of a population of lanternfish. Each lanternfish has its own “timer”, counting down by 1 for each day that passes. The day after a lanternfish reaches 0 days on its timer, it spawns a new lanternfish with 8 days on its timer, and resets its own timer to 8 days.</p>

<p>Part 1 of the puzzle was to find out how many lanternfish there are after 80 days. While you’re doing part 1, you don’t know what part 2 is going to ask you. The example for part 1 shows the lanternfish represented as a list of timer values, one value for each fish.</p>

<p>My instinct was that the order of the lanternfish didn’t matter, so there was no need to keep track of individual lanternfish. Fortunately, part 2 only asked for the number of lanternfish after 256 days, rather than switching to a problem where the order mattered!</p>

<p>Basically the question was trying to trick you into representing lanternfish individually, and thus gobbling up all your computer’s memory due to the exponential rate of growth. Instead, the code below tracks the population of lanternfish with each timer value. This is done with a <code class="language-plaintext highlighter-rouge">defaultdict</code> from timer value to population. The <code class="language-plaintext highlighter-rouge">defaultdict</code> returns 0 if the key isn’t found, which saves having to initialise populations of zero in each state.</p>

<h3 id="python-code">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>

<span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>

<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="n">counts</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">advance</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
    <span class="n">newstate</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>

    

    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">t</span><span class="o">==</span><span class="mi">8</span><span class="p">:</span>
            <span class="n">newstate</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">elif</span> <span class="n">t</span><span class="o">==</span><span class="mi">6</span><span class="p">:</span>
            <span class="n">newstate</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">+</span> <span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">newstate</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
    
    <span class="k">return</span> <span class="n">newstate</span>

<span class="n">generations</span> <span class="o">=</span> <span class="mi">256</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">generations</span><span class="p">):</span>
    <span class="n">counts</span> <span class="o">=</span> <span class="n">advance</span><span class="p">(</span><span class="n">counts</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">counts</span><span class="p">.</span><span class="n">values</span><span class="p">()))</span>
</code></pre></div></div>
<p>Day 7 - <a href="https://adventofcode.com/2021/day/7">The Treachery of Whales</a>
———————————————————————-</p>

<h3 id="thoughts-1">Thoughts</h3>

<p>Crab submarines can only move horizontally. Their own limitations are represented in their technology, a salutary lesson for any software developer. Or maybe I’m reading too much into it.</p>

<p>We have many crab submarines at different horizontal positions, and we want to find the minimum fuel cost required to bring them all into alignment. The fuel cost of moving a crab submarine is based on triangular numbers - the first step costs 1 fuel, the second step costs 2, and so on. So moving from position 13 to 17 would cost (1+2+3+4) = 10 fuel.</p>

<p>Moving <code class="language-plaintext highlighter-rouge">n</code> steps therefore costs <code class="language-plaintext highlighter-rouge">0.5(n)(n+1)</code> units of fuel, thanks to the well known formula for <a href="https://en.wikipedia.org/wiki/Triangular_number">triangular numbers</a> due to the great <a href="https://letstalkscience.ca/educational-resources/backgrounders/gauss-summation">Carl Friedrich Gauss</a>.</p>

<p>What you see below is a brute force solution to the minimisation problem. The code simply iterates through each candidate position <code class="language-plaintext highlighter-rouge">x</code>, and works out the total fuel cost of aligning all the crab submarines at that position.</p>

<p>There are of course many improvements that could be made here. The total cost function is convex, so gradient descent would do a good job of finding the minimum.</p>

<p>Furthermore, it <a href="https://www.reddit.com/r/adventofcode/comments/rawxad/2021_day_7_part_2_i_wrote_a_paper_on_todays/">can be shown</a> that the optimum position lies within 0.5 of the mean of the initial positions. If you’re willing to follow a proof of that or take it on faith, you can solve this problem by checking only two values. Try <code class="language-plaintext highlighter-rouge">cost(floor(mean))</code> and <code class="language-plaintext highlighter-rouge">cost(ceil(mean))</code>, and take the lowest, which will be the overall minimum fuel cost.</p>

<p>(I’m actually a bit suspicious of the continuous calculus that goes into some “proofs” of the result that the optimum position lies within 0.5 of the mean, but the result appears to be true and can be shown without calculus, albeit it gets a bit messy).</p>

<h3 id="python-code-1">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">data</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">sum_fuel_costs</span><span class="p">(</span><span class="n">positions</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">position</span> <span class="ow">in</span> <span class="n">positions</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">position</span><span class="o">-</span><span class="n">x</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="mf">0.5</span><span class="o">*</span><span class="n">d</span><span class="o">*</span><span class="p">(</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span>

<span class="n">min_cost</span> <span class="o">=</span> <span class="n">sum_fuel_costs</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">#brute force solution
</span><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="nb">max</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
    <span class="n">cost</span> <span class="o">=</span> <span class="n">sum_fuel_costs</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">cost</span> <span class="o">&lt;</span> <span class="n">min_cost</span><span class="p">:</span>
        <span class="n">min_cost</span> <span class="o">=</span> <span class="n">cost</span>

<span class="k">print</span><span class="p">(</span><span class="n">min_cost</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="day-8---seven-segment-search">Day 8 - <a href="https://adventofcode.com/2021/day/8">Seven Segment Search</a></h2>

<h3 id="thoughts-2">Thoughts</h3>

<p>This is a fun one!</p>

<p>We have a bunch of badly mis-wired <a href="https://en.wikipedia.org/wiki/Seven-segment_display">seven-segment displays</a> to deal with.</p>

<p>The displays represent the digits 0-9 as shown in the diagram below, with segments labelled a to g.</p>

<p><img src="/images/7segmentdisplay-1.jpg" alt="" /></p>

<p>For each 4 digit display in the input, we get a list of what all ten possible digits look like, plus the four digits the display is actually trying to show. Each display is miswired in a different way, so the 10 possible digits will not look like the above diagram! Each display always lights up the correct number of segments, but the segments have been mixed up in a consistent way. For example, a certain display might light up segment <code class="language-plaintext highlighter-rouge">f</code> <em>every time</em> it is supposed to light up segment <code class="language-plaintext highlighter-rouge">b</code>.</p>

<p>While this mapping will be consistent <em>within</em> a given display, each display is mis-wired <em>differently</em>. Each line of the input is effectively its own mini-puzzle that needs to be solved, independent of the other lines.</p>

<p>The scrambled seven-segment displays are represented by strings, for example <code class="language-plaintext highlighter-rouge">febca</code>, showing which segments are lit. <code class="language-plaintext highlighter-rouge">febca</code> would represent the following display:</p>

<p><img src="/images/febca.jpg" alt="" /></p>

<p>Let’s look at an example line of our input, representing various configurations of a single mis-wired display:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>febca cfagb ecbafd efdcbg cbegdfa fg bgafec gfae acgdb gfc | cgf facdeb ecgfdb afcbge
</code></pre></div></div>

<p>On the left of the <code class="language-plaintext highlighter-rouge">|</code> character we have all the digits 0-9, as they are shown on this mis-wired display. These could be in <em>any order</em>.</p>

<p>On the right of the <code class="language-plaintext highlighter-rouge">|</code> character we have the 4 digit output that we need to decode.</p>

<p>Consider the display <code class="language-plaintext highlighter-rouge">gfc</code>. This can <em>only</em> represent the digit 7, because 7 is the only digit where exactly 3 segments are lit. This means that the first digit of the output, <code class="language-plaintext highlighter-rouge">cgf</code>, must be 7. Notice that the order of the characters doesn’t matter - if the same segments are lit, the same digit is being displayed. This is one of the reasons my solution makes heavy use of sets - sets do not have any internal ordering. <code class="language-plaintext highlighter-rouge">{g,f,c}</code> and <code class="language-plaintext highlighter-rouge">{c,g,f}</code> are identical sets.</p>

<p>In fact I use <code class="language-plaintext highlighter-rouge">frozenset</code>s because they are immutable and hashable, and thus can be used as keys for a <code class="language-plaintext highlighter-rouge">defaultdict</code>.</p>

<p>We can decode the entire output just by thinking about sets of segments which are lit. At no point do we actually need to figure out exactly <em>how</em> the segments are mis-wired.</p>

<p>Firstly let’s organise the digits by the number of segments lit, with a quick glance at the diagram above.</p>

<p><img src="/images/segments_1.jpg" alt="" /></p>

<p><img src="/images/segments_2.jpg" alt="" /></p>

<p><img src="/images/segments_3.jpg" alt="" /></p>

<p>The digits 1, 4, 7, and 8 can be identified immediately by the number of segments lit.</p>

<p>There are a number of ways to identify the remaining digits, I used the following logic just because it was the first system that occurred to me which would work.</p>

<p>Compare the unidentified sets of segments with the ones that have already been identified as 7 and 4.</p>

<p>First consider 2, 3 and 5. Each of these has exactly five segments lit.</p>

<p><img src="/images/shared_segs_1.jpg" alt="" /></p>

<ul>
  <li>Only 3 has exactly three segments in common with 7</li>
  <li>Only 5 has exactly three segments in common with 4</li>
  <li>The other five-segment digit must represent 2</li>
</ul>

<p>Now repeat the process with 0, 6 and 9, which all have exactly six segments lit.</p>

<p><img src="/images/shared_segs_2.jpg" alt="" /></p>

<ul>
  <li>Only 6 has exactly two segments in common with 7</li>
  <li>Only 9 has exactly four segments in common with 4</li>
  <li>The other six-segment display must represent 0</li>
</ul>

<p>At this point we have identified how all of the digits 0-9 are represented on that particular display, and can decode the output. The final solution to the puzzle is just the sum of all the decoded outputs. Remember we need to repeat the decoding process for each row in our input, since each display is mis-wired in a different way.</p>

<p>Not again that this solution doesn’t actually determine how the individual segments in each display are mis-wired. Does <code class="language-plaintext highlighter-rouge">f</code> get lit instead of <code class="language-plaintext highlighter-rouge">a</code>? Does <code class="language-plaintext highlighter-rouge">b</code> get lit instead of <code class="language-plaintext highlighter-rouge">c</code>? Does <code class="language-plaintext highlighter-rouge">g</code> get lit correctly? Not a clue, this solution assigns sets of lit segments to digits without needing to answer any such questions.</p>

<h3 id="python-code-2">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>

    <span class="n">signals</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">outputs</span> <span class="o">=</span> <span class="p">[]</span>
    
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'|'</span><span class="p">)</span>

    <span class="n">signal</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)</span>
    <span class="n">signal</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">''</span><span class="p">)</span>

    <span class="n">output</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)</span>
    <span class="n">output</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="s">''</span><span class="p">)</span>

    <span class="n">signals</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
    <span class="n">outputs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">signal</span><span class="p">):</span>
    <span class="n">decoder</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="s">'.'</span><span class="p">)</span>
    <span class="n">segs</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="p">[])</span>

    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">signal</span><span class="p">:</span>
        <span class="n">segs</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)].</span><span class="n">append</span><span class="p">(</span><span class="nb">frozenset</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="nb">frozenset</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span> <span class="o">=</span> <span class="s">'1'</span>
                
        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="nb">frozenset</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span> <span class="o">=</span> <span class="s">'4'</span>
                
        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="nb">frozenset</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span> <span class="o">=</span> <span class="s">'7'</span>

        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">7</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="nb">frozenset</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span> <span class="o">=</span> <span class="s">'8'</span>

    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">segs</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span>
        <span class="n">overlap_with_7</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">segs</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>

        <span class="n">overlap_with_4</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">segs</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>

        <span class="k">if</span> <span class="n">overlap_with_7</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="s">'3'</span>
        
        <span class="k">elif</span> <span class="n">overlap_with_4</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="s">'5'</span>
        
        <span class="k">else</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="s">'2'</span>

    <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">segs</span><span class="p">[</span><span class="mi">6</span><span class="p">]:</span>
        <span class="n">overlap_with_7</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">z</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">segs</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>

        <span class="n">overlap_with_4</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">z</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">segs</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>

        <span class="k">if</span> <span class="n">overlap_with_7</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="n">z</span><span class="p">]</span> <span class="o">=</span> <span class="s">'6'</span>
            
        <span class="k">elif</span> <span class="n">overlap_with_4</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="n">z</span><span class="p">]</span> <span class="o">=</span> <span class="s">'9'</span>
            
        <span class="k">else</span><span class="p">:</span>
            <span class="n">decoder</span><span class="p">[</span><span class="n">z</span><span class="p">]</span> <span class="o">=</span> <span class="s">'0'</span>
        
    
    <span class="k">return</span> <span class="n">decoder</span>



<span class="k">def</span> <span class="nf">decode_outputs</span><span class="p">(</span><span class="n">signals</span><span class="p">,</span><span class="n">outputs</span><span class="p">):</span>

    <span class="n">decoded_outputs</span><span class="o">=</span><span class="p">[]</span>
    <span class="k">for</span> <span class="n">signal</span><span class="p">,</span><span class="n">output</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">signals</span><span class="p">,</span><span class="n">outputs</span><span class="p">):</span>
        <span class="n">decoder</span> <span class="o">=</span> <span class="n">decode</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span>
        <span class="n">decoded_output</span> <span class="o">=</span> <span class="s">''</span>

        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">output</span><span class="p">:</span>
            <span class="n">decoded_output</span> <span class="o">+=</span> <span class="n">decoder</span><span class="p">[</span><span class="nb">frozenset</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span>
        
        <span class="n">decoded_outputs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">decoded_output</span><span class="p">))</span>
        
    
    <span class="k">return</span> <span class="n">decoded_outputs</span>

<span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">decode_outputs</span><span class="p">(</span><span class="n">signals</span><span class="p">,</span><span class="n">outputs</span><span class="p">)))</span>
</code></pre></div></div>
<p>Day 9 - <a href="https://adventofcode.com/2021/day/4">Smoke Basin</a>
———————————————————-</p>

<h3 id="thoughts-3">Thoughts</h3>

<p>Here we are dealing smoke, regarded as a fluid that flows to the lowest point of the area it is in. The height map of the region is represented by a grid of integers. The integers, ranging from 0 to 9, represent the height of that particular point on the grid.</p>

<p>In part 1 we have to identify <strong>low points</strong> - points which have a lower height than all adjacent points.</p>

<p>In part 2 we are told that a <strong>basin</strong> is a set of points that would flow down to the same low point. The input is constructed such that every basin has only a single low point. All points lie in a single basin except points with height 9, which are not considered to lie in any basin.</p>

<p>Our goal is to find the 3 largest basins, and multiply the number of points in each basin together.</p>

<p>I solved this by building a recursive function which would label every point with the <strong>basin ID</strong> of the low point that it drains to. High points (where height=9) are assigned a basin ID of -1, to represent that high points are not in any basin.</p>

<p>To find the basin ID of each point, I use a recursive function <code class="language-plaintext highlighter-rouge">get_basin_ID</code>. This function assigns any high point a basin ID of -1, and returns the basin ID of a point if already known. If the basin ID of the point is not yet known, the function recurses, considering the lowest point adjacent to the original point. Eventually the function will either reach a point whose basin ID we already know, or a low point we have not yet assigned a basin ID to. In the latter case, we assign a new basin ID to the low point.</p>

<p>Once every point has been assigned a basin ID, we simply count the number of points with a given ID to find the basin size, find the three largest basins, and multiply their sizes together.</p>

<h3 id="alternative-solution---flood-fill">Alternative Solution - Flood Fill</h3>

<p>Now it turns out the above is actually excessive work, since all we need to do is find the size of each basin. The individual heights inside the basin are actually irrelevant - a basin can be defined as <strong>any region bounded by points with height 9.</strong> As an alternative solution, I implemented a <a href="https://github.com/DavidBartram/advent-of-code/blob/main/2021/day09-2-floodfill.py">Flood Fill</a> which starts at a low point and fills the surrounding basin with 9s, counting the points as it goes along.</p>

<h3 id="python-code-basin-id-solution">Python Code (basin ID solution)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span><span class="p">,</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
<span class="kn">import</span> <span class="nn">operator</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>

<span class="c1"># Since all the grid heights are between 0 and 9, 100 is a suitable default value
</span><span class="n">grid</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">100</span><span class="p">)</span>

<span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
        <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

<span class="n">rows</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">cols</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">neighbour_coords</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1">#returns a list of coords of points adjacent to (i,j) in the grid
</span>    <span class="n">coords_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">steps</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    
    <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">steps</span><span class="p">:</span>
        <span class="p">(</span><span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">)</span> <span class="o">=</span> <span class="n">step</span>
        <span class="k">if</span> <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="n">dy</span><span class="p">)]</span> <span class="o">!=</span> <span class="mi">100</span><span class="p">:</span> <span class="c1">#default value is 100 if (i+dx,j_dy) is not already in grid
</span>            <span class="n">coords_list</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="n">dy</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">coords_list</span>

<span class="k">def</span> <span class="nf">get_basin_ID</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">grid</span><span class="p">,</span><span class="n">basin_IDs</span><span class="p">):</span>
    <span class="c1">#recursive function to calculate the basin ID of a grid position (i,j)
</span>    <span class="c1">#high points (height=9) will be assigned basin ID = -1
</span>    <span class="c1">#other points will be assigned the same ID as the low point of the basin they are in
</span>
    <span class="k">if</span> <span class="n">basin_IDs</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">&gt;=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
        <span class="c1">#if the basin ID of the point (i,j) is already known, return the known value
</span>        <span class="k">return</span> <span class="n">basin_IDs</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span>

    <span class="k">elif</span> <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">9</span><span class="p">:</span>
        <span class="c1">#assign high points a basin ID of -1
</span>        <span class="n">basin_IDs</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
    
    <span class="k">else</span><span class="p">:</span>

        <span class="c1">#find the value and coords of the lowest point neighbouring (i,j)
</span>
        <span class="n">neigh_coords</span> <span class="o">=</span> <span class="n">neighbour_coords</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">grid</span><span class="p">)</span>
        <span class="n">neigh_vals</span> <span class="o">=</span> <span class="p">{</span><span class="n">grid</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)]:(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="n">neigh_coords</span><span class="p">}</span>

        <span class="n">min_value</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">neigh_vals</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
        <span class="n">min_coords</span> <span class="o">=</span> <span class="n">neigh_vals</span><span class="p">[</span><span class="n">min_value</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">&lt;</span> <span class="n">min_value</span><span class="p">:</span>
            <span class="c1">#if (i,j) is a new low point, we need to assign it a new basin ID
</span>            <span class="n">new_basin_ID</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">basin_IDs</span><span class="p">.</span><span class="n">values</span><span class="p">())</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="n">basin_IDs</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="n">new_basin_ID</span>
            <span class="c1">#print('new basin ID ', new_basin_ID)
</span>            <span class="k">return</span> <span class="n">new_basin_ID</span>
        
        <span class="k">else</span><span class="p">:</span>
            <span class="c1">#if (i,j) is not known, and is not a new low point
</span>            <span class="c1">#recursively call the function for the coords of the lowest neighbouring point
</span>            <span class="c1">#this recursion will eventually reach a previously known value or a new low point
</span>            <span class="c1">#in either case the basin ID of the original point will match this value
</span>            <span class="k">return</span> <span class="n">get_basin_ID</span><span class="p">(</span><span class="n">min_coords</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">min_coords</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">grid</span><span class="p">,</span> <span class="n">basin_IDs</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">find_basins</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1">#populates a dictionary where the keys are the coordinates on the grid and the values are the basin IDs
</span>    <span class="c1">#high points (height=9) will be assigned basin ID = -1
</span>    <span class="c1">#other points will be assigned the same ID as the low point of the basin they are in
</span>    <span class="n">basin_IDs</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#-2 is the ID of any grid position that has not been assigned a basin yet
</span>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">cols</span><span class="p">):</span>
            <span class="c1">#print('grid coords ', (i,j))
</span>            <span class="n">basin_IDs</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="n">get_basin_ID</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">grid</span><span class="p">,</span><span class="n">basin_IDs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">basin_IDs</span>
    

<span class="k">def</span> <span class="nf">three_largest_basins</span><span class="p">(</span><span class="n">basin_IDs</span><span class="p">):</span>
    <span class="c1">#The high points (height=9) were assigned basin ID = -1
</span>    <span class="c1">#high points are not in any basin so should not be counted
</span>    <span class="n">counts</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">basin_IDs</span><span class="p">.</span><span class="n">values</span><span class="p">()</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;=</span><span class="mi">0</span><span class="p">])</span>

    <span class="n">counts_list</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">counts</span><span class="p">.</span><span class="n">values</span><span class="p">()),</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">return</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">operator</span><span class="p">.</span><span class="n">mul</span><span class="p">,</span><span class="n">counts_list</span><span class="p">[:</span><span class="mi">3</span><span class="p">],</span><span class="mi">1</span><span class="p">)</span>

<span class="n">basin_IDs</span> <span class="o">=</span> <span class="n">find_basins</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>

<span class="n">total</span> <span class="o">=</span> <span class="n">three_largest_basins</span><span class="p">(</span><span class="n">basin_IDs</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="python-code-flood-fill-solution">Python Code (flood fill solution)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span><span class="p">,</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
<span class="kn">import</span> <span class="nn">operator</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>

<span class="c1"># Since all the grid heights are between 0 and 9, 10 is a suitable default value
# When the grid dictionary is asked to look up coords beyond the grid, it will return 10
# this ensures that coords beyond the grid will result in a value lower than coords within the grid
</span><span class="n">grid</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>

<span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
        <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">neighbours</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">grid</span><span class="p">):</span>
    <span class="n">neigh_list</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">steps</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    
    <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">steps</span><span class="p">:</span>
        <span class="p">(</span><span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">)</span> <span class="o">=</span> <span class="n">step</span>
        <span class="n">neigh_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="n">dy</span><span class="p">)])</span>
    
    <span class="k">return</span> <span class="n">neigh_list</span>

<span class="k">def</span> <span class="nf">neighbour_coords</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1">#returns a list of coords of points adjacent to (i,j) in the grid
</span>    <span class="n">coords_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">steps</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
        
    <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">steps</span><span class="p">:</span>
        <span class="p">(</span><span class="n">dx</span><span class="p">,</span><span class="n">dy</span><span class="p">)</span> <span class="o">=</span> <span class="n">step</span>
        <span class="k">if</span> <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="n">dy</span><span class="p">)]</span> <span class="o">!=</span> <span class="mi">10</span><span class="p">:</span> <span class="c1">#default value is 10 if (i+dx,j_dy) is not already in grid
</span>            <span class="n">coords_list</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">j</span><span class="o">+</span><span class="n">dy</span><span class="p">))</span>
        
    <span class="k">return</span> <span class="n">coords_list</span>

<span class="k">def</span> <span class="nf">find_low_points</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="n">low_points</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">grid</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">&lt;</span> <span class="nb">min</span><span class="p">(</span><span class="n">neighbours</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">grid</span><span class="p">)):</span>
                <span class="n">low_points</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">low_points</span>

<span class="k">def</span> <span class="nf">flood_fill_and_count</span><span class="p">(</span><span class="n">point</span><span class="p">,</span><span class="n">grid</span><span class="p">):</span>
    <span class="c1">#starting with a point (x,y) that is in a basin (e.g. the low point)
</span>    <span class="c1">#count all the points in that basin
</span>    <span class="c1">#note that every basin is entirely surrounded by points with height 9
</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">if</span> <span class="n">grid</span><span class="p">[</span><span class="n">point</span><span class="p">]</span> <span class="o">==</span> <span class="mi">9</span><span class="p">:</span>
        <span class="c1">#stop if you've reached the edge of the basin
</span>        <span class="c1">#or a point that's already been counted (see below)
</span>        <span class="k">return</span> <span class="n">count</span>
        
    <span class="k">else</span><span class="p">:</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1">#count this point
</span>        <span class="n">grid</span><span class="p">[</span><span class="n">point</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9</span> <span class="c1">#flood fill with 9s, prevents counting this point again
</span>
        <span class="c1">#recursively count the neighbouring points
</span>        <span class="k">for</span> <span class="n">nb</span> <span class="ow">in</span> <span class="n">neighbour_coords</span><span class="p">(</span><span class="n">point</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">point</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">grid</span><span class="p">):</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="n">flood_fill_and_count</span><span class="p">(</span><span class="n">nb</span><span class="p">,</span><span class="n">grid</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">count</span>

<span class="k">def</span> <span class="nf">find_basin_sizes</span><span class="p">(</span><span class="n">low_points</span><span class="p">,</span> <span class="n">grid</span><span class="p">):</span>
    <span class="n">basin_sizes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">lp</span> <span class="ow">in</span> <span class="n">low_points</span><span class="p">:</span>
        <span class="n">basin_sizes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">flood_fill_and_count</span><span class="p">(</span><span class="n">lp</span><span class="p">,</span><span class="n">grid</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">basin_sizes</span>

<span class="k">def</span> <span class="nf">solve_puzzle</span><span class="p">(</span><span class="n">grid</span><span class="p">):</span>
    <span class="n">lps</span> <span class="o">=</span> <span class="n">find_low_points</span><span class="p">(</span><span class="n">grid</span><span class="p">)</span>

    <span class="n">basin_sizes</span> <span class="o">=</span> <span class="n">find_basin_sizes</span><span class="p">(</span><span class="n">lps</span><span class="p">,</span> <span class="n">grid</span><span class="p">)</span>

    <span class="k">return</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">operator</span><span class="p">.</span><span class="n">mul</span><span class="p">,</span><span class="nb">sorted</span><span class="p">(</span><span class="n">basin_sizes</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)[:</span><span class="mi">3</span><span class="p">],</span><span class="mi">1</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">solve_puzzle</span><span class="p">(</span><span class="n">grid</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-10---syntax-scoring">Day 10 - <a href="https://adventofcode.com/2021/day/10">Syntax Scoring</a></h2>

<h3 id="thoughts-4">Thoughts</h3>

<p>OK, a parsing puzzle. Not my strongest area, and interesting to learn about!</p>

<p>In part 2 our goal is simple, correct the unbalanced brackets. There are four kinds of bracket: <code class="language-plaintext highlighter-rouge">(), [], {}</code> and <code class="language-plaintext highlighter-rouge">&lt;&gt;</code>. Of course these brackets can be nested.</p>

<p>An example string in the input would be <code class="language-plaintext highlighter-rouge">{&lt;{}]&gt;}</code> . Strings like these are called <strong>corrupted</strong>, because the character <code class="language-plaintext highlighter-rouge">]</code> appears without an opening <code class="language-plaintext highlighter-rouge">[</code>. In part 2 we need to identify corrupted strings, but we can subsequently ignore them.</p>

<p>Another example might be <code class="language-plaintext highlighter-rouge">{&lt;(([]))</code>. This string is merely <strong>incomplete</strong>, it can be corrected by appending the <strong>completion string</strong> <code class="language-plaintext highlighter-rouge">&gt;}</code> at the end to close the unbalanced brackets. For incomplete strings, we calculate a <strong>score</strong> based on the on the completion string.</p>

<p>The score is determined by considering the completion string character-by-character. Start with a total score ofÂ <code class="language-plaintext highlighter-rouge">0</code>. Then, for each character, multiply the total score by 5 and then increase the total score by the point value given for the character below:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">")"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1 point"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"]"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2 points"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"}"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3 points"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"&gt;"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4 points"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>To solve this problem I implemented a stack based parser function called <code class="language-plaintext highlighter-rouge">completion_string</code>. The stack is implemented as a list unimaginatively titled <code class="language-plaintext highlighter-rouge">stack.</code> The parser moves through the line, one character at a time:</p>

<ul>
  <li>If the current character is an opening bracket character of any kind, that character gets pushed onto the top of the stack.</li>
  <li>
    <p>If the current character is a closing bracket character of any kind, the current character <em>should</em> be the matching closing bracket for whichever type of opening bracket is at the top of the stack. This is to say, <em>a legal closing bracket character must close the <strong>most recent bracket which is currently open</strong></em>.</p>

    <ul>
      <li>
        <p>If this is true, pop the opening bracket from the top of the stack and move on to the next character.</p>
      </li>
      <li>
        <p>If this is false, the current character is illegal and the line is <strong>corrupted.</strong> In this case the function <code class="language-plaintext highlighter-rouge">completion_string</code> returns <code class="language-plaintext highlighter-rouge">False</code>. Any further characters in the line are irrelevant.</p>
      </li>
    </ul>
  </li>
</ul>

<p>If the parser reaches the end of the string, the line must be <strong>incomplete</strong>, since the puzzle states that none of the lines of the input are correct.</p>

<p>How do we get the <strong>completion string</strong> which we want to return? Well, our stack still contains all the opening bracket characters which have yet to be closed. All we need to do is reverse the stack, map each character onto the matching closing character, and there’s your completion string. Ready for scoring!</p>

<p>To get a final solution we just need to score every completion string and find the median score.</p>

<h3 id="python-code-3">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">statistics</span> <span class="kn">import</span> <span class="n">median</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>


<span class="n">bracketmap</span> <span class="o">=</span> <span class="p">{</span><span class="s">')'</span><span class="p">:</span><span class="s">'('</span><span class="p">,</span> <span class="s">']'</span><span class="p">:</span> <span class="s">'['</span><span class="p">,</span> <span class="s">'}'</span><span class="p">:</span> <span class="s">'{'</span><span class="p">,</span><span class="s">'&gt;'</span><span class="p">:</span><span class="s">'&lt;'</span><span class="p">}</span>

<span class="n">invbracketmap</span> <span class="o">=</span> <span class="p">{</span><span class="n">value</span><span class="p">:</span><span class="n">key</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span><span class="n">value</span> <span class="ow">in</span> <span class="n">bracketmap</span><span class="p">.</span><span class="n">items</span><span class="p">()}</span>

<span class="n">openers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">bracketmap</span><span class="p">.</span><span class="n">values</span><span class="p">())</span>


<span class="k">def</span> <span class="nf">completion_string</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">openers</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
        
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">bracketmap</span><span class="p">[</span><span class="n">char</span><span class="p">]:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
    
    <span class="n">stack</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>

    <span class="n">stack</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">invbracketmap</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">stack</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">stack</span>

<span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
    <span class="n">scoremap</span> <span class="o">=</span> <span class="p">{</span><span class="s">')'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">']'</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">'}'</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="s">'&gt;'</span><span class="p">:</span><span class="mi">4</span><span class="p">}</span>
    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>
        <span class="n">score</span> <span class="o">=</span> <span class="n">score</span><span class="o">*</span><span class="mi">5</span> <span class="o">+</span> <span class="n">scoremap</span><span class="p">[</span><span class="n">char</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">score</span>

<span class="k">def</span> <span class="nf">solve_part_two</span><span class="p">(</span><span class="n">lines</span><span class="p">):</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="p">[</span><span class="n">score</span><span class="p">(</span><span class="n">completion_string</span><span class="p">(</span><span class="n">line</span><span class="p">))</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span> <span class="k">if</span> <span class="n">completion_string</span><span class="p">(</span><span class="n">line</span><span class="p">)]</span>
    
    <span class="k">return</span><span class="p">(</span><span class="n">median</span><span class="p">(</span><span class="n">scores</span><span class="p">))</span>


<span class="k">print</span><span class="p">(</span><span class="n">solve_part_two</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="advent-of-code" /><category term="coding" /><category term="python" /><summary type="html"><![CDATA[Advent of Code 2021 Days 6-10]]></summary></entry><entry><title type="html">Advent Of Code 2021 Days 1-5</title><link href="http://localhost:4000/2021/12/17/advent-of-code-2021-days-1-5.html" rel="alternate" type="text/html" title="Advent Of Code 2021 Days 1-5" /><published>2021-12-17T13:45:39+00:00</published><updated>2021-12-17T13:45:39+00:00</updated><id>http://localhost:4000/2021/12/17/advent-of-code-2021-days-1-5</id><content type="html" xml:base="http://localhost:4000/2021/12/17/advent-of-code-2021-days-1-5.html"><![CDATA[<h1 id="advent-of-code-2021-days-1-5">Advent of Code 2021 Days 1-5</h1>

<p><img src="/images/pexels-photo-6211095.jpeg" alt="christmas tree decorated with baubles and garland" /></p>

<p>This year I’m a bit more timely with <a href="http://adventofcode.com/2021/">Advent of Code 2021</a>! Really enjoying it so far! Here are my thoughts and solutions for the first 5 days of coding Christmas!</p>

<p>These posts will be quite brief, just a few thoughts on each puzzle and the Python 3 code I used to solve it. All code on Github <a href="https://git.io/JmAvJ">here</a>. The code below is for Part 2 of each day, which often incorporates Part 1 in some way.</p>

<h2 id="day-1---sonar-sweep">Day 1 - <a href="https://adventofcode.com/2021/day/1">Sonar Sweep</a></h2>

<h3 id="thoughts">Thoughts</h3>

<p>A bit of data manipulation here. Starting with a list of integers, consider a sliding window of three values at a time. Calculate the sum of the values in each window, and compare it to the previous sum.</p>

<p>The goal is to output the number of sums which are larger than the previous sum.</p>

<p>The method below is fairly straightforward, calculating a list of all the sums first. I then offer two ways of calculating the required output.</p>

<p>The first way uses indexing, while the second way uses the <a href="https://www.w3schools.com/python/ref_func_zip.asp">zip</a> function.</p>

<p>Zip is one of my favourite python functions - it produces a “zip object”, an iterator of tuples, pairing up the elements from each input iterator. So if <code class="language-plaintext highlighter-rouge">list1</code> is [<code class="language-plaintext highlighter-rouge">a,b,c,d,e]</code> and <code class="language-plaintext highlighter-rouge">list2</code> is <code class="language-plaintext highlighter-rouge">[1, 2, 3]</code> then <code class="language-plaintext highlighter-rouge">zip(list1,list2)</code> will contain the tuples <code class="language-plaintext highlighter-rouge">(a,1)</code>, <code class="language-plaintext highlighter-rouge">(b,2)</code> and <code class="language-plaintext highlighter-rouge">(c,3)</code>. The length of the output is determined by the shorter of the two inputs.</p>

<p>zip(list,list[1:]) will produce a list of tuples of consecutive elements in the list, for example:</p>

<p><code class="language-plaintext highlighter-rouge">list = [1,2,3,5,8,13]</code></p>

<p>then <code class="language-plaintext highlighter-rouge">list[1:] == [2,3,5,8,13]</code></p>

<p>and <code class="language-plaintext highlighter-rouge">zip(list,list[1:])</code> contains <code class="language-plaintext highlighter-rouge">(1,2) , (2,3) , (3,5), (5,8)</code> and <code class="language-plaintext highlighter-rouge">(8,13)</code></p>

<p>Given that, hopefully the list comprehension below makes sense. Remember that when summing a list of booleans, True will be treated as 1 and False will be treated as 0.</p>

<h3 id="python-code">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>


<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">depths</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">))</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>

<span class="c1">#calculate sums of windows of 3 depths each
</span><span class="n">sums</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">window_size</span> <span class="o">=</span> <span class="mi">3</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">depths</span><span class="p">)</span><span class="o">-</span><span class="n">window_size</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">sums</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">depths</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">window_size</span><span class="p">]))</span>

<span class="c1">#non-pythonic way with indexing
</span><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">sums</span><span class="p">)):</span>
    <span class="k">if</span> <span class="n">sums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">sums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>


<span class="c1">#more pythonic way with list comprehension
</span>
<span class="n">increase</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">&lt;</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sums</span><span class="p">,</span><span class="n">sums</span><span class="p">[</span><span class="mi">1</span><span class="p">:])]</span>

<span class="k">print</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">increase</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-2---dive">Day 2 - <a href="https://adventofcode.com/2021/day/2">Dive!</a></h2>

<h3 id="thoughts-1">Thoughts</h3>

<p>Now we are keeping track of the movements of the elves’ Christmas submarine.</p>

<p>We get a set of instructions something like the following.</p>

<p>We need to keep track of the sub’s horizontal position <code class="language-plaintext highlighter-rouge">x</code> and depth <code class="language-plaintext highlighter-rouge">y</code>, and also its current <code class="language-plaintext highlighter-rouge">aim</code> value, which tells you the direction the sub is currently pointing in, and thus how it will move when told to go “forward”.</p>

<p>Our input is a text file with instructions like forward 3, “down 7”, “up 2” etc, obeying the following rubric:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">down X</code> <em>increases</em> your <code class="language-plaintext highlighter-rouge">aim</code> by <code class="language-plaintext highlighter-rouge">X</code> units.</li>
  <li><code class="language-plaintext highlighter-rouge">up X</code> <em>decreases</em> your <code class="language-plaintext highlighter-rouge">aim</code> by <code class="language-plaintext highlighter-rouge">X</code> units.</li>
  <li><code class="language-plaintext highlighter-rouge">forward X</code> does two things:
    <ul>
      <li>It increases your horizontal position by <code class="language-plaintext highlighter-rouge">X</code> units.</li>
      <li>It increases your depth by your aim <em>multiplied by</em> <code class="language-plaintext highlighter-rouge">X</code>.</li>
    </ul>
  </li>
</ul>

<p>The required output is the product of <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> after all the instructions in the input file have been followed. The code below pretty much follows the rubric above line by line. :-)</p>

<h3 id="python-code-1">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">moves</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">file</span><span class="p">]</span>

<span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span> <span class="n">aim</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>

<span class="k">for</span> <span class="n">move</span> <span class="ow">in</span> <span class="n">moves</span><span class="p">:</span>
    <span class="nb">dir</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">move</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>

    <span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="nb">dir</span> <span class="o">==</span> <span class="s">'forward'</span><span class="p">:</span>
        <span class="n">x</span> <span class="o">+=</span> <span class="n">value</span>
        <span class="n">y</span> <span class="o">+=</span> <span class="n">aim</span><span class="o">*</span><span class="n">value</span>
    
    <span class="k">elif</span> <span class="nb">dir</span> <span class="o">==</span> <span class="s">'up'</span><span class="p">:</span>
        <span class="n">aim</span> <span class="o">-=</span> <span class="n">value</span>
    
    <span class="k">elif</span> <span class="nb">dir</span> <span class="o">==</span> <span class="s">'down'</span><span class="p">:</span>
        <span class="n">aim</span> <span class="o">+=</span> <span class="n">value</span>

<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="day-3---binary-diagnostic">Day 3 - <a href="https://adventofcode.com/2021/day/3">Binary Diagnostic</a></h2>

<h3 id="thoughts-2">Thoughts</h3>

<p>We are given a list of binary numbers. We need to filter this list down to two values called the “<strong>oxygen generator rating</strong>” and the “<strong>CO2 scrubber rating</strong>”.</p>

<p>Apply the following procedure to filter the list to a single value:</p>

<ul>
  <li>Start with the full list of binary numbers and consider the first bit of each number</li>
  <li>Discard all numbers which do not match the relevant _bit criteri_on</li>
  <li>If you only have one number left, stop; this is the rating value for which you are searching.</li>
  <li>Otherwise, repeat the process, considering the next bit to the right.</li>
</ul>

<p>The <em>bit criterion</em> varies depending upon which rating you want to find:</p>

<ul>
  <li>To find <strong>oxygen generator rating</strong>, determine the <em>most common</em> value (<code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>) in the current bit position, and keep only numbers with that bit in that position. If <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">1</code> are equally common, keep values with a <code class="language-plaintext highlighter-rouge">_1_</code> in the position being considered.</li>
  <li>To find <strong>CO2 scrubber rating</strong>, determine the <em>least common</em> value (<code class="language-plaintext highlighter-rouge">0</code> or <code class="language-plaintext highlighter-rouge">1</code>) in the current bit position, and keep only numbers with that bit in that position. If <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">1</code> are equally common, keep values with a <code class="language-plaintext highlighter-rouge">_0_</code> in the position being considered.</li>
</ul>

<p>In the code below, the rating is found via the <code class="language-plaintext highlighter-rouge">get_rating</code> function, which has a Boolean argument <code class="language-plaintext highlighter-rouge">co2</code> which should be set to <code class="language-plaintext highlighter-rouge">True</code> to calculate <strong>CO2 scrubber rating</strong>, or <code class="language-plaintext highlighter-rouge">False</code> to calculate <strong>oxygen generator rating</strong>. The puzzle requires calculating both ratings, multiplying them, and returning the value in decimal notation.</p>

<p>The function is recursive, moving on to the next bit and filtering the list further until it reaches the base case, when the list has only 1 element.</p>

<h3 id="python-code-2">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">ceil</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">values</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get_rating</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">co2</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ones</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="s">'1'</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">])</span> <span class="c1">#number of ones in the column being considered
</span>            
            <span class="n">comparator</span> <span class="o">=</span> <span class="s">'0'</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">co2</span><span class="o">==</span><span class="bp">True</span> <span class="ow">and</span> <span class="n">ones</span> <span class="o">&lt;</span> <span class="n">ceil</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span> <span class="ow">or</span> <span class="p">(</span><span class="n">co2</span><span class="o">==</span><span class="bp">False</span> <span class="ow">and</span> <span class="n">ones</span> <span class="o">&gt;=</span> <span class="n">ceil</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span> <span class="p">:</span>
                <span class="n">comparator</span> <span class="o">=</span> <span class="s">'1'</span>

            <span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span> <span class="k">if</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">comparator</span><span class="p">]</span> <span class="c1">#filter the list
</span>
            <span class="k">return</span> <span class="n">get_rating</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">co2</span><span class="p">)</span>


<span class="n">o2</span> <span class="o">=</span> <span class="n">get_rating</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">co2</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">co2</span> <span class="o">=</span> <span class="n">get_rating</span><span class="p">(</span><span class="n">values</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span> <span class="n">co2</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">o2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="nb">int</span><span class="p">(</span><span class="n">co2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-4---giant-squid">Day 4 - <a href="https://adventofcode.com/2021/day/4">Giant Squid</a></h2>

<h3 id="thoughts-3">Thoughts</h3>

<p>The giant squid loves bingo, apparently. Each time a number is drawn, cross off all matching numbers on all the bingo cards.</p>

<p>Given a list of bingo cards and a list of numbers to be drawn, the goal is to find the <strong>score</strong> of the <em>last</em> card to win, and multiply it by the last number drawn. The score of a card is the sum of all the numbers on the card which have not been crossed off.</p>

<p>Each bingo card is a 5x5 grid of integers, and a card wins when a full row or column has been crossed off. Diagonals do not count (thankfully!).</p>

<p>My approach below does not involve “marking” the cards - I don’t keep track of whether any given number on a card has been marked. Instead I repeatedly add the next number to the list of numbers drawn so far, and then iterate over the cards, using simple set operations to determine if the card wins.</p>

<p>This is probably inefficient compared to keeping a record of which numbers have been marked, but its the approach that occurred to me and it runs in reasonable time on my machine. I try not to let the perfect be the enemy of the good when doing these puzzles - which is handy as my code is far from perfect!</p>

<p>One trick that I didn’t initially realise, is the fact that the columns of each bingo card can be appended to the card as extra rows. When I initially solved the puzzle, I made a transposed version of each bingo card and checked the whole set.</p>

<p>The Python one-liner:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">grids</span> <span class="o">=</span> <span class="p">[</span><span class="n">grid</span> <span class="o">+</span> <span class="p">[[</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">))]</span> <span class="k">for</span> <span class="n">grid</span> <span class="ow">in</span> <span class="n">grids</span><span class="p">]</span>
</code></pre></div></div>

<p>is pretty ugly-looking, but it appends the columns to each bingo card as new rows, as required.</p>

<p>Really there’s nothing too clever below. There’s a list called <code class="language-plaintext highlighter-rouge">nums_so_far</code> of numbers drawn so far, and a list of <code class="language-plaintext highlighter-rouge">remaining_cards</code> to keep track of which indices of the <code class="language-plaintext highlighter-rouge">card</code>s list represent cards that are still in play. Iteratively we append a new number to <code class="language-plaintext highlighter-rouge">nums_so_far</code>, then check all the cards, remove the indices of any winners from <code class="language-plaintext highlighter-rouge">remaining_cards</code>, and repeat until only one card survives.</p>

<h3 id="python-code-3">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n\n</span><span class="s">'</span><span class="p">)</span>

    <span class="n">win_nums</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)</span>

    <span class="n">grids</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]]</span>

    <span class="n">grids</span> <span class="o">=</span> <span class="p">[[</span><span class="n">x</span><span class="p">.</span><span class="n">strip</span><span class="p">().</span><span class="n">replace</span><span class="p">(</span><span class="s">'  '</span><span class="p">,</span> <span class="s">' '</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">' '</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">]</span> <span class="k">for</span> <span class="n">grid</span> <span class="ow">in</span> <span class="n">grids</span><span class="p">]</span>

    <span class="n">grids</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">remove</span><span class="p">([</span><span class="s">''</span><span class="p">])</span>

<span class="c1">#append columns to each grid as if they were additional rows
</span><span class="n">grids</span> <span class="o">=</span> <span class="p">[</span><span class="n">grid</span> <span class="o">+</span> <span class="p">[[</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">grid</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">grid</span><span class="p">))]</span> <span class="k">for</span> <span class="n">grid</span> <span class="ow">in</span> <span class="n">grids</span><span class="p">]</span> 

<span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">card</span><span class="p">,</span><span class="n">nums</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">card</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">set</span><span class="p">(</span><span class="n">row</span><span class="p">).</span><span class="n">issubset</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">return</span> <span class="bp">True</span>

<span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">card</span><span class="p">,</span><span class="n">nums</span><span class="p">):</span>
    <span class="n">nums_on_card</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="n">val</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">card</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">row</span><span class="p">])</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="n">nums_on_card</span> <span class="o">-</span> <span class="nb">set</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
    <span class="n">total</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">score</span><span class="p">)</span> <span class="k">for</span> <span class="n">score</span> <span class="ow">in</span> <span class="n">scores</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">total</span>

<span class="k">def</span> <span class="nf">part2_play</span><span class="p">(</span><span class="n">cards</span><span class="p">,</span><span class="n">nums</span><span class="p">):</span>

    <span class="n">nums_so_far</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1">#list of indices of cards still in play
</span>    <span class="c1"># e.g. if cards[3] is still in play, then 3 will be in remaining_cards
</span>    <span class="n">remaining_cards</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cards</span><span class="p">)))</span>

    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
        <span class="n">nums_so_far</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">remaining_cards</span><span class="p">:</span>
            
            <span class="k">if</span> <span class="n">check</span><span class="p">(</span><span class="n">cards</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">nums_so_far</span><span class="p">)</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">remaining_cards</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">remaining_cards</span><span class="p">)</span> <span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                    <span class="n">final_card</span> <span class="o">=</span> <span class="n">cards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                    <span class="k">return</span> <span class="n">score</span><span class="p">(</span><span class="n">final_card</span><span class="p">,</span><span class="n">nums_so_far</span><span class="p">)</span><span class="o">*</span><span class="nb">int</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>                

<span class="k">print</span><span class="p">(</span><span class="n">part2_play</span><span class="p">(</span><span class="n">grids</span><span class="p">,</span><span class="n">win_nums</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="day-5---hydrothermal-venture">Day 5 - <a href="https://adventofcode.com/2021/day/5">Hydrothermal Venture</a></h2>

<h3 id="thoughts-4">Thoughts</h3>

<p>Here we are given a set of lines. They are specified by the coordinates of their end points. The lines are either horizontal, vertical or at exactly 45 degrees. Our goal to determine the number of points with integer coordinates where two or more lines intersect.</p>

<p>Putting aside vertical lines, the horizontal and diagonal lines will all have integer gradients (in fact all the gradients are either 0, +1 or -1). This means to find the integer coordinates a line passes through, we just need to step through from the start to the end, changing x by 1 and y by the gradient for each step. Each step will produce a new point on the grid that the line passes through, so we should increment the count of intersecting lines at that point by one. We stop when we reach the end point.</p>

<p>Vertical lines have infinite gradient but are easy to step through in a similar way, changing y by 1 each step and leaving x alone.</p>

<p>There is no distinction between the “start” and “end” points of a line, and so the code sometimes swaps them so that they can be stepped through by <em>increasing</em> x by 1 per step (for non-vertical lines) or by <em>increasing</em> y by 1 per step (for vertical lines). This is just for convenience.</p>

<h3 id="python-code-4">Python Code</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()</span>

<span class="n">end_points</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1">#Process each line to produce a list of lists of endpoints
#e.g. end_points = [ [(3,2),(4,2)], [(1,1), (5,5)], ....]
</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="n">coords</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">' -&gt; '</span><span class="p">,</span> <span class="s">','</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)</span>
    <span class="n">end_points</span><span class="p">.</span><span class="n">append</span><span class="p">([(</span><span class="nb">int</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nb">int</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">1</span><span class="p">])),(</span><span class="nb">int</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span><span class="nb">int</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="mi">3</span><span class="p">]))])</span>

<span class="c1">#dictionary from coordinate tuples (x,y) to number of overlapping lines at that point
</span><span class="n">overlap_count</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">dx</span><span class="p">,</span><span class="n">dy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span>

<span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">end_points</span><span class="p">:</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">pair</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">end</span> <span class="o">=</span> <span class="n">pair</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1">#vertical lines need special treatment as their gradient is undefined
</span>    <span class="k">if</span> <span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">end</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>

        <span class="c1">#for convenience the point with lower y-value will be used as the start
</span>        <span class="k">if</span> <span class="n">start</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">start</span><span class="p">,</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span><span class="p">,</span><span class="n">start</span>
        
        
        <span class="n">dx</span><span class="p">,</span><span class="n">dy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span>
        <span class="c1">#an integer step along a vertical line adds +0 to x and +1 to y
</span>
    <span class="c1">#horizontal and diagonal lines
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="c1">#for convenience the point with lower x-value will be used as the start
</span>        <span class="k">if</span> <span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">end</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
            <span class="n">start</span><span class="p">,</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span><span class="p">,</span><span class="n">start</span>
        
        <span class="n">dx</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">dy</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">end</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">start</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">end</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">start</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="c1">#gradient
</span>
        <span class="c1">#an integer step along the line adds +1 to x and +(gradient) to y
</span>    
    <span class="n">overlap_count</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">start</span>

    <span class="c1">#keep taking integer steps along the line
</span>    <span class="c1">#until we reach the end point
</span>    <span class="k">while</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">!=</span> <span class="n">end</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">+</span><span class="n">dx</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="n">dy</span>
        <span class="n">overlap_count</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)]</span> <span class="o">+=</span><span class="mi">1</span> <span class="c1">#increment the count of lines crossing that point
</span>

<span class="n">count</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">1</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">overlap_count</span><span class="p">.</span><span class="n">values</span><span class="p">()])</span>

<span class="k">print</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="advent-of-code" /><category term="coding" /><category term="python" /><summary type="html"><![CDATA[Advent of Code 2021 Days 1-5]]></summary></entry><entry><title type="html">Rpg Review Stars Without Number Revised Edition</title><link href="http://localhost:4000/2021/10/26/rpg-review-stars-without-number-revised-edition.html" rel="alternate" type="text/html" title="Rpg Review Stars Without Number Revised Edition" /><published>2021-10-26T14:45:39+01:00</published><updated>2021-10-26T14:45:39+01:00</updated><id>http://localhost:4000/2021/10/26/rpg-review-stars-without-number-revised-edition</id><content type="html" xml:base="http://localhost:4000/2021/10/26/rpg-review-stars-without-number-revised-edition.html"><![CDATA[<h1 id="rpg-review-stars-without-number-revised-edition">RPG Review: Stars Without Number Revised Edition</h1>

<p><img src="/images/stars-without-number-rpg-artwork-2.png" alt="stars-without-number-rpg-artwork-2" /></p>

<h2 id="overview">Overview</h2>

<p><a href="http://www.sinenomine-pub.com/">Sine Nomine Publishing</a> has recently Kickstarted a new offset print edition of <a href="https://www.drivethrurpg.com/product/226996/Stars-Without-Number-Revised-Edition">Stars Without Number Revised</a>, the 2017 science fiction RPG based loosely on Dungeons and Dragons <a href="https://en.wikipedia.org/wiki/Dungeons_%26_Dragons_Basic_Set">B/X edition</a> rules. I’m also coming towards the end of a SWN:R campaign, so I have plenty of experience with the game. I thought it was high time for a review, even though the game is a few years old now, and with Dune coming out in cinemas, what better time to talk about science fiction!</p>

<p><img src="/images/swnr.jpg" alt="" /></p>

<p>SWN:R is the second edition of Stars Without Number. The game is intended for running science fiction games in a wide variety of genres, from cyberpunk dystopia to military SF. If there is such a thing as a “default” SWN:R game, it would be something akin to the typical <a href="https://en.wikipedia.org/wiki/Traveller_(role-playing_game)">Traveller</a> game, with the PCs taking the role of adventurers with a small interstellar ship and a large hunger for profit and adventure.</p>

<p>SWN:R has a <a href="https://www.drivethrurpg.com/product/230009/Stars-Without-Number-Revised-Edition-Free-Version">free version</a> which contains everything you need to play. You will be able to create characters, design spaceships, and populate your sector of space with interesting worlds. Paying for the Deluxe edition grants extra options such as AI characters, mechs, and Heroic characters who are a cut above the ordinary adventurer.</p>

<h2 id="system">System</h2>

<p>At first glance the system would be familiar to players of old-school Dungeons &amp; Dragons, using much of the same basic system. However the SWN:R has some quirks that separate it from D&amp;D, particularly a system of 2d6-based skill checks and the addition of Foci. Skills are rated from 0 (trained) to 4 (the best in the sector).</p>

<p>A Focus, something like a Feat in 3rd Edition D&amp;D, is a special capability that your character has, regardless of their class. A Focus can make you an excellent Gunslinger, Diplomat or Hacker, enhance your spaceship based talents as a Star Captain or Starfarer, or grant you a unique ability like Ironskin, which grants you the benefits of armour without having to wear any.</p>

<p>The classes are Warrior, Psychic and Expert. Alternatively you can play an Adventurer who has aspects of two classes, e.g. a Partial Warrior/Partial Psychic if you want to see the future and shoot a gun really well.</p>

<p>Psychic abilities come in 8 disciplines including Telekinesis, Precognition and Telepathy, and each discipline has a range of powers to choose from. An Adventurer with the Partial Psychic class can access only one psychic discipline, while a Psychic can access any discipline. Psychic powers are ranked by the skill rating in the relevant discipline, e.g. the technique <em>Impact Sump</em>, which allows a psychic to shrug off an instance of physical damage, requires that you have Telekinesis-2 or higher.</p>

<p>In general the psychic powers are interesting, but they can leave the Expert and Warrior feeling a bit left out. A full Expert has only one advantage over a Partial Expert/Partial Psychic, which is that they can re-roll a skill check once per scene. That’s a useful trick to be sure, but when compared with having psychic abilities, it’s not necessarily that tempting. Particularly since there’s a Precognition technique that lets you give yourself and allies re-rolls on skill checks.</p>

<p>The book contains plenty of rules for weapons and equipment, including TL5 artifacts which are so advanced that they fill a similar role to magic items in a fantasy game. There are detailed rules for purchasing a ship and outfitting it with a choice of weapons, defences and fittings. Tough choices have to be made with how to allocate your ship’s Mass and Power - if you want the enhanced sensors of an exploration ship, you might have to leave off that extra laser turret.</p>

<p>Starship combat has its own ruleset, which is probably one of my least favourite aspects of the system. It’s functional, but it relies on your PCs thinking and acting as a team, because it doesn’t always give each character something fun to do. The system is built around building up a supply of Command Points each turn and then spending them on actions by various departments on the ship. There are actions available for the Captain, Comms Officer, Pilot and Engineer but often it is best to ignore those options in favour of generating Command Points for the Gunnery Officer to blast away with. Viewed as a team activity it works well, but most of the time it’s the player or players operating the guns who will get to roll the most dice and make the most impact.</p>

<p><img src="/images/stars-without-number-rpg-artwork-2.png" alt="" /></p>

<h2 id="setting">Setting</h2>

<p>SWN:R is clearly designed to be fairly easily used in any science fiction setting. That said, the book assumes a particular background in which humanity expanded to the stars using “spike drives” and later, the more powerful “jump gates”. Humanity developed into an interstellar empire known as the Mandate, which fell apart 600 years ago when an unknown psychic event destroyed the jump gates, drove almost every psychic insane, and destroyed all spike drive ships in transit. This calamity, known as the Scream, completely splintered interstellar civilisation, and only in the last few decades have some planets recovered the ability to produce spike drive ships and explore their neighbouring stars. Other planets, due to lack of resources or social collapse, have ended up at a lower level of technology. An interstellar explorer might run into worlds of varying “Tech Levels”, from the stone age TL0 to the current technological peak of TL4. TL5 represents the technology which existed before the Scream, which has to be salvaged from abandoned ruins and derelict ships, since no modern world is capable of manufacturing such wonders.</p>

<p>This setting provides a backdrop for adventuring between stars, exploring the ruins of a fallen civilisations and getting involved in the politics of worlds that have previously been separated for generations. The setting also includes some technologies to rule out certain approaches to problems that PCs and their enemies would otherwise be likely to take. “Nuke snuffers” make nuclear weapons ineffective except for mining asteroids, “gravitic braker guns” prevent orbital bombardment and asteroid strikes, and “quantum ECM” shields ships, battlefields and government facilities from remote-operated drones and guided missiles. Planets below TL4 technology will need to purchase these technologies from others, and if they haven’t had the chance they may be easy prey for even a single spaceship with the right armaments.</p>

<h2 id="gm-tools">GM Tools</h2>

<p>The GM tools in Stars Without Number are excellent. There are a vast number of World Tags to help you randomly generate planets with interesting advantages, problems, and conflicts. Since each world is advised to have two tags, this allows for surprising combinations which the GM can use to create unique worlds. A Radioactive World that is also a Trade Hub, for example - would you discard that result, or find a way to make it work? Each tag comes with suggested NPCs, complications, items and locations. In addition to tags there is also a Faction system for pitting organisations and worlds against one another in conflict - be it overt violence, espionage or economic competition. A large number of plot seeds and useful random tables round out one of the most extensive, and useful, GM sections you are likely to find in any game.</p>

<h2 id="art--production-quality">Art &amp; Production Quality</h2>

<p>SWN:R is a good-looking book with highly usable layout and high quality art. The art is very “generic sci-fi”, feeling like it could represent any world, not necessarily the base setting of the game in particular, and there isn’t loads of art, the book is pretty dense with text. However the art is nice-looking and well-placed within the book. The print-on-demand hardback from DriveThru is not the best quality printing, and I’m looking forward to getting my Kickstarter reward of an offset-print copy which I expect to have brighter colour and better paper/binding.</p>

<h2 id="conclusion">Conclusion</h2>

<p>SWN:R is an excellent purchase for any science-fiction GM, since the worldbuilding tools are usable in any game system. For anyone looking for an old-school D&amp;D-based system for science fiction, the book is even more useful. Thanks to Foci, skill checks and psychic abilities, this book does drift away from some of the mechanical simplicity of B/X D&amp;D, and that added complexity will be unwelcome to some groups. For me though it is a good medium-crunch system that works really well “out of the box”. It can easily sustain a long campaign, though the levelling system caps out at level 10.</p>

<p>Overall this is an excellent game and I have thoroughly enjoyed running it for a group of six players. If it sounds remotely up your street, I recommend you check out the <a href="https://www.drivethrurpg.com/product/230009/Stars-Without-Number-Revised-Edition-Free-Version">free version</a> and go from there!</p>]]></content><author><name></name></author><category term="reviews" /><category term="tabletop-roleplaying" /><summary type="html"><![CDATA[RPG Review: Stars Without Number Revised Edition]]></summary></entry><entry><title type="html">Sql Server Queries Task Duration Inserting Defaults</title><link href="http://localhost:4000/2021/10/05/sql-server-queries-task-duration-and-inserting-defaults.html" rel="alternate" type="text/html" title="Sql Server Queries Task Duration Inserting Defaults" /><published>2021-10-05T14:45:39+01:00</published><updated>2021-10-05T14:45:39+01:00</updated><id>http://localhost:4000/2021/10/05/sql-server-queries-task-duration-and-inserting-defaults</id><content type="html" xml:base="http://localhost:4000/2021/10/05/sql-server-queries-task-duration-and-inserting-defaults.html"><![CDATA[<h1 id="sql-server-queries---task-duration--inserting-defaults">SQL Server Queries - Task Duration &amp; Inserting Defaults</h1>

<p><img src="/images/pexels-photo-210607.jpeg" alt="stock exchange board" /></p>

<p>The title says it all really - two SQL (T-SQL) snippets designed for running against a Microsoft SQL Server database. They’ll most likely work in whichever flavour of SQL you prefer, with a little tweaking.</p>

<p>The uses cases and solutions here have been simplified (to the point of absurdity!) to explain what each query does.</p>

<h2 id="task-duration">Task Duration</h2>

<p>Here we have a status log of some tasks being worked on by Alice, Bob and Clare. The first status a task enters is Start, and the last status is Completed. There may be other statuses in between, such as Blocked.</p>

<table>
  <thead>
    <tr>
      <th>Task ID</th>
      <th>Worker</th>
      <th>Date</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Task 1</td>
      <td>Alice</td>
      <td>2021-11-19</td>
      <td>Start</td>
    </tr>
    <tr>
      <td>Task 2</td>
      <td>Bob</td>
      <td>2021-11-23</td>
      <td>Start</td>
    </tr>
    <tr>
      <td>Task 3</td>
      <td>Clare</td>
      <td>2021-11-23</td>
      <td>Start</td>
    </tr>
    <tr>
      <td>Task 3</td>
      <td>Clare</td>
      <td>2021-11-25</td>
      <td>Blocked</td>
    </tr>
    <tr>
      <td>Task 3</td>
      <td>Clare</td>
      <td>2021-11-27</td>
      <td>Completed</td>
    </tr>
    <tr>
      <td>Task 4</td>
      <td>Clare</td>
      <td>2021-11-28</td>
      <td>Start</td>
    </tr>
    <tr>
      <td>Task 1</td>
      <td>Alice</td>
      <td>2021-12-02</td>
      <td>Completed</td>
    </tr>
    <tr>
      <td>Task 4</td>
      <td>Clare</td>
      <td>2021-12-07</td>
      <td>Completed</td>
    </tr>
  </tbody>
</table>

<p>Completed</p>

<p>You are asked to provide a list of completed tasks, their start and finish dates, and the number of days taken to complete each task.</p>

<h3 id="query">Query</h3>

<p>This snippet will populate a <code class="language-plaintext highlighter-rouge">datatable</code> like the above. It then uses an INNER LEFT JOIN query, a self-join of the original table, to produce the desired output.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">datatable</span> <span class="k">as</span> <span class="p">(</span>
        <span class="k">select</span> <span class="s1">'Task 1'</span> <span class="k">as</span> <span class="s1">'Task ID'</span><span class="p">,</span> <span class="s1">'Alice'</span> <span class="k">as</span> <span class="nv">"Worker"</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'20211119'</span> <span class="k">as</span> <span class="nb">date</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Date"</span><span class="p">,</span> <span class="s1">'Start'</span> <span class="k">as</span> <span class="nv">"Status"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="s1">'Task 2'</span> <span class="k">as</span> <span class="s1">'Task ID'</span><span class="p">,</span> <span class="s1">'Bob'</span> <span class="k">as</span> <span class="nv">"Worker"</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'20211123'</span> <span class="k">as</span> <span class="nb">date</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Date"</span><span class="p">,</span> <span class="s1">'Start'</span> <span class="k">as</span> <span class="nv">"Status"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="s1">'Task 3'</span> <span class="k">as</span> <span class="s1">'Task ID'</span><span class="p">,</span> <span class="s1">'Clare'</span> <span class="k">as</span> <span class="nv">"Worker"</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'20211123'</span> <span class="k">as</span> <span class="nb">date</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Date"</span><span class="p">,</span> <span class="s1">'Start'</span> <span class="k">as</span> <span class="nv">"Status"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="s1">'Task 3'</span> <span class="k">as</span> <span class="s1">'Task ID'</span><span class="p">,</span> <span class="s1">'Clare'</span> <span class="k">as</span> <span class="nv">"Worker"</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'20211125'</span> <span class="k">as</span> <span class="nb">date</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Date"</span><span class="p">,</span> <span class="s1">'Blocked'</span> <span class="k">as</span> <span class="nv">"Status"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="s1">'Task 1'</span> <span class="k">as</span> <span class="s1">'Task ID'</span><span class="p">,</span> <span class="s1">'Alice'</span> <span class="k">as</span> <span class="nv">"Worker"</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'20211202'</span> <span class="k">as</span> <span class="nb">date</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Date"</span><span class="p">,</span> <span class="s1">'Completed'</span> <span class="k">as</span> <span class="nv">"Status"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="s1">'Task 3'</span> <span class="k">as</span> <span class="s1">'Task ID'</span><span class="p">,</span> <span class="s1">'Clare'</span> <span class="k">as</span> <span class="nv">"Worker"</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'20211127'</span> <span class="k">as</span> <span class="nb">date</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Date"</span><span class="p">,</span> <span class="s1">'Completed'</span> <span class="k">as</span> <span class="nv">"Status"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="s1">'Task 4'</span> <span class="k">as</span> <span class="s1">'Task ID'</span><span class="p">,</span> <span class="s1">'Clare'</span> <span class="k">as</span> <span class="nv">"Worker"</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'20211128'</span> <span class="k">as</span> <span class="nb">date</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Date"</span><span class="p">,</span> <span class="s1">'Start'</span> <span class="k">as</span> <span class="nv">"Status"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="s1">'Task 4'</span> <span class="k">as</span> <span class="s1">'Task ID'</span><span class="p">,</span> <span class="s1">'Clare'</span> <span class="k">as</span> <span class="nv">"Worker"</span><span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="s1">'20211207'</span> <span class="k">as</span> <span class="nb">date</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Date"</span><span class="p">,</span> <span class="s1">'Completed'</span> <span class="k">as</span> <span class="nv">"Status"</span>
<span class="p">)</span>

<span class="k">SELECT</span> <span class="n">initialData</span><span class="p">.</span><span class="nv">"Task ID"</span><span class="p">,</span> 
       <span class="n">initialData</span><span class="p">.</span><span class="nv">"Date"</span> <span class="k">as</span> <span class="nv">"StartDate"</span><span class="p">,</span> 
       <span class="n">completedData</span><span class="p">.</span><span class="nv">"Date"</span> <span class="k">as</span> <span class="nv">"EndDate"</span><span class="p">,</span>
       <span class="n">DATEDIFF</span><span class="p">(</span><span class="k">day</span><span class="p">,</span><span class="n">initialData</span><span class="p">.</span><span class="nv">"Date"</span><span class="p">,</span> <span class="n">completedData</span><span class="p">.</span><span class="nv">"Date"</span><span class="p">)</span> <span class="k">as</span> <span class="nv">"Duration (days)"</span>
<span class="k">FROM</span> <span class="n">datatable</span> <span class="k">as</span> <span class="n">initialData</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">datatable</span> <span class="k">as</span> <span class="n">completedData</span>
  <span class="k">on</span>  <span class="n">initialData</span><span class="p">.</span><span class="nv">"Task ID"</span> <span class="o">=</span> <span class="n">completedData</span><span class="p">.</span><span class="nv">"Task ID"</span>
  <span class="k">and</span> <span class="n">initialData</span><span class="p">.</span><span class="nv">"Status"</span> <span class="o">=</span> <span class="s1">'Start'</span>
  <span class="k">and</span> <span class="n">completedData</span><span class="p">.</span><span class="nv">"Status"</span> <span class="o">=</span> <span class="s1">'Completed'</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="output">Output</h3>

<table>
  <thead>
    <tr>
      <th>Task ID</th>
      <th>StartDate</th>
      <th>EndDate</th>
      <th>Duration (days)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Task 1</td>
      <td>2021-11-19</td>
      <td>2021-12-02</td>
      <td>13</td>
    </tr>
    <tr>
      <td>Task 3</td>
      <td>2021-11-23</td>
      <td>2021-11-27</td>
      <td>4</td>
    </tr>
    <tr>
      <td>Task 4</td>
      <td>2021-11-28</td>
      <td>2021-12-07</td>
      <td>9</td>
    </tr>
  </tbody>
</table>

<h2 id="inserting-default-values">Inserting Default Values</h2>

<p>Consider a table like the below:</p>

<table>
  <thead>
    <tr>
      <th>Day</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>254</td>
    </tr>
    <tr>
      <td>3</td>
      <td>665</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<p>We seem to have data for days 1, 3 and 4, but no other data. Maybe this came from an external data source didn’t provide data for any other days. After talking to a domain expert, they would like a table showing days 1-5, and any day without a value should show a default value of zero.</p>

<h3 id="query-1">Query</h3>

<p>This snippet will populate a <code class="language-plaintext highlighter-rouge">datatable</code> like the above, plus a table of <code class="language-plaintext highlighter-rouge">defaults</code>. It then uses a UNION query to produce the desired output.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">datatable</span> <span class="k">as</span> <span class="p">(</span>
        <span class="k">select</span> <span class="mi">1</span> <span class="k">as</span> <span class="nv">"day"</span><span class="p">,</span> <span class="mi">254</span> <span class="k">as</span> <span class="nv">"Value"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="mi">3</span> <span class="k">as</span> <span class="nv">"day"</span><span class="p">,</span> <span class="mi">665</span> <span class="k">as</span> <span class="nv">"Value"</span>
  <span class="k">union</span> <span class="k">select</span> <span class="mi">4</span> <span class="k">as</span> <span class="nv">"day"</span><span class="p">,</span> <span class="mi">3</span> <span class="k">as</span> <span class="nv">"Value"</span>
<span class="p">),</span>

<span class="k">defaults</span> <span class="k">as</span> <span class="p">(</span>
		<span class="k">select</span> <span class="mi">1</span> <span class="k">as</span> <span class="nv">"day"</span><span class="p">,</span> <span class="mi">0</span> <span class="k">as</span> <span class="nv">"Value"</span>
	<span class="k">union</span> <span class="k">select</span> <span class="mi">2</span> <span class="k">as</span> <span class="nv">"day"</span><span class="p">,</span> <span class="mi">0</span> <span class="k">as</span> <span class="nv">"Value"</span>
	<span class="k">union</span> <span class="k">select</span> <span class="mi">3</span> <span class="k">as</span> <span class="nv">"day"</span><span class="p">,</span> <span class="mi">0</span> <span class="k">as</span> <span class="nv">"Value"</span>
	<span class="k">union</span> <span class="k">select</span> <span class="mi">4</span> <span class="k">as</span> <span class="nv">"day"</span><span class="p">,</span> <span class="mi">0</span> <span class="k">as</span> <span class="nv">"Value"</span>
	<span class="k">union</span> <span class="k">select</span> <span class="mi">5</span> <span class="k">as</span> <span class="nv">"day"</span><span class="p">,</span> <span class="mi">0</span> <span class="k">as</span> <span class="nv">"Value"</span>
<span class="p">)</span>

<span class="k">SELECT</span> <span class="k">day</span><span class="p">,</span> <span class="n">Value</span>
<span class="k">FROM</span> <span class="n">datatable</span>
<span class="k">UNION</span> 
<span class="k">SELECT</span> <span class="k">day</span><span class="p">,</span> <span class="n">Value</span>
<span class="k">FROM</span> <span class="k">defaults</span>
<span class="k">WHERE</span> <span class="k">defaults</span><span class="p">.</span><span class="k">day</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">distinct</span> <span class="k">day</span> <span class="k">from</span> <span class="n">datatable</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="output-1">Output</h3>

<table>
  <thead>
    <tr>
      <th>Day</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>254</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <td>3</td>
      <td>665</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3</td>
    </tr>
    <tr>
      <td>5</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>With this technique you can easily insert nulls, zeros, or other default values into a table. You can even maintain a <code class="language-plaintext highlighter-rouge">defaults</code> table if, for some reason, the default value to be inserted is likely to vary.</p>]]></content><author><name></name></author><category term="coding" /><category term="fixes-&amp;amp;-tricks" /><category term="sql" /><summary type="html"><![CDATA[SQL Server Queries - Task Duration &amp; Inserting Defaults]]></summary></entry><entry><title type="html">Understanding A Python 3 8 Quine</title><link href="http://localhost:4000/2021/09/02/understanding-a-python-38-quine.html" rel="alternate" type="text/html" title="Understanding A Python 3 8 Quine" /><published>2021-09-02T14:45:39+01:00</published><updated>2021-09-02T14:45:39+01:00</updated><id>http://localhost:4000/2021/09/02/understanding-a-python-38-quine</id><content type="html" xml:base="http://localhost:4000/2021/09/02/understanding-a-python-38-quine.html"><![CDATA[<h1 id="understanding-a-python-38-quine">Understanding a Python 3.8 Quine</h1>

<p><img src="/images/pexels-photo-1207875.jpeg" alt="a primate examines themselves in the mirror" /></p>

<h2 id="what-is-a-quine">What is a quine?</h2>

<p>Per the font of all human knowledge, Wikipedia, “a quine is a computer program which takes no input and produces a copy of its own source code as its only output”.</p>

<p>Quines are named after the logician Willard Quine, and are quite interesting from a theoretical point of view and fun to think about. I thought I’d pick a Python quine and analyse how it works, and what syntactical tricks it exploits to replicate itself in the output.</p>

<h2 id="python-38-quine-from-stackoverflow">Python 3.8 quine (from Stackoverflow)</h2>

<p>Rather arbitrarily, I’ve picked this quine (tested in Python 3.8) from <a href="https://stackoverflow.com/questions/6223285/shortest-python-quine">StackOverflow</a>, in the response by user <a href="https://stackoverflow.com/users/4698348/hallo">hallo</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">((</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">x</span><span class="si">}{</span><span class="n">x</span><span class="p">,</span><span class="si">}</span><span class="s">)"</span><span class="p">)(</span><span class="s">'print((lambda x:f"{x}{x,})")'</span><span class="p">,))</span>
</code></pre></div></div>

<p>I just thought the syntax of it looked fun, and I wanted to understand it and hopefully share that understanding with you.</p>

<p>Note that Python 3.8 will usually interpret a value followed by a comma <code class="language-plaintext highlighter-rouge">x,</code> as a one-element tuple whose string representation is <code class="language-plaintext highlighter-rouge">(x,)</code>. This will be important later for keeping track of brackets!</p>

<h2 id="ingredients-of-the-quine">Ingredients of the quine</h2>

<h3 id="the-print-statement">The print statement</h3>

<p>This line of code has only one print statement, on the outside. The second time the word print appears, it is inside a string and won’t actually cause anything to be printed.</p>

<p>The print statement on the outside does what you’d expect, so there’s not much to say about this ingredient.</p>

<h3 id="f-strings-in-python">f-strings in Python</h3>

<p>A more significant element in this quine is the use of f-strings. New in Python 3, f-strings are “formatted string literals”, they allow you to insert variables or other Python expressions into a string.</p>

<p>To do this you simply prefix the string with an <code class="language-plaintext highlighter-rouge">f</code> or <code class="language-plaintext highlighter-rouge">F</code> before the opening single or triple quote, and contain the Python expression you want to insert in braces <code class="language-plaintext highlighter-rouge">{}</code>.</p>

<p>Example:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">name</span> <span class="o">=</span> <span class="s">'Boba Fett'</span>
<span class="n">age</span> <span class="o">=</span> <span class="mi">19</span>
<span class="n">pronoun</span> <span class="o">=</span> <span class="s">'he'</span>
<span class="n">max_value</span> <span class="o">=</span> <span class="mi">10</span>

<span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'When </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> was </span><span class="si">{</span><span class="n">age</span><span class="si">}</span><span class="s"> years old, </span><span class="si">{</span><span class="n">pronoun</span><span class="si">}</span><span class="s"> learned to count to </span><span class="si">{</span><span class="n">max_value</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">max_value</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="si">}</span><span class="s">'</span>

<span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</code></pre></div></div>
<p>Output:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>When Boba Fett was 19 years old, he learned to count to 10: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre></div></div>

<h3 id="lambda-functions-in-python">Lambda functions in Python</h3>

<p>This quine uses lambda notation to define a function. This is a useful notation to define a function in a single line by specifying the output that results from a given input.</p>

<p>Let’s look at an example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">func</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="mi">5</span>
</code></pre></div></div>

<p>Here we have defined a function <code class="language-plaintext highlighter-rouge">func</code> which takes an input <code class="language-plaintext highlighter-rouge">x</code> and returns an output <code class="language-plaintext highlighter-rouge">x*5</code>.</p>

<p>Having defined <code class="language-plaintext highlighter-rouge">func</code> , we can apply it to a few different inputs:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="s">'jiminy'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="mf">300.5</span><span class="p">))</span>
</code></pre></div></div>

<p>which will yield, predictably:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>15
jiminyjiminyjiminyjiminyjiminy
1502.5
</code></pre></div></div>

<h3 id="the-function-lambda-xfxx">The function <code class="language-plaintext highlighter-rouge">lambda x:f"{x}{x,})"</code></h3>

<p>The workhorse of this quine is the function <code class="language-plaintext highlighter-rouge">lambda</code> <code class="language-plaintext highlighter-rouge">x:f"{x}{x,})"</code></p>

<p>Let’s try and break it down - this takes an input <code class="language-plaintext highlighter-rouge">x</code> and returns an output <code class="language-plaintext highlighter-rouge">f"{x}{x,})"</code></p>

<p>The output is an f-string which substitutes first the value of x, followed by the one-element tuple <code class="language-plaintext highlighter-rouge">(x,)</code>, then appends the character <code class="language-plaintext highlighter-rouge">)</code>. So we expect this function to return the input, followed by a tuple containing the input, then the <code class="language-plaintext highlighter-rouge">)</code> character.</p>

<p>Let’s try it a couple of times:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span> <span class="o">=</span> <span class="k">lambda</span>  <span class="n">x</span><span class="p">:</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">x</span><span class="si">}{</span><span class="p">(</span><span class="n">x</span><span class="p">,)</span><span class="si">}</span><span class="s">)"</span>

<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">(</span><span class="s">'banana'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)))</span>
</code></pre></div></div>

<p><strong>Output:</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>banana('banana',))  
5(5,))  
(1, 3, 5)((1, 3, 5),))
</code></pre></div></div>

<p>So this function yields a string output consisting of the string representation of the three parts below, concatenated together:</p>

<ol>
  <li>The input</li>
  <li>A tuple containing only the input</li>
  <li>A closing parenthesis character <code class="language-plaintext highlighter-rouge">)</code></li>
</ol>

<p>However something interesting happens if we feed this function an expression like <code class="language-plaintext highlighter-rouge">'chimp',</code></p>

<p>Normally we expect Python to recognise this as a tuple and treat it the same way as the single-item tuple <code class="language-plaintext highlighter-rouge">('chimp',).</code> In that case we would expect the output <code class="language-plaintext highlighter-rouge">('chimp',)(('chimp',) ,))</code></p>

<p>But test it, and you’ll see a different behaviour:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span> <span class="o">=</span> <span class="k">lambda</span>  <span class="n">x</span><span class="p">:</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">x</span><span class="si">}{</span><span class="p">(</span><span class="n">x</span><span class="p">,)</span><span class="si">}</span><span class="s">)"</span>

<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">(</span><span class="s">'chimp'</span><span class="p">,))</span>
</code></pre></div></div>
<p><strong>Output:</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chimp('chimp',))
</code></pre></div></div>

<p>What??? That looks nothing like what happened when we used the tuple <code class="language-plaintext highlighter-rouge">(1, 3, 5)</code> as an input.</p>

<p>Something curious is going on. To understand what, consider what happens if you try to evaluate <code class="language-plaintext highlighter-rouge">y('chimp','apple','grape')</code>. You’ll get an error - the function y is expecting one positional argument, not three!</p>

<p>See, Python regards <code class="language-plaintext highlighter-rouge">`y('chimp','apple','grape')`</code> not as an instruction to take the tuple <code class="language-plaintext highlighter-rouge">('chimp','apple','grape')</code> and pass it into the function <code class="language-plaintext highlighter-rouge">y</code>, but rather as an instruction to take the strings <code class="language-plaintext highlighter-rouge">'chimp'</code>, <code class="language-plaintext highlighter-rouge">'apple'</code> and <code class="language-plaintext highlighter-rouge">'grape'</code> and pass them to the function as positional arguments.</p>

<p>Likewise, when we evaluate <code class="language-plaintext highlighter-rouge">`y('chimp',)`</code> , Python will see <code class="language-plaintext highlighter-rouge">'chimp',</code> not as a tuple argument, but as a tuple of positional arguments that happens to contain just one argument.</p>

<p><code class="language-plaintext highlighter-rouge">y('chimp',) == y('chimp') == chimp('chimp',))</code></p>

<p>This trick is crucial to this particular quine!</p>

<h2 id="reading-the-quine">Reading the quine</h2>

<p>Let’s take a look at the whole quine:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">((</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">x</span><span class="si">}{</span><span class="n">x</span><span class="p">,</span><span class="si">}</span><span class="s">)"</span><span class="p">)(</span><span class="s">'print((lambda x:f"{x}{x,})")'</span><span class="p">,))</span>
</code></pre></div></div>

<p>So let’s work through and see what this does. Ignoring the print statement for a moment:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">x</span><span class="si">}{</span><span class="n">x</span><span class="p">,</span><span class="si">}</span><span class="s">)"</span><span class="p">)(</span><span class="s">'print((lambda x:f"{x}{x,})")'</span><span class="p">,)</span>
</code></pre></div></div>

<p>So we take our beloved function from the previous section, and give it the input <code class="language-plaintext highlighter-rouge">'print((lambda x:f"{x}{x,})")',</code></p>

<p>Per the <code class="language-plaintext highlighter-rouge">'chimp'</code>, example above, we know this output will be identical to:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(lambda x:f"{x}{x,})")('print((lambda x:f"{x}{x,})")')
</code></pre></div></div>

<p>Now we expect:</p>

<ol>
  <li>The input == <code class="language-plaintext highlighter-rouge">print((lambda x:f"{x}{x,})")</code></li>
  <li>A tuple containing only the input == (<code class="language-plaintext highlighter-rouge">'print((lambda x:f"{x}{x,})")'</code>,)</li>
  <li>A closing parenthesis == <code class="language-plaintext highlighter-rouge">)</code></li>
</ol>

<p>Concatenate the string representations of the above, and get:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print((lambda x:f"{x}{x,})")('print((lambda x:f"{x}{x,})")',))
</code></pre></div></div>

<p>This is the code of the quine itself, which will be wrapped in the print function we ignored earlier. Therefore, the quine will output its own code to the console. So it is a quine!</p>

<h2 id="the-tricks---parentheses-and-commas">The “tricks” - parentheses and commas</h2>

<p>This particular quine exploits two main quirks of Python.</p>

<p>Firstly, the fact that parentheses <code class="language-plaintext highlighter-rouge">()</code> are used in two different ways. They can be used to delimit a tuple <code class="language-plaintext highlighter-rouge">(a,b)</code> or to pass argument(s) to a function <code class="language-plaintext highlighter-rouge">func(a,b,c...)</code>. One could argue about how different the two uses are, since the arguments passed to a function do constitute a tuple…leaving that quibble aside, these can be thought of as distinct uses for parentheses.</p>

<p>The parentheses in this quine are, at various points, characters in a string, tuple delimiters, and delimiters of the argument(s) passed to a function.</p>

<p>The second quirk is that for any function <code class="language-plaintext highlighter-rouge">func</code> and argument <code class="language-plaintext highlighter-rouge">x</code>, we have the following: <code class="language-plaintext highlighter-rouge">func(x,) == func(x)</code>.</p>

<p>By exploiting these quirks, this quine manages to print itself. Fun!</p>]]></content><author><name></name></author><category term="coding" /><category term="python" /><summary type="html"><![CDATA[Understanding a Python 3.8 Quine]]></summary></entry><entry><title type="html">Vancian Spellcasting In Tabletop Rpgs</title><link href="http://localhost:4000/2021/08/20/vancian-spellcasting-in-tabletop-rpgs.html" rel="alternate" type="text/html" title="Vancian Spellcasting In Tabletop Rpgs" /><published>2021-08-20T14:45:39+01:00</published><updated>2021-08-20T14:45:39+01:00</updated><id>http://localhost:4000/2021/08/20/vancian-spellcasting-in-tabletop-rpgs</id><content type="html" xml:base="http://localhost:4000/2021/08/20/vancian-spellcasting-in-tabletop-rpgs.html"><![CDATA[<h1 id="vancian-spellcasting-in-tabletop-rpgs">Vancian Spellcasting in Tabletop RPGs</h1>

<p><img src="/images/pexels-photo-4355630-1.jpeg" alt="alluring young woman preparing potion against black background" /></p>

<p>“Vancian” magic systems - which is to say, those based on the work of 20th century fantasy author Jack Vance - are common in roleplaying games (particularly D&amp;D and its various derivatives, homages, and clones). The Vancian idiom also makes its way into fantasy fiction from time to time, perhaps more often by association with D&amp;D rather than the work of Jack Vance.</p>

<p>Here I’m going to share a few thoughts on how spellcasting works in Vance’s <em>Dying Earth</em> books, which are the primary source for this rich tradition of spellcasting systems.</p>

<p>The <em>Dying Earth</em> stories are set in the waning days of our planet, eons into the future, after countless civilisations have walked the earth practicing science and magic. In the last days of earth, science is largely forgotten in favour of wizardry, or perhaps one has evolved into the other. The sun flickers in the sky, and is expected to go dark any day now. In this moribund world, Vance’s cast of characters strut and fret their hour upon a collapsing stage. In general they are a venal and untrustworthy lot, prone to excesses for which the term “content warning” is not remotely ill-suited.</p>

<h2 id="spells-in-the-dying-earth">Spells in the Dying Earth</h2>

<p>A spell, in Dying Earth terminology, is a sequence of mystical syllables designed in ages past to achieve a particular purpose. By the era of Vance’s stories, most of the thousands of spells devised by the wizards of old are lost, leaving scarcely more than a hundred.</p>

<h3 id="one-spell-for-one-job">One Spell for One Job</h3>

<p>Each spell is specific in its purpo<strong>se. The Excellent Prismatic Spray</strong> pierces a foe with varicoloured penetrating rays. <strong>The Curse of the Macroid Toe</strong> enlarges the victim’s toe to the proportions of a house. <strong>The Omnipotent Sphere</strong> protects the caster inside an impenetrable magical shell. Players of D&amp;D will recognise some of Vance’s creations as spells common to many editions of D&amp;D. Others bear Vance’s mark in how they are named - Mordenkainen is a character from D&amp;D’s Oerth setting, after whom many spells are named. Jack Vance never wrote about <strong>Mordenkainen’s Magnificent Mansion</strong> or <strong>Mordenkainen’s Sword</strong>, but he did write about <strong>Phandaal’s Gyrator</strong> and <strong>Phandaal’s Mantle of Stealth</strong>, likely inspiring D&amp;D’s tradition of naming spells for their eminent creators.</p>

<h3 id="only-a-few-spells-at-once">Only A Few Spells At Once</h3>

<p>The spellcasters of the Dying Earth cannot go forth armed with every spell they have ever learned. They must consult their books, cramming the ineffable syllables of each enchantment into their brain with great effort. A learned mage can memorise a handful of spells at once. Those of less impressive intellect, such as that of Cugel the Clever, can hold but one spell in their memory, and may, at times, confuse a syllable and spoil the casting of that single spell.</p>

<p>In a process most D&amp;D players will be familiar with, Mazirian the Magician (in the story named for him) sets forth from his laboratory having chosen a specific set of spells designed to protect him against the perils he foresees for his journey. After this departure, only those spells are available to him, and if the situation better suits a spell he failed to cram into his memory, Mazirian is flat out of luck. Furthermore, he can cast each spell but once, losing it from his mind as he casts it. <strong>Phandaal’s Gyrator</strong> is fearsome indeed, but Mazirian cannot simply cast it at every foe that crosses his path.</p>

<p>Here we see some of the criticial features of Vancian spellcasting - choosing which spells to prepare, and having a limited number of castings. D&amp;D has separated and permuted these features in various ways over the years. Some classes can cast any spell they have learned, without having prepared a particular selection for the day. However, such classes generally expend a “spell slot” of the spell’s level to cast it, and so cannot hurl dozens of <strong>Fireballs</strong> in a day.</p>

<h2 id="questions-raised-by-dying-earth-spells">Questions Raised by Dying Earth Spells</h2>

<p>For anyone planning to build their own spell system inspired by Dying Earth, there are some critical design questions which Vance, being a storyteller rather than a rulebook writer, fails to address. Various editions of D&amp;D and other games find various convenient answers to these, but it’s interesting to revisit them with a fresh mind:</p>

<h3 id="why-doesnt-mazirian-take-a-few-spellbooks-with-him">Why doesn’t Mazirian take a few spellbooks with him?</h3>

<p>Mazirian the magician prepares spells from books before venturing forth on an adventure. Who knows how long the errand might take him, and how long he might be separated from his precious books? If he is detained, he has no way of preparing further spells.</p>

<p>At one point we see Cugel cram a single spell into his cranium, cast it, and then consult a tome to prepare a second spell. This seems to take him just a few moments, suggesting that a wizard who carried spellbooks around would have much greater flexibility in their casting.</p>

<p>Now Mazirian may have his reasons - not wanting to risk his precious tomes being perhaps one - but if you copy this system as-is into an RPG, you may find your PC spellcasters carry pack-mules full of spellbooks, and swap their prepared spells at a moment’s notice. Such characters will be difficult to challenge.</p>

<h3 id="can-you-prepare-the-same-spell-more-than-once">Can you prepare the same spell more than once?</h3>

<p>If you’re planning an extremely sneaky mission, and have a mind fit to bear three spells, can you memorise <strong>Phandaal’s Mantle of Stealth</strong> three times? As far as I’m aware, no-one ever does this in a Vance story, though it is common in some versions of D&amp;D and other tabletop RPGs.</p>

<p>However there is an argument that it doesn’t make sense with Vance’s idea. The concept is that the syllables of a spell are so cogent that cramming them into memory is a great feat, and the mind can only hold a few at once.</p>

<p>How easily could you oblige, if I were to ask you to memorise the name of Alexander the Great’s horse (Bucephalus) <em>twice</em>? Such that if you forgot it, you would still remember it.</p>

<p>This issue is probably why the term “prepare” has become more common than “memorise” as the name for this process of selecting one’s arsenal of spells.</p>

<h3 id="how-long-do-prepared-spells-last">How long do prepared spells last?</h3>

<p>Once I have memorised the <strong>Curse of the Macroid Toe</strong>, how long do I have to unleash it on some unsuspecting malefactor? There’s no clear answer in the stories - perhaps it persists indefinitely, perhaps it depends on the spellcaster’s natural powers of memory. RPGs will tend to answer this with a simple, definite time - perhaps the following dawn, or the next time the spellcaster sleeps.</p>

<h2 id="other-magic-of-the-dying-earth">Other Magic of the Dying Earth</h2>

<p>For those who have only heard of Vancian magic from roleplaying circles, it’s easy to presume that all magic in the Dying Earth works according to this strict set of rules. In fact this is far from the case. The Dying Earth is full of magic items with strange powers that require no spell, demons and ghosts which can be summoned forth to do a wizard’s bidding, and alien creatures whose abilities are tantamount to sorcery.</p>

<p>Indeed the most powerful wizards of the Dying Earth rarely cast a spell at all, having bound into their service certain reluctantly powerful creatures called sandestin. By commands, entreaties, bargains and threats, these wizards coax their sandestin into performing such wonders as they require, much like holding the lamp of a particularly snide and recalcitrant genie.</p>

<h2 id="conclusions-or-lack-thereof">Conclusions or lack thereof</h2>

<p>Really this post is just an opportunity to revisit Jack Vance’s take on magic, rather than provide any serious mechanical analysis of various forms of Vancian magic that exist in RPGs. For me it’s useful to know where the term comes from, and how Vance actually wrote about magic. Comparing that to how RPGs employ the concept is an interesting process, but where it leads will depend on your own thoughts and preferences.</p>]]></content><author><name></name></author><category term="tabletop-roleplaying" /><summary type="html"><![CDATA[Vancian Spellcasting in Tabletop RPGs]]></summary></entry><entry><title type="html">Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function</title><link href="http://localhost:4000/2021/08/12/aws-cloudformation-example-part-2-deploy-and-test-a-rest-api-+-lambda-function.html" rel="alternate" type="text/html" title="Aws Cloudformation Example Part 2 Deploy And Test A Rest Api Lambda Function" /><published>2021-08-12T14:45:39+01:00</published><updated>2021-08-12T14:45:39+01:00</updated><id>http://localhost:4000/2021/08/12/aws-cloudformation-example-part-2-deploy-and-test-a-rest-api-+-lambda-function</id><content type="html" xml:base="http://localhost:4000/2021/08/12/aws-cloudformation-example-part-2-deploy-and-test-a-rest-api-+-lambda-function.html"><![CDATA[<h1 id="aws-cloudformation-example-part-2---deploy-and-test-a-rest-api--lambda-function">AWS Cloudformation Example Part 2 - Deploy and Test a REST API + Lambda Function</h1>

<p><img src="/images/pexels-photo-4175032.jpeg" alt="person in black long sleeve shirt holding white tissue paper" /></p>

<p>In <a href="https://david-bartram.com/2021/08/02/aws-cloudformation-example-part-1-sam-template-for-rest-api-lambda-function/">Part 1</a> we put together a Cloudformation SAM template for a simple REST API backed by a lambda function. The resulting code is available in <a href="https://github.com/DavidBartram/cloudformation-api-lambda">this repo</a>.</p>

<p>In this post, we’ll walk through how to deploy the template to AWS and test the API using Postman.</p>

<ol>
  <li>
    <h2 id="install-sam-cli">Install SAM CLI</h2>
  </li>
</ol>

<p>To deploy SAM templates, you’ll want to <a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html">install the SAM CLI</a>. Make sure that the IAM user whose access key and secret key you are using has the necessary permissions to deploy this. If you’re doing this as a learning activity on a personal account, as I was, it’s simplest to use the credentials of a user with Administrator access.</p>

<h2 id="2-clone-repository">2<strong>.</strong> Clone repository</h2>

<p>Now you’ll need a SAM template to deploy, along with the code you want to use in the lambda function. The code we’re using here can be found on <a href="https://github.com/DavidBartram/cloudformation-api-lambda">my GitHub</a> and was explained in <a href="https://david-bartram.com/2021/08/02/aws-cloudformation-example-part-1-sam-template-for-rest-api-lambda-function/">Part 1</a>. Fork the repo and clone it down to your machine.</p>

<ol>
  <li>
    <h2 id="sam-build">SAM build</h2>
  </li>
</ol>

<p>Using your command line of choice, change directory to the cloned repo. (My main laptop is Windows so it would be PowerShell for me - stop hissing in the background, you lot. I like bash as well.)</p>

<p>Enter the <code class="language-plaintext highlighter-rouge">sam build</code> command.</p>

<p>This will package the separate components in the folder (e.g. the SAM template and the lambda code in this example) together into a deployable artifact.</p>

<p><code class="language-plaintext highlighter-rouge">sam build</code> is expecting a file call <code class="language-plaintext highlighter-rouge">template.yml</code> in the root of the directory, but of course it is easy to set the template name with the -t option if required. The options are documented <a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-build.html">here</a>.</p>

<p>You’re hoping for a successful build, like the below:</p>

<p><img src="/images/image.png" alt="" /></p>

<ol>
  <li>
    <h2 id="sam-deploy">SAM deploy</h2>
  </li>
</ol>

<p>Well, who am I to argue with the suggestion that we use <code class="language-plaintext highlighter-rouge">sam deploy --guided</code> ?</p>

<p>The <code class="language-plaintext highlighter-rouge">--guided</code> option, as you’d expect, means that SAM will guide you through the process with prompts.</p>

<p>However we want to deploy IAM resources with custom names, which requires a capability called CAPABILITY_NAMED_IAM. So our full command will look like:</p>

<p><code class="language-plaintext highlighter-rouge">sam deploy --guided --capabilities CAPABILITY_NAMED_IAM</code></p>

<p>You can choose what to name your Cloudformation stack, the Region you want to deploy to, and the values of all the parameters in <code class="language-plaintext highlighter-rouge">template.yml</code>. I was happy with the defaults, so I only had to choose the stack name and the last few options.</p>

<p><img src="/images/image-2.png" alt="" /></p>

<p>The last 3 options will save the SAM configuration to a <a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-config.html">config file</a> called <code class="language-plaintext highlighter-rouge">samconfig.toml</code> in the root of the directory.</p>

<p>I asked to confirm the changes before deployment, so I get a chance to look at the changeset:</p>

<p><img src="/images/image-3.png" alt="" /></p>

<p>Those look like the resources I asked for in my template, so I will answer in the affirmative to <code class="language-plaintext highlighter-rouge">Deploy this changeset? [y/N]</code> <code class="language-plaintext highlighter-rouge">.</code></p>

<p>You can watch it being created, and soon enough the stack will be successfully deployed:</p>

<p><img src="/images/image-4.png" alt="" /></p>

<ol>
  <li>
    <h2 id="view-cloudformation-stack-in-aws-console">View Cloudformation Stack in AWS Console</h2>
  </li>
</ol>

<p>Let’s hope into the AWS console, go to the Cloudformation console and select the stack you’ve just created. If you go to the Resources tab you can see all the resources that have been created. At this point if you’re anything like me you’ll want to visit some of the resources and poke around, see if things are as you expected based on your template.</p>

<p><img src="/images/image-5.png" alt="" /></p>

<ol>
  <li>
    <h2 id="test-api-in-aws-console">Test API in AWS Console</h2>
  </li>
</ol>

<p>Let’s start testing the API that we’ve deployed. Firstly we’re going to test it from the console, by clicking the “physical ID” of the RestApi resource in the table shown in the image above. This will open up the API Gateway console and let us look at our API.</p>

<p>There’s plenty of interesting things we could look at, but for now click on the POST method and then click the test button:</p>

<p><img src="/images/image-6.png" alt="" /></p>

<p>This test bypasses any authorization on the API. For the request body, enter something that matches the schema we set up for submitting sales stats for coloured widgets. It should look something like this:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
</span><span class="nl">"date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-07-28"</span><span class="p">,</span><span class="w">
</span><span class="nl">"location"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Manchester"</span><span class="p">,</span><span class="w">
</span><span class="nl">"red_sold"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2051"</span><span class="p">,</span><span class="w">
</span><span class="nl">"blue_sold"</span><span class="p">:</span><span class="w"> </span><span class="s2">"37"</span><span class="p">,</span><span class="w">
</span><span class="nl">"green_sold"</span><span class="p">:</span><span class="w"> </span><span class="s2">"588"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>You’re expecting a matching response</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Thank you for submitting data. You submitted the following. Date 2021-07-28 at location Manchester, number of red widgets sold was 2051, number of blue widgets sold was 37, number of green widgets sold was 588."</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>
    <h2 id="create-iam-user--attach-policy">Create IAM user + attach policy</h2>
  </li>
</ol>

<p>If we want to use the API properly, we need the right authorization. Last time, I decided to use IAM authorization. We want to create our IAM user separately from the stack, as we want their details to persist if changes are made to the stack.</p>

<p>Follow the instructions <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html">here</a> to create an IAM user with programmatic access. Make sure you save the access key and secret key.</p>

<p>The only permissions this user needs are in the API user managed policy created as part of the stack. Attach that policy to the user, and they will have access to this API.</p>

<ol>
  <li>
    <h2 id="install-postman">Install Postman</h2>
  </li>
</ol>

<p><a href="https://www.postman.com/">Postman</a> is a great tool for working on APIs, and it’s particularly easy to send a test API request with Postman and look at the response. It’s especially handy here as it can automatically sign the API request the way AWS IAM expects, using an access key and secret key. Download it <a href="https://www.postman.com/downloads/">here</a>.</p>

<ol>
  <li>
    <h2 id="test-api-with-postman">Test API with Postman</h2>
  </li>
</ol>

<p>Let’s construct our request. Click New in Postman, and choose a basic request. Give it a name and save it.</p>

<p>Select POST from the dropdown, and enter your API’s URL.</p>

<p>The url will be of this form:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://&lt;API ID&gt;.execute-api.&lt;region&gt;.amazonaws.com/&lt;stage&gt;/&lt;resource&gt;
</code></pre></div></div>

<p>You don’t need to pass in any query parameters.</p>

<p>Select the Body tab, select the “raw” option and choose JSON from the dropdown. Enter a valid JSON Body.</p>

<p><img src="/images/image-8.png" alt="" /></p>

<p>If you click Send now, you’ll get a “Missing Authentication Token” error in response. This API isn’t available to just anyone - you need to sign your request with the access key and secret key of the IAM user you created earlier.</p>

<p>Go to the Authorization tab and select AWS Signature from the Authorization Type dropdown. Enter your access key and secret key on the right. Click Advanced and enter the AWS region.</p>

<p><img src="/images/image-9.png" alt="" /></p>

<p>Now when you hit Send, you’ll get the response you expect below your request.</p>

<p>Congratulations - you’ve made and deployed an API Gateway backed by a lambda function with AWS, and tested it from inside and outside AWS!</p>]]></content><author><name></name></author><category term="api-gateway" /><category term="aws" /><category term="cloudformation" /><category term="lambda" /><summary type="html"><![CDATA[AWS Cloudformation Example Part 2 - Deploy and Test a REST API + Lambda Function]]></summary></entry></feed>